{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie","program":"/home/ipfs/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","sp_trie","--edition=2018","/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=8b533129c153bbff","-C","extra-filename=-8b533129c153bbff","--out-dir","/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps","-L","dependency=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps","--extern","hash_db=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libhash_db-0c264603c81309b4.rmeta","--extern","memory_db=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libmemory_db-d54f9b76f773fe68.rmeta","--extern","codec=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libparity_scale_codec-f846fd866e90eb5c.rmeta","--extern","sp_core=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_core-9055fb2270914a2d.rmeta","--extern","sp_std=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_std-31df6ce51c93d927.rmeta","--extern","trie_db=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libtrie_db-fbe9ffc2d87029f2.rmeta","--extern","trie_root=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libtrie_root-a35521fa573851a7.rmeta","--cap-lints","allow","-L","native=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/build/clear_on_drop-a23791235c119df6/out","--error-format=json","--sysroot","/home/ipfs/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_trie-8b533129c153bbff.rmeta"},"prelude":{"crate_id":{"name":"sp_trie","disambiguator":[10248385436001548364,13201773522252176679]},"crate_root":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src","external_crates":[{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","num":15,"id":{"name":"parity_scale_codec","disambiguator":[15638882894901664300,15938776292720705477]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","num":16,"id":{"name":"parity_scale_codec_derive","disambiguator":[379814399442547304,17581532101419470896]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","num":17,"id":{"name":"arrayvec","disambiguator":[1332372460335241694,11021197825096612758]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","num":18,"id":{"name":"byte_slice_cast","disambiguator":[3640415380441394815,6311138287404375443]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","num":19,"id":{"name":"serde","disambiguator":[13481768320746797087,7282555180186658229]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","num":20,"id":{"name":"serde_derive","disambiguator":[14214070500933581380,3624999802238555216]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":21,"id":{"name":"sp_std","disambiguator":[11276958021017479825,16325732417868216137]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","num":22,"id":{"name":"hash_db","disambiguator":[9792644969574235955,776104945287127595]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","num":23,"id":{"name":"trie_db","disambiguator":[14058592916532296697,15101355858841735982]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","num":24,"id":{"name":"hashbrown","disambiguator":[10607846963804169666,8224092687569940531]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","num":25,"id":{"name":"ahash","disambiguator":[7836108867056887213,9815184329433061515]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","num":26,"id":{"name":"const_random","disambiguator":[4215802248038723435,8585138714700839987]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","num":27,"id":{"name":"proc_macro_hack","disambiguator":[11648198905521943211,17157862379242527653]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","num":28,"id":{"name":"const_random_macro","disambiguator":[17458909312445488312,12242545549692467389]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","num":29,"id":{"name":"log","disambiguator":[9335353625162574946,15944831640773690670]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","num":30,"id":{"name":"cfg_if","disambiguator":[905820604123660737,9080961431952796619]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","num":31,"id":{"name":"rustc_hex","disambiguator":[10434719161438519964,14346445293922435357]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","num":32,"id":{"name":"smallvec","disambiguator":[4204636050770628742,12614792987383810951]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/trie_stream.rs","num":33,"id":{"name":"trie_root","disambiguator":[14527925958066830872,5108783250952835176]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":34,"id":{"name":"memory_db","disambiguator":[8751240236175815197,15856563000382176854]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":35,"id":{"name":"parity_util_mem","disambiguator":[3673319352374838710,9109263036345257279]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":36,"id":{"name":"primitive_types","disambiguator":[2776970764958629400,18334998628678477911]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":37,"id":{"name":"fixed_hash","disambiguator":[14470681025450579457,6662852255323844967]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":38,"id":{"name":"static_assertions","disambiguator":[2878701793821026304,16986476632016046768]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":39,"id":{"name":"byteorder","disambiguator":[8554857055557278435,8958170879440380952]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":40,"id":{"name":"rand","disambiguator":[14852911624231536199,4329007306221210672]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":41,"id":{"name":"rand_core","disambiguator":[8541689899428407495,4972805062826425925]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":42,"id":{"name":"getrandom","disambiguator":[13618700189715949314,16365477718892601647]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":43,"id":{"name":"libc","disambiguator":[15850054303935087509,2172107276946414463]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":44,"id":{"name":"rand_chacha","disambiguator":[5821611541543872135,256988615729141104]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":45,"id":{"name":"ppv_lite86","disambiguator":[2483357076725709498,12969028423603202931]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":46,"id":{"name":"rand_pcg","disambiguator":[1329119161985853472,9189108109752656620]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":47,"id":{"name":"uint","disambiguator":[16452983131080529725,17838387769575104159]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":48,"id":{"name":"crunchy","disambiguator":[8492468043868098796,9147562601699587076]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":49,"id":{"name":"impl_serde","disambiguator":[8980924363609643778,8190912899161023955]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":50,"id":{"name":"impl_codec","disambiguator":[10299275643052968783,3017370659095368483]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":51,"id":{"name":"parity_util_mem_derive","disambiguator":[16094718766684562609,9112552796339687964]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":52,"id":{"name":"impl_trait_for_tuples","disambiguator":[11683877044574956040,7740304785833687617]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":53,"id":{"name":"parking_lot","disambiguator":[4077664270008470479,11966793794786088639]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":54,"id":{"name":"lock_api","disambiguator":[2863804777762583869,14799884867851676310]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":55,"id":{"name":"scopeguard","disambiguator":[5081943333480440636,9076196664652206448]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","num":56,"id":{"name":"parking_lot_core","disambiguator":[10023082735607659909,12352998360333487442]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":57,"id":{"name":"sp_core","disambiguator":[17683045494970980731,13559405023477717555]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":58,"id":{"name":"sp_debug_derive","disambiguator":[13522996333100151204,9314162219563761913]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":59,"id":{"name":"blake2_rfc","disambiguator":[13425746585612006076,3893349097137814390]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":60,"id":{"name":"arrayvec","disambiguator":[8980556773631144340,1530384929258256254]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":61,"id":{"name":"nodrop","disambiguator":[15580487097472407489,16164216452101372544]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":62,"id":{"name":"constant_time_eq","disambiguator":[7513921960350961442,6826608885349661575]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":63,"id":{"name":"sha2","disambiguator":[2087999941899417202,8652755061219861371]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":64,"id":{"name":"block_buffer","disambiguator":[13746670423446533395,10291558624333589947]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":65,"id":{"name":"block_padding","disambiguator":[15921479850100810545,9304032769572156234]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":66,"id":{"name":"byte_tools","disambiguator":[16878705203460379785,8432621841611626380]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":67,"id":{"name":"generic_array","disambiguator":[961146259118279585,2903465428615636575]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":68,"id":{"name":"typenum","disambiguator":[10535840393202809930,23112338360262232]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":69,"id":{"name":"fake_simd","disambiguator":[10163378265795300682,3429049470422498345]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":70,"id":{"name":"opaque_debug","disambiguator":[542094102041843082,10502796311115957597]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":71,"id":{"name":"digest","disambiguator":[6126133259670863194,4625233068246866504]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":72,"id":{"name":"tiny_keccak","disambiguator":[16657255994201729273,15749590166371444127]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":73,"id":{"name":"twox_hash","disambiguator":[14103234801566248918,11854203410743868499]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":74,"id":{"name":"regex","disambiguator":[14198027042281804208,86081918665039131]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":75,"id":{"name":"aho_corasick","disambiguator":[6163840134106157642,11678023651240554382]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":76,"id":{"name":"memchr","disambiguator":[1600158827687491313,9258850746937660075]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":77,"id":{"name":"regex_syntax","disambiguator":[6585461900833040906,12117303110178991079]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":78,"id":{"name":"thread_local","disambiguator":[6963393236790488947,14544403037844186749]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":79,"id":{"name":"lazy_static","disambiguator":[9660684555614800310,8568331244489293542]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":80,"id":{"name":"base58","disambiguator":[16777386067770725910,11698301221143548428]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":81,"id":{"name":"zeroize","disambiguator":[8419538233743450039,4463467074577268889]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":82,"id":{"name":"zeroize_derive","disambiguator":[2444816796196962847,17316197202642986580]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":83,"id":{"name":"sp_runtime_interface","disambiguator":[682286166039121589,14525474089550891235]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":84,"id":{"name":"sp_wasm_interface","disambiguator":[8675793106772160261,13785408035542529938]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":85,"id":{"name":"wasmi","disambiguator":[2416228699110756094,1766770583142414386]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":86,"id":{"name":"memory_units","disambiguator":[14678550925423856477,13054517670253120849]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":87,"id":{"name":"parity_wasm","disambiguator":[1554235133951985503,17351528177382477681]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":88,"id":{"name":"wasmi_validation","disambiguator":[16639948640573147516,6276059922634634811]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":89,"id":{"name":"num_rational","disambiguator":[6975831310803048684,9911959382833982500]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":90,"id":{"name":"num_bigint","disambiguator":[12568277182492191496,17615354144430726922]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":91,"id":{"name":"num_integer","disambiguator":[6615314100295200538,6263506198981215227]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":92,"id":{"name":"num_traits","disambiguator":[17866579788280904889,8893385662677143502]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":93,"id":{"name":"sp_tracing","disambiguator":[11438562976580646038,3002446573349231072]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":94,"id":{"name":"tracing","disambiguator":[13479947174673550820,4133118777693013263]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":95,"id":{"name":"tracing_core","disambiguator":[12837523844224698924,229843443816219795]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":96,"id":{"name":"tracing_attributes","disambiguator":[2263492286649080348,13111413153421272784]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":97,"id":{"name":"sp_runtime_interface_proc_macro","disambiguator":[10297837370306352563,17721521789272836432]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":98,"id":{"name":"sp_externalities","disambiguator":[13735059725287377343,7074722714493672266]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":99,"id":{"name":"sp_storage","disambiguator":[8388726998902642419,5566405698735839699]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":100,"id":{"name":"ref_cast","disambiguator":[14927837505420523305,6271955165879955941]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":101,"id":{"name":"ref_cast_impl","disambiguator":[4388911118607149955,14232018770742587068]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":102,"id":{"name":"impl_serde","disambiguator":[4240565461243128030,16964821940194849107]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":103,"id":{"name":"environmental","disambiguator":[4327085142237264898,15570963526468317845]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":104,"id":{"name":"substrate_bip39","disambiguator":[16026320640443918052,13713051357735189700]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":105,"id":{"name":"hmac","disambiguator":[11460341029875594496,1906197491684850741]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":106,"id":{"name":"crypto_mac","disambiguator":[8320459484509458636,4799276508247752895]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":107,"id":{"name":"subtle","disambiguator":[8535025202508457436,17708549248523872086]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":108,"id":{"name":"pbkdf2","disambiguator":[4851686168477502927,14028351777984925782]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":109,"id":{"name":"schnorrkel","disambiguator":[16900468384019694665,10044191511765835896]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":110,"id":{"name":"arrayref","disambiguator":[16829708543304003037,4144275909003046035]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":111,"id":{"name":"curve25519_dalek","disambiguator":[16644072626332759431,10277902055030964482]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":112,"id":{"name":"subtle","disambiguator":[10234490685617874908,7684466441341660066]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":113,"id":{"name":"merlin","disambiguator":[7121650087445607272,2582201859466345986]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":114,"id":{"name":"keccak","disambiguator":[11472536135153304124,6639515317597576426]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":115,"id":{"name":"bip39","disambiguator":[17568215238128443509,8359727043341043963]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":116,"id":{"name":"failure","disambiguator":[16123704538531388289,16892100019265791353]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":117,"id":{"name":"failure_derive","disambiguator":[3132760448282680033,18074464896337337867]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":118,"id":{"name":"backtrace","disambiguator":[18134607837615136743,9446271803075368385]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":119,"id":{"name":"rustc_demangle","disambiguator":[5146049380465956145,771809060488072883]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":120,"id":{"name":"addr2line","disambiguator":[4367394800532784875,14916486106589456017]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":121,"id":{"name":"gimli","disambiguator":[2365300210788396002,3502160938625290209]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":122,"id":{"name":"object","disambiguator":[14105361202928525417,13644467560032816245]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":123,"id":{"name":"rustc_hash","disambiguator":[642462796696129389,1517420890865137522]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":124,"id":{"name":"once_cell","disambiguator":[9949018888993973705,561490500926270181]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":125,"id":{"name":"unicode_normalization","disambiguator":[5970646019162551857,17803897583820378264]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":126,"id":{"name":"secp256k1","disambiguator":[8656482482167472749,13898755881770913524]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":127,"id":{"name":"hmac_drbg","disambiguator":[1089521263031708807,8798061245638132398]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":128,"id":{"name":"hash256_std_hasher","disambiguator":[5964121242482212794,15478076518551278946]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":129,"id":{"name":"futures","disambiguator":[6054638481473170312,13203952068894848752]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":130,"id":{"name":"futures_core","disambiguator":[11059587244940335782,9444176274970569630]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":131,"id":{"name":"futures_util","disambiguator":[2297583133361674607,515887674582286629]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":132,"id":{"name":"pin_utils","disambiguator":[3395662280469368698,5400338344872609158]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":133,"id":{"name":"futures_task","disambiguator":[3375057385569108956,3660099607051496066]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":134,"id":{"name":"futures_sink","disambiguator":[11970731802322653413,20414178876719527]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":135,"id":{"name":"pin_project","disambiguator":[8927595869626226213,3154285897060979768]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":136,"id":{"name":"pin_project_internal","disambiguator":[8120037564058734458,5789199392772687002]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":137,"id":{"name":"futures_channel","disambiguator":[13337516612303749283,16221296507189771847]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":138,"id":{"name":"slab","disambiguator":[4729543071339994363,11740316045407999008]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":139,"id":{"name":"futures_io","disambiguator":[14784988759255588471,7048209535732240470]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":140,"id":{"name":"futures_macro","disambiguator":[13580139449298337526,18153847132449885543]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":141,"id":{"name":"proc_macro_nested","disambiguator":[325458717225558210,1907731413471412174]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":142,"id":{"name":"futures_executor","disambiguator":[393111632237910805,16437123074104340741]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":143,"id":{"name":"num_cpus","disambiguator":[3634483020136970562,12375898465086858394]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":144,"id":{"name":"derive_more","disambiguator":[13664702256915482174,18424806257437289619]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":145,"id":{"name":"hex","disambiguator":[18431432733982247784,9665997700775139809]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":146,"id":{"name":"ed25519_dalek","disambiguator":[6077726820243101941,623554713352160653]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","num":147,"id":{"name":"clear_on_drop","disambiguator":[17664436509209251898,11479650557223418245]}}],"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":714,"byte_end":26159,"line_start":17,"line_end":847,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":23,"index":1530},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1119,"byte_end":1130,"line_start":30,"line_end":30,"column_start":25,"column_end":36},"alias_span":null,"name":"VerifyError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":393},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1183,"byte_end":1188,"line_start":32,"line_end":32,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":470},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1268,"byte_end":1278,"line_start":34,"line_end":34,"column_start":22,"column_end":32},"alias_span":null,"name":"TrieStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":432},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1356,"byte_end":1365,"line_start":36,"line_end":36,"column_start":21,"column_end":30},"alias_span":null,"name":"NodeCodec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":442},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1390,"byte_end":1402,"line_start":37,"line_end":37,"column_start":24,"column_end":36},"alias_span":null,"name":"StorageProof","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1287},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1473,"byte_end":1477,"line_start":40,"line_end":40,"column_start":2,"column_end":6},"alias_span":null,"name":"Trie","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1303},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1479,"byte_end":1486,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"alias_span":null,"name":"TrieMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1244},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1488,"byte_end":1495,"line_start":40,"line_end":40,"column_start":17,"column_end":24},"alias_span":null,"name":"DBValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1652},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1497,"byte_end":1505,"line_start":40,"line_end":40,"column_start":26,"column_end":34},"alias_span":null,"name":"Recorder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1377},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1507,"byte_end":1513,"line_start":40,"line_end":40,"column_start":36,"column_end":42},"alias_span":null,"name":"CError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1261},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1515,"byte_end":1520,"line_start":40,"line_end":40,"column_start":44,"column_end":49},"alias_span":null,"name":"Query","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1352},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1522,"byte_end":1532,"line_start":40,"line_end":40,"column_start":51,"column_end":61},"alias_span":null,"name":"TrieLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1356},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1534,"byte_end":1551,"line_start":40,"line_end":40,"column_start":63,"column_end":80},"alias_span":null,"name":"TrieConfiguration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1078},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1553,"byte_end":1563,"line_start":40,"line_end":40,"column_start":82,"column_end":92},"alias_span":null,"name":"nibble_ops","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":315},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1565,"byte_end":1579,"line_start":40,"line_end":40,"column_start":94,"column_end":108},"alias_span":null,"name":"TrieDBIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":34,"index":48},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1654,"byte_end":1665,"line_start":43,"line_end":43,"column_start":20,"column_end":31},"alias_span":null,"name":"KeyFunction","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":34,"index":82},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1686,"byte_end":1698,"line_start":44,"line_end":44,"column_start":20,"column_end":32},"alias_span":null,"name":"prefixed_key","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":40},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1767,"byte_end":1773,"line_start":46,"line_end":46,"column_start":19,"column_end":25},"alias_span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1777,"byte_end":1784,"line_start":46,"line_end":46,"column_start":29,"column_end":36},"name":"HashDBT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":10},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1786,"byte_end":1798,"line_start":46,"line_end":46,"column_start":38,"column_end":50},"alias_span":null,"name":"EMPTY_PREFIX","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":714,"byte_end":26159,"line_start":17,"line_end":847,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":12},{"krate":0,"index":41},{"krate":0,"index":115},{"krate":0,"index":143},{"krate":0,"index":178},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":476},{"krate":0,"index":480},{"krate":0,"index":210},{"krate":0,"index":215},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":270},{"krate":0,"index":276},{"krate":0,"index":282},{"krate":0,"index":289},{"krate":0,"index":294},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":307},{"krate":0,"index":315},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":327},{"krate":0,"index":333},{"krate":0,"index":341},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":355},{"krate":0,"index":360},{"krate":0,"index":367},{"krate":0,"index":378},{"krate":0,"index":387}],"decl_id":null,"docs":" Utility functions to interact with Substrate's Base-16 Modified Merkle Patricia tree (\"trie\").\n","sig":null,"attributes":[{"value":"! Utility functions to interact with Substrate's Base-16 Modified Merkle Patricia tree (\"trie\").","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":714,"byte_end":812,"line_start":17,"line_end":17,"column_start":1,"column_end":99}}]},{"kind":"TupleVariant","id":{"krate":0,"index":394},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":26720,"byte_end":26729,"line_start":18,"line_end":18,"column_start":2,"column_end":11},"name":"BadFormat","qualname":"::error::Error::BadFormat","value":"Error::BadFormat","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Bad format.\n","sig":null,"attributes":[{"value":"/ Bad format.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":26703,"byte_end":26718,"line_start":17,"line_end":17,"column_start":2,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":396},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":26753,"byte_end":26759,"line_start":20,"line_end":20,"column_start":2,"column_end":8},"name":"Decode","qualname":"::error::Error::Decode","value":"Error::Decode(codec::Error)","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Decoding error.\n","sig":null,"attributes":[{"value":"/ Decoding error.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":26732,"byte_end":26751,"line_start":19,"line_end":19,"column_start":2,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":393},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":26694,"byte_end":26699,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{BadFormat, Decode}","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":396}],"decl_id":null,"docs":" Error for trie node decoding.\n","sig":null,"attributes":[{"value":"/ Error for trie node decoding.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":26651,"byte_end":26684,"line_start":15,"line_end":15,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":432},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","byte_start":33660,"byte_end":33669,"line_start":87,"line_end":87,"column_start":12,"column_end":21},"name":"NodeCodec","qualname":"::node_codec::NodeCodec","value":"","parent":null,"children":[],"decl_id":null,"docs":" Concrete implementation of a `NodeCodec` with Parity Codec encoding, generic over the `Hasher`\n","sig":null,"attributes":[{"value":"/ Concrete implementation of a `NodeCodec` with Parity Codec encoding, generic over the `Hasher`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","byte_start":33524,"byte_end":33622,"line_start":85,"line_end":85,"column_start":1,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":442},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41698,"byte_end":41710,"line_start":29,"line_end":29,"column_start":12,"column_end":24},"name":"StorageProof","qualname":"::storage_proof::StorageProof","value":"StorageProof {  }","parent":null,"children":[{"krate":0,"index":443}],"decl_id":null,"docs":" A proof that some set of key-value pairs are included in the storage trie. The proof contains\n the storage values so that the partial storage backend can be reconstructed by a verifier that\n does not already have access to the key-value pairs.","sig":null,"attributes":[{"value":"/ A proof that some set of key-value pairs are included in the storage trie. The proof contains","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41119,"byte_end":41216,"line_start":21,"line_end":21,"column_start":1,"column_end":98}},{"value":"/ the storage values so that the partial storage backend can be reconstructed by a verifier that","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41217,"byte_end":41315,"line_start":22,"line_end":22,"column_start":1,"column_end":99}},{"value":"/ does not already have access to the key-value pairs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41316,"byte_end":41372,"line_start":23,"line_end":23,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41373,"byte_end":41376,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The proof consists of the set of serialized nodes in the storage trie accessed when looking up","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41377,"byte_end":41475,"line_start":25,"line_end":25,"column_start":1,"column_end":99}},{"value":"/ the keys covered by the proof. Verifying the proof requires constructing the partial trie from","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41476,"byte_end":41574,"line_start":26,"line_end":26,"column_start":1,"column_end":99}},{"value":"/ the serialized nodes and performing the key lookups.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41575,"byte_end":41631,"line_start":27,"line_end":27,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41861,"byte_end":41864,"line_start":35,"line_end":35,"column_start":9,"column_end":12},"name":"new","qualname":"<StorageProof>::new","value":"fn (trie_nodes: Vec<Vec<u8>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a storage proof from a subset of encoded trie nodes in a storage backend.\n","sig":null,"attributes":[{"value":"/ Constructs a storage proof from a subset of encoded trie nodes in a storage backend.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41764,"byte_end":41852,"line_start":34,"line_end":34,"column_start":2,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42112,"byte_end":42117,"line_start":43,"line_end":43,"column_start":9,"column_end":14},"name":"empty","qualname":"<StorageProof>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new empty proof.","sig":null,"attributes":[{"value":"/ Returns a new empty proof.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41936,"byte_end":41966,"line_start":39,"line_end":39,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41968,"byte_end":41971,"line_start":40,"line_end":40,"column_start":2,"column_end":5}},{"value":"/ An empty proof is capable of only proving trivial statements (ie. that an empty set of","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41973,"byte_end":42063,"line_start":41,"line_end":41,"column_start":2,"column_end":92}},{"value":"/ key-value pairs exist in storage).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42065,"byte_end":42103,"line_start":42,"line_end":42,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42235,"byte_end":42243,"line_start":50,"line_end":50,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<StorageProof>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this is an empty proof.\n","sig":null,"attributes":[{"value":"/ Returns whether this is an empty proof.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42183,"byte_end":42226,"line_start":49,"line_end":49,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42445,"byte_end":42455,"line_start":56,"line_end":56,"column_start":9,"column_end":19},"name":"iter_nodes","qualname":"<StorageProof>::iter_nodes","value":"fn (self) -> StorageProofNodeIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over trie nodes constructed from the proof. The nodes are not guaranteed\n to be traversed in any particular order.\n","sig":null,"attributes":[{"value":"/ Create an iterator over trie nodes constructed from the proof. The nodes are not guaranteed","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42295,"byte_end":42390,"line_start":54,"line_end":54,"column_start":2,"column_end":97}},{"value":"/ to be traversed in any particular order.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42392,"byte_end":42436,"line_start":55,"line_end":55,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42581,"byte_end":42595,"line_start":61,"line_end":61,"column_start":9,"column_end":23},"name":"into_memory_db","qualname":"<StorageProof>::into_memory_db","value":"fn <H> (self) -> crate::MemoryDB<H>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `MemoryDB` from `Self`.\n","sig":null,"attributes":[{"value":"/ Creates a `MemoryDB` from `Self`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42535,"byte_end":42572,"line_start":60,"line_end":60,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42906,"byte_end":42911,"line_start":68,"line_end":68,"column_start":9,"column_end":14},"name":"merge","qualname":"<StorageProof>::merge","value":"fn <I> (proofs: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Merges multiple storage proofs covering potentially different sets of keys into one proof\n covering all keys. The merged proof output may be smaller than the aggregate size of the input\n proofs due to deduplication of trie nodes.\n","sig":null,"attributes":[{"value":"/ Merges multiple storage proofs covering potentially different sets of keys into one proof","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42656,"byte_end":42749,"line_start":65,"line_end":65,"column_start":2,"column_end":95}},{"value":"/ covering all keys. The merged proof output may be smaller than the aggregate size of the input","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42751,"byte_end":42849,"line_start":66,"line_end":66,"column_start":2,"column_end":100}},{"value":"/ proofs due to deduplication of trie nodes.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":42851,"byte_end":42897,"line_start":67,"line_end":67,"column_start":2,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":133},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":43320,"byte_end":43344,"line_start":81,"line_end":81,"column_start":12,"column_end":36},"name":"StorageProofNodeIterator","qualname":"::storage_proof::StorageProofNodeIterator","value":"StorageProofNodeIterator {  }","parent":null,"children":[{"krate":0,"index":134}],"decl_id":null,"docs":" An iterator over trie nodes constructed from a storage proof. The nodes are not guaranteed to\n be traversed in any particular order.\n","sig":null,"attributes":[{"value":"/ An iterator over trie nodes constructed from a storage proof. The nodes are not guaranteed to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":43169,"byte_end":43266,"line_start":79,"line_end":79,"column_start":1,"column_end":98}},{"value":"/ be traversed in any particular order.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":43267,"byte_end":43308,"line_start":80,"line_end":80,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":470},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/trie_stream.rs","byte_start":45044,"byte_end":45054,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"TrieStream","qualname":"::trie_stream::TrieStream","value":"TrieStream {  }","parent":null,"children":[{"krate":0,"index":471}],"decl_id":null,"docs":" Codec-flavored TrieStream.\n","sig":null,"attributes":[{"value":"/ Codec-flavored TrieStream.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/trie_stream.rs","byte_start":45002,"byte_end":45032,"line_start":31,"line_end":31,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/trie_stream.rs","byte_start":45152,"byte_end":45158,"line_start":38,"line_end":38,"column_start":9,"column_end":15},"name":"as_raw","qualname":"<TrieStream>::as_raw","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":476},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1858,"byte_end":1864,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"Layout","qualname":"::Layout","value":"","parent":null,"children":[],"decl_id":null,"docs":" substrate trie layout\n","sig":null,"attributes":[{"value":"/ substrate trie layout","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1821,"byte_end":1846,"line_start":49,"line_end":49,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":226},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":2678,"byte_end":2687,"line_start":81,"line_end":81,"column_start":10,"column_end":19},"name":"TrieError","qualname":"::TrieError","value":"trie_db::TrieError<TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" TrieDB error over `TrieConfiguration` trait.\n","sig":null,"attributes":[{"value":"/ TrieDB error over `TrieConfiguration` trait.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":2620,"byte_end":2668,"line_start":80,"line_end":80,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":228},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":2816,"byte_end":2824,"line_start":83,"line_end":83,"column_start":11,"column_end":19},"name":"AsHashDB","qualname":"::AsHashDB","value":"AsHashDB<H: Hasher>: hash_db::AsHashDB<H, trie_db::DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Reexport from `hash_db`, with genericity set for `Hasher` trait.\n","sig":null,"attributes":[{"value":"/ Reexport from `hash_db`, with genericity set for `Hasher` trait.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":2737,"byte_end":2805,"line_start":82,"line_end":82,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":233},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3037,"byte_end":3043,"line_start":86,"line_end":86,"column_start":10,"column_end":16},"name":"HashDB","qualname":"::HashDB","value":"dyn hash_db::HashDB<H, trie_db::DBValue> + 'a","parent":null,"children":[],"decl_id":null,"docs":" Reexport from `hash_db`, with genericity set for `Hasher` trait.\n","sig":null,"attributes":[{"value":"/ Reexport from `hash_db`, with genericity set for `Hasher` trait.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":2959,"byte_end":3027,"line_start":85,"line_end":85,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":236},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3287,"byte_end":3303,"line_start":90,"line_end":90,"column_start":10,"column_end":26},"name":"PrefixedMemoryDB","qualname":"::PrefixedMemoryDB","value":"memory_db::MemoryDB<H, memory_db::PrefixedKey<H>, trie_db::DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Reexport from `hash_db`, with genericity set for `Hasher` trait.\n This uses a `KeyFunction` for prefixing keys internally (avoiding\n key conflict for non random keys).\n","sig":null,"attributes":[{"value":"/ Reexport from `hash_db`, with genericity set for `Hasher` trait.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3100,"byte_end":3168,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"/ This uses a `KeyFunction` for prefixing keys internally (avoiding","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3169,"byte_end":3238,"line_start":88,"line_end":88,"column_start":1,"column_end":70}},{"value":"/ key conflict for non random keys).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3239,"byte_end":3277,"line_start":89,"line_end":89,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":238},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3581,"byte_end":3589,"line_start":94,"line_end":94,"column_start":10,"column_end":18},"name":"MemoryDB","qualname":"::MemoryDB","value":"memory_db::MemoryDB<H, memory_db::HashKey<H>, trie_db::DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Reexport from `hash_db`, with genericity set for `Hasher` trait.\n This uses a noops `KeyFunction` (key addressing must be hashed or using\n an encoding scheme that avoid key conflict).\n","sig":null,"attributes":[{"value":"/ Reexport from `hash_db`, with genericity set for `Hasher` trait.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3378,"byte_end":3446,"line_start":91,"line_end":91,"column_start":1,"column_end":69}},{"value":"/ This uses a noops `KeyFunction` (key addressing must be hashed or using","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3447,"byte_end":3522,"line_start":92,"line_end":92,"column_start":1,"column_end":76}},{"value":"/ an encoding scheme that avoid key conflict).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3523,"byte_end":3571,"line_start":93,"line_end":93,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":240},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3738,"byte_end":3753,"line_start":96,"line_end":96,"column_start":10,"column_end":25},"name":"GenericMemoryDB","qualname":"::GenericMemoryDB","value":"memory_db::MemoryDB<H, KF, trie_db::DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Reexport from `hash_db`, with genericity set for `Hasher` trait.\n","sig":null,"attributes":[{"value":"/ Reexport from `hash_db`, with genericity set for `Hasher` trait.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3660,"byte_end":3728,"line_start":95,"line_end":95,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":243},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3894,"byte_end":3900,"line_start":99,"line_end":99,"column_start":10,"column_end":16},"name":"TrieDB","qualname":"::TrieDB","value":"trie_db::TrieDB<'a, L>","parent":null,"children":[],"decl_id":null,"docs":" Persistent trie database read-access interface for the a given hasher.\n","sig":null,"attributes":[{"value":"/ Persistent trie database read-access interface for the a given hasher.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3810,"byte_end":3884,"line_start":98,"line_end":98,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":246},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4019,"byte_end":4028,"line_start":101,"line_end":101,"column_start":10,"column_end":19},"name":"TrieDBMut","qualname":"::TrieDBMut","value":"trie_db::TrieDBMut<'a, L>","parent":null,"children":[],"decl_id":null,"docs":" Persistent trie database write-access interface for the a given hasher.\n","sig":null,"attributes":[{"value":"/ Persistent trie database write-access interface for the a given hasher.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":3934,"byte_end":4009,"line_start":100,"line_end":100,"column_start":1,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":249},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4132,"byte_end":4138,"line_start":103,"line_end":103,"column_start":10,"column_end":16},"name":"Lookup","qualname":"::Lookup","value":"trie_db::Lookup<'a, L, Q>","parent":null,"children":[],"decl_id":null,"docs":" Querying interface, as in `trie_db` but less generic.\n","sig":null,"attributes":[{"value":"/ Querying interface, as in `trie_db` but less generic.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4065,"byte_end":4122,"line_start":102,"line_end":102,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":253},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4220,"byte_end":4228,"line_start":105,"line_end":105,"column_start":10,"column_end":18},"name":"TrieHash","qualname":"::TrieHash","value":"<<L as TrieLayout>::Hash as Hasher>::Out","parent":null,"children":[],"decl_id":null,"docs":" Hash type for a trie layout.\n","sig":null,"attributes":[{"value":"/ Hash type for a trie layout.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4178,"byte_end":4210,"line_start":104,"line_end":104,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":255},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4398,"byte_end":4408,"line_start":109,"line_end":109,"column_start":9,"column_end":19},"name":"trie_types","qualname":"::trie_types","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":268}],"decl_id":null,"docs":" This module is for non generic definition of trie type.\n Only the `Hasher` trait is generic in this case.\n","sig":null,"attributes":[{"value":"/ This module is for non generic definition of trie type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4277,"byte_end":4336,"line_start":107,"line_end":107,"column_start":1,"column_end":60}},{"value":"/ Only the `Hasher` trait is generic in this case.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4337,"byte_end":4389,"line_start":108,"line_end":108,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":256},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4421,"byte_end":4427,"line_start":110,"line_end":110,"column_start":11,"column_end":17},"name":"Layout","qualname":"::trie_types::Layout","value":"super::Layout<H>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":258},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4537,"byte_end":4543,"line_start":112,"line_end":112,"column_start":11,"column_end":17},"name":"TrieDB","qualname":"::trie_types::TrieDB","value":"super::TrieDB<'a, Layout<H>>","parent":null,"children":[],"decl_id":null,"docs":" Persistent trie database read-access interface for the a given hasher.\n","sig":null,"attributes":[{"value":"/ Persistent trie database read-access interface for the a given hasher.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4452,"byte_end":4526,"line_start":111,"line_end":111,"column_start":2,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":261},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4670,"byte_end":4679,"line_start":114,"line_end":114,"column_start":11,"column_end":20},"name":"TrieDBMut","qualname":"::trie_types::TrieDBMut","value":"super::TrieDBMut<'a, Layout<H>>","parent":null,"children":[],"decl_id":null,"docs":" Persistent trie database write-access interface for the a given hasher.\n","sig":null,"attributes":[{"value":"/ Persistent trie database write-access interface for the a given hasher.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4584,"byte_end":4659,"line_start":113,"line_end":113,"column_start":2,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":264},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4791,"byte_end":4797,"line_start":116,"line_end":116,"column_start":11,"column_end":17},"name":"Lookup","qualname":"::trie_types::Lookup","value":"trie_db::Lookup<'a, Layout<H>, Q>","parent":null,"children":[],"decl_id":null,"docs":" Querying interface, as in `trie_db` but less generic.\n","sig":null,"attributes":[{"value":"/ Querying interface, as in `trie_db` but less generic.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4723,"byte_end":4780,"line_start":115,"line_end":115,"column_start":2,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":268},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4921,"byte_end":4930,"line_start":118,"line_end":118,"column_start":11,"column_end":20},"name":"TrieError","qualname":"::trie_types::TrieError","value":"trie_db::TrieError<H, super::Error>","parent":null,"children":[],"decl_id":null,"docs":" As in `trie_db`, but less generic, error type for the crate.\n","sig":null,"attributes":[{"value":"/ As in `trie_db`, but less generic, error type for the crate.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4846,"byte_end":4910,"line_start":117,"line_end":117,"column_start":2,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":270},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5372,"byte_end":5391,"line_start":129,"line_end":129,"column_start":8,"column_end":27},"name":"generate_trie_proof","qualname":"::generate_trie_proof","value":"fn <'a, L, I, K, DB> (db: &DB, root: TrieHash<L>, keys: I) -> Result<Vec<Vec<u8>>, Box<TrieError<L>>>","parent":null,"children":[],"decl_id":null,"docs":" Create a proof for a subset of keys in a trie.","sig":null,"attributes":[{"value":"/ Create a proof for a subset of keys in a trie.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":4976,"byte_end":5026,"line_start":121,"line_end":121,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5027,"byte_end":5030,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ The `keys` may contain any set of keys regardless of each one of them is included","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5031,"byte_end":5116,"line_start":123,"line_end":123,"column_start":1,"column_end":86}},{"value":"/ in the `db`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5117,"byte_end":5133,"line_start":124,"line_end":124,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5134,"byte_end":5137,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ For a key `K` that is included in the `db` a proof of inclusion is generated.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5138,"byte_end":5219,"line_start":126,"line_end":126,"column_start":1,"column_end":82}},{"value":"/ For a key `K` that is not included in the `db` a proof of non-inclusion is generated.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5220,"byte_end":5309,"line_start":127,"line_end":127,"column_start":1,"column_end":90}},{"value":"/ These can be later checked in `verify_trie_proof`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5310,"byte_end":5364,"line_start":128,"line_end":128,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":276},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":6141,"byte_end":6158,"line_start":150,"line_end":150,"column_start":8,"column_end":25},"name":"verify_trie_proof","qualname":"::verify_trie_proof","value":"fn <'a, L, I, K, V> (root: &TrieHash<L>, proof: &[Vec<u8>], items: I) -> Result<(), VerifyError<TrieHash<L>, error::Error>>","parent":null,"children":[],"decl_id":null,"docs":" Verify a set of key-value pairs against a trie root and a proof.","sig":null,"attributes":[{"value":"/ Verify a set of key-value pairs against a trie root and a proof.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5700,"byte_end":5768,"line_start":142,"line_end":142,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5769,"byte_end":5772,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ Checks a set of keys with optional values for inclusion in the proof that was generated by","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5773,"byte_end":5867,"line_start":144,"line_end":144,"column_start":1,"column_end":95}},{"value":"/ `generate_trie_proof`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5868,"byte_end":5894,"line_start":145,"line_end":145,"column_start":1,"column_end":27}},{"value":"/ If the value in the pair is supplied (`(key, Some(value))`), this key-value pair will be","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5895,"byte_end":5987,"line_start":146,"line_end":146,"column_start":1,"column_end":93}},{"value":"/ checked for inclusion in the proof.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":5988,"byte_end":6027,"line_start":147,"line_end":147,"column_start":1,"column_end":40}},{"value":"/ If the value is omitted (`(key, None)`), this key will be checked for non-inclusion in the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":6028,"byte_end":6122,"line_start":148,"line_end":148,"column_start":1,"column_end":95}},{"value":"/ proof.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":6123,"byte_end":6133,"line_start":149,"line_end":149,"column_start":1,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":282},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":6530,"byte_end":6545,"line_start":163,"line_end":163,"column_start":8,"column_end":23},"name":"delta_trie_root","qualname":"::delta_trie_root","value":"fn <L, I, A, B, DB, V> (db: &mut DB, mut root: TrieHash<L>, delta: I) -> Result<TrieHash<L>, Box<TrieError<L>>>","parent":null,"children":[],"decl_id":null,"docs":" Determine a trie root given a hash DB and delta values.\n","sig":null,"attributes":[{"value":"/ Determine a trie root given a hash DB and delta values.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":6463,"byte_end":6522,"line_start":162,"line_end":162,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":289},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":7123,"byte_end":7138,"line_start":189,"line_end":189,"column_start":8,"column_end":23},"name":"read_trie_value","qualname":"::read_trie_value","value":"fn <L, DB> (db: &DB, root: &TrieHash<L>, key: &[u8]) -> Result<Option<Vec<u8>>, Box<TrieError<L>>>","parent":null,"children":[],"decl_id":null,"docs":" Read a value from the trie.\n","sig":null,"attributes":[{"value":"/ Read a value from the trie.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":7084,"byte_end":7115,"line_start":188,"line_end":188,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":294},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":7445,"byte_end":7465,"line_start":198,"line_end":198,"column_start":8,"column_end":28},"name":"read_trie_value_with","qualname":"::read_trie_value_with","value":"fn <L, Q, DB> (db: &DB, root: &TrieHash<L>, key: &[u8], query: Q) -> Result<Option<Vec<u8>>, Box<TrieError<L>>>","parent":null,"children":[],"decl_id":null,"docs":" Read a value from the trie with given Query.\n","sig":null,"attributes":[{"value":"/ Read a value from the trie with given Query.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":7389,"byte_end":7437,"line_start":197,"line_end":197,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":300},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":7825,"byte_end":7846,"line_start":212,"line_end":212,"column_start":8,"column_end":29},"name":"empty_child_trie_root","qualname":"::empty_child_trie_root","value":"fn <L> () -> <L::Hash as Hasher>::Out","parent":null,"children":[],"decl_id":null,"docs":" Determine the empty child trie root.\n","sig":null,"attributes":[{"value":"/ Determine the empty child trie root.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":7777,"byte_end":7817,"line_start":211,"line_end":211,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":302},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":8155,"byte_end":8170,"line_start":219,"line_end":219,"column_start":8,"column_end":23},"name":"child_trie_root","qualname":"::child_trie_root","value":"fn <L, I, A, B> (input: I) -> <L::Hash as Hasher>::Out","parent":null,"children":[],"decl_id":null,"docs":" Determine a child trie root given its ordered contents, closed form. H is the default hasher,\n but a generic implementation may ignore this type parameter and use other hashers.\n","sig":null,"attributes":[{"value":"/ Determine a child trie root given its ordered contents, closed form. H is the default hasher,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":7963,"byte_end":8060,"line_start":217,"line_end":217,"column_start":1,"column_end":98}},{"value":"/ but a generic implementation may ignore this type parameter and use other hashers.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":8061,"byte_end":8147,"line_start":218,"line_end":218,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":307},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":8538,"byte_end":8559,"line_start":232,"line_end":232,"column_start":8,"column_end":29},"name":"child_delta_trie_root","qualname":"::child_delta_trie_root","value":"fn <L, I, A, B, DB, RD, V> (keyspace: &[u8], db: &mut DB, root_data: RD, delta: I) -> Result<<L::Hash as Hasher>::Out, Box<TrieError<L>>>","parent":null,"children":[],"decl_id":null,"docs":" Determine a child trie root given a hash DB and delta values. H is the default hasher,\n but a generic implementation may ignore this type parameter and use other hashers.\n","sig":null,"attributes":[{"value":"/ Determine a child trie root given a hash DB and delta values. H is the default hasher,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":8353,"byte_end":8443,"line_start":230,"line_end":230,"column_start":1,"column_end":91}},{"value":"/ but a generic implementation may ignore this type parameter and use other hashers.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":8444,"byte_end":8530,"line_start":231,"line_end":231,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":315},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":9426,"byte_end":9448,"line_start":266,"line_end":266,"column_start":8,"column_end":30},"name":"for_keys_in_child_trie","qualname":"::for_keys_in_child_trie","value":"fn <L, F, DB> (keyspace: &[u8], db: &DB, root_slice: &[u8], mut f: F) -> Result<(), Box<TrieError<L>>>","parent":null,"children":[],"decl_id":null,"docs":" Call `f` for all keys in a child trie.\n","sig":null,"attributes":[{"value":"/ Call `f` for all keys in a child trie.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":9376,"byte_end":9418,"line_start":265,"line_end":265,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":319},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":10033,"byte_end":10048,"line_start":292,"line_end":292,"column_start":8,"column_end":23},"name":"record_all_keys","qualname":"::record_all_keys","value":"fn <L, DB> (db: &DB, root: &TrieHash<L>, recorder: &mut Recorder<TrieHash<L>>) -> Result<(), Box<TrieError<L>>>","parent":null,"children":[],"decl_id":null,"docs":" Record all keys for a given root.\n","sig":null,"attributes":[{"value":"/ Record all keys for a given root.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":9988,"byte_end":10025,"line_start":291,"line_end":291,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":322},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":10574,"byte_end":10595,"line_start":315,"line_end":315,"column_start":8,"column_end":29},"name":"read_child_trie_value","qualname":"::read_child_trie_value","value":"fn <L, DB> (keyspace: &[u8], db: &DB, root_slice: &[u8], key: &[u8]) -> Result<Option<Vec<u8>>, Box<TrieError<L>>>","parent":null,"children":[],"decl_id":null,"docs":" Read a value from the child trie.\n","sig":null,"attributes":[{"value":"/ Read a value from the child trie.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":10529,"byte_end":10566,"line_start":314,"line_end":314,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":327},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":11144,"byte_end":11170,"line_start":333,"line_end":333,"column_start":8,"column_end":34},"name":"read_child_trie_value_with","qualname":"::read_child_trie_value_with","value":"fn <L, Q, DB> (keyspace: &[u8], db: &DB, root_slice: &[u8], key: &[u8], query: Q) -> Result<Option<Vec<u8>>, Box<TrieError<L>>>","parent":null,"children":[],"decl_id":null,"docs":" Read a value from the child trie with given query.\n","sig":null,"attributes":[{"value":"/ Read a value from the child trie with given query.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":11082,"byte_end":11136,"line_start":332,"line_end":332,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":333},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":11849,"byte_end":11860,"line_start":353,"line_end":353,"column_start":12,"column_end":23},"name":"KeySpacedDB","qualname":"::KeySpacedDB","value":"","parent":null,"children":[],"decl_id":null,"docs":" `HashDB` implementation that append a encoded prefix (unique id bytes) in addition to the\n prefix of every key value.\n","sig":null,"attributes":[{"value":"/ `HashDB` implementation that append a encoded prefix (unique id bytes) in addition to the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":11713,"byte_end":11806,"line_start":351,"line_end":351,"column_start":1,"column_end":94}},{"value":"/ prefix of every key value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":11807,"byte_end":11837,"line_start":352,"line_end":352,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":341},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12110,"byte_end":12124,"line_start":359,"line_end":359,"column_start":12,"column_end":26},"name":"KeySpacedDBMut","qualname":"::KeySpacedDBMut","value":"","parent":null,"children":[],"decl_id":null,"docs":" `HashDBMut` implementation that append a encoded prefix (unique id bytes) in addition to the\n prefix of every key value.","sig":null,"attributes":[{"value":"/ `HashDBMut` implementation that append a encoded prefix (unique id bytes) in addition to the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":11908,"byte_end":12004,"line_start":355,"line_end":355,"column_start":1,"column_end":97}},{"value":"/ prefix of every key value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12005,"byte_end":12035,"line_start":356,"line_end":356,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12036,"byte_end":12039,"line_start":357,"line_end":357,"column_start":1,"column_end":4}},{"value":"/ Mutable variant of `KeySpacedDB`, see [`KeySpacedDB`].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12040,"byte_end":12098,"line_start":358,"line_end":358,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12661,"byte_end":12664,"line_start":374,"line_end":374,"column_start":9,"column_end":12},"name":"new","qualname":"<KeySpacedDB>::new","value":"fn (db: &'a DB, ks: &'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" instantiate new keyspaced db\n","sig":null,"attributes":[{"value":"/ instantiate new keyspaced db","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12620,"byte_end":12652,"line_start":373,"line_end":373,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12846,"byte_end":12849,"line_start":383,"line_end":383,"column_start":9,"column_end":12},"name":"new","qualname":"<KeySpacedDBMut>::new","value":"fn (db: &'a mut DB, ks: &'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" instantiate new keyspaced db\n","sig":null,"attributes":[{"value":"/ instantiate new keyspaced db","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12805,"byte_end":12837,"line_start":382,"line_end":382,"column_start":2,"column_end":34}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":26805,"byte_end":26810,"line_start":23,"line_end":23,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":7}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":26914,"byte_end":26919,"line_start":30,"line_end":30,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":9}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":27108,"byte_end":27113,"line_start":40,"line_end":40,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":11}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","byte_start":28423,"byte_end":28433,"line_start":39,"line_end":39,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","byte_start":28993,"byte_end":29003,"line_start":53,"line_end":53,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","byte_start":29024,"byte_end":29034,"line_start":55,"line_end":55,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","byte_start":32546,"byte_end":32560,"line_start":39,"line_end":39,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","byte_start":32923,"byte_end":32937,"line_start":58,"line_end":58,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","byte_start":33722,"byte_end":33731,"line_start":89,"line_end":89,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","byte_start":39860,"byte_end":39866,"line_start":273,"line_end":273,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41748,"byte_end":41760,"line_start":33,"line_end":33,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":43405,"byte_end":43429,"line_start":85,"line_end":85,"column_start":6,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":43568,"byte_end":43592,"line_start":93,"line_end":93,"column_start":19,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":43734,"byte_end":43742,"line_start":101,"line_end":101,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/trie_stream.rs","byte_start":45083,"byte_end":45093,"line_start":36,"line_end":36,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/trie_stream.rs","byte_start":46200,"byte_end":46210,"line_start":67,"line_end":67,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1933,"byte_end":1939,"line_start":52,"line_end":52,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":2075,"byte_end":2081,"line_start":58,"line_end":58,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":2954,"byte_end":2955,"line_start":84,"line_end":84,"column_start":76,"column_end":77},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12576,"byte_end":12587,"line_start":370,"line_end":370,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12758,"byte_end":12772,"line_start":379,"line_end":379,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12982,"byte_end":12993,"line_start":388,"line_end":388,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":13505,"byte_end":13519,"line_start":404,"line_end":404,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":14659,"byte_end":14673,"line_start":435,"line_end":435,"column_start":48,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":26805,"byte_end":26810,"line_start":23,"line_end":23,"column_start":29,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":393},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":26914,"byte_end":26919,"line_start":30,"line_end":30,"column_start":19,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":393},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/error.rs","byte_start":27108,"byte_end":27113,"line_start":40,"line_end":40,"column_start":23,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":393},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","byte_start":28423,"byte_end":28433,"line_start":39,"line_end":39,"column_start":17,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":410},"to":{"krate":15,"index":107}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","byte_start":28993,"byte_end":29003,"line_start":53,"line_end":53,"column_start":28,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":410},"to":{"krate":15,"index":657}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_header.rs","byte_start":29024,"byte_end":29034,"line_start":55,"line_end":55,"column_start":17,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":410},"to":{"krate":15,"index":119}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","byte_start":32546,"byte_end":32560,"line_start":39,"line_end":39,"column_start":10,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":68},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","byte_start":32923,"byte_end":32937,"line_start":58,"line_end":58,"column_start":20,"column_end":34},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":68},"to":{"krate":15,"index":54}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","byte_start":33722,"byte_end":33731,"line_start":89,"line_end":89,"column_start":32,"column_end":41},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":432},"to":{"krate":23,"index":1117}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/node_codec.rs","byte_start":39860,"byte_end":39866,"line_start":273,"line_end":273,"column_start":6,"column_end":12},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":41748,"byte_end":41760,"line_start":33,"line_end":33,"column_start":6,"column_end":18},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":43405,"byte_end":43429,"line_start":85,"line_end":85,"column_start":6,"column_end":30},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":43568,"byte_end":43592,"line_start":93,"line_end":93,"column_start":19,"column_end":43},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":133},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/storage_proof.rs","byte_start":43734,"byte_end":43742,"line_start":101,"line_end":101,"column_start":47,"column_end":55},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/trie_stream.rs","byte_start":45083,"byte_end":45093,"line_start":36,"line_end":36,"column_start":6,"column_end":16},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":470},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/trie_stream.rs","byte_start":46200,"byte_end":46210,"line_start":67,"line_end":67,"column_start":32,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":470},"to":{"krate":33,"index":11}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":1933,"byte_end":1939,"line_start":52,"line_end":52,"column_start":32,"column_end":38},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":476},"to":{"krate":23,"index":1352}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":2075,"byte_end":2081,"line_start":58,"line_end":58,"column_start":39,"column_end":45},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":476},"to":{"krate":23,"index":1356}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":2846,"byte_end":2854,"line_start":83,"line_end":83,"column_start":41,"column_end":49},"kind":"SuperTrait","from":{"krate":22,"index":65},"to":{"krate":0,"index":228}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":2954,"byte_end":2955,"line_start":84,"line_end":84,"column_start":76,"column_end":77},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":232},"to":{"krate":0,"index":228}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12576,"byte_end":12587,"line_start":370,"line_end":370,"column_start":17,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12758,"byte_end":12772,"line_start":379,"line_end":379,"column_start":17,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":341},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":12982,"byte_end":12993,"line_start":388,"line_end":388,"column_start":49,"column_end":60},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":333},"to":{"krate":22,"index":48}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":13505,"byte_end":13519,"line_start":404,"line_end":404,"column_start":46,"column_end":60},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":341},"to":{"krate":22,"index":40}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/trie/src/lib.rs","byte_start":14659,"byte_end":14673,"line_start":435,"line_end":435,"column_start":48,"column_end":62},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":341},"to":{"krate":22,"index":65}}]}