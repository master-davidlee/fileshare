{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface","program":"/home/ipfs/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","sp_wasm_interface","--edition=2018","/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"std\"","--cfg","feature=\"wasmi\"","-C","metadata=e694a1ef0fe90671","-C","extra-filename=-e694a1ef0fe90671","--out-dir","/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps","-L","dependency=/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps","--extern","impl_trait_for_tuples=/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps/libimpl_trait_for_tuples-d3ed7ab712078c16.so","--extern","codec=/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps/libparity_scale_codec-f846fd866e90eb5c.rmeta","--extern","sp_std=/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps/libsp_std-31df6ce51c93d927.rmeta","--extern","wasmi=/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps/libwasmi-92898648702d93c0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/ipfs/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps/libsp_wasm_interface-e694a1ef0fe90671.rmeta"},"prelude":{"crate_id":{"name":"sp_wasm_interface","disambiguator":[8675793106772160261,13785408035542529938]},"crate_root":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src","external_crates":[{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":15,"id":{"name":"sp_std","disambiguator":[11276958021017479825,16325732417868216137]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":16,"id":{"name":"parity_scale_codec","disambiguator":[15638882894901664300,15938776292720705477]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":17,"id":{"name":"parity_scale_codec_derive","disambiguator":[379814399442547304,17581532101419470896]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":18,"id":{"name":"arrayvec","disambiguator":[1332372460335241694,11021197825096612758]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":19,"id":{"name":"byte_slice_cast","disambiguator":[3640415380441394815,6311138287404375443]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":20,"id":{"name":"serde","disambiguator":[13481768320746797087,7282555180186658229]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":21,"id":{"name":"serde_derive","disambiguator":[14214070500933581380,3624999802238555216]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","num":22,"id":{"name":"impl_trait_for_tuples","disambiguator":[11683877044574956040,7740304785833687617]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","num":23,"id":{"name":"wasmi","disambiguator":[2416228699110756094,1766770583142414386]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","num":24,"id":{"name":"memory_units","disambiguator":[14678550925423856477,13054517670253120849]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","num":25,"id":{"name":"parity_wasm","disambiguator":[1554235133951985503,17351528177382477681]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","num":26,"id":{"name":"wasmi_validation","disambiguator":[16639948640573147516,6276059922634634811]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","num":27,"id":{"name":"num_rational","disambiguator":[6975831310803048684,9911959382833982500]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","num":28,"id":{"name":"num_bigint","disambiguator":[12568277182492191496,17615354144430726922]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","num":29,"id":{"name":"num_integer","disambiguator":[6615314100295200538,6263506198981215227]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","num":30,"id":{"name":"num_traits","disambiguator":[17866579788280904889,8893385662677143502]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","num":31,"id":{"name":"libc","disambiguator":[15850054303935087509,2172107276946414463]}}],"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":686,"byte_end":13690,"line_start":18,"line_end":509,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":686,"byte_end":13690,"line_start":18,"line_end":509,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":10},{"krate":0,"index":28},{"krate":0,"index":138},{"krate":0,"index":157},{"krate":0,"index":155},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":150},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":158},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":185},{"krate":0,"index":183},{"krate":0,"index":182},{"krate":0,"index":176},{"krate":0,"index":171},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":191},{"krate":0,"index":211},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":197},{"krate":0,"index":195},{"krate":0,"index":50},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":214},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":219},{"krate":0,"index":217},{"krate":0,"index":79},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":110},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":242},{"krate":0,"index":248},{"krate":0,"index":255},{"krate":0,"index":263},{"krate":0,"index":272},{"krate":0,"index":282},{"krate":0,"index":293},{"krate":0,"index":305},{"krate":0,"index":318},{"krate":0,"index":332},{"krate":0,"index":347},{"krate":0,"index":363},{"krate":0,"index":380},{"krate":0,"index":398},{"krate":0,"index":417},{"krate":0,"index":437},{"krate":0,"index":458},{"krate":0,"index":480},{"krate":0,"index":503},{"krate":0,"index":527},{"krate":0,"index":552},{"krate":0,"index":578},{"krate":0,"index":605},{"krate":0,"index":633},{"krate":0,"index":662},{"krate":0,"index":692},{"krate":0,"index":723},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":795},{"krate":0,"index":819},{"krate":0,"index":818},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":808},{"krate":0,"index":803},{"krate":0,"index":801},{"krate":0,"index":134},{"krate":0,"index":136}],"decl_id":null,"docs":" Types and traits for interfacing between the host and the wasm runtime.\n","sig":null,"attributes":[{"value":"! Types and traits for interfacing between the host and the wasm runtime.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":686,"byte_end":761,"line_start":18,"line_end":18,"column_start":1,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":28},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1019,"byte_end":1025,"line_start":31,"line_end":31,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"result::Result<T, String>","parent":null,"children":[],"decl_id":null,"docs":" Result type used by traits in this crate.\n","sig":null,"attributes":[{"value":"/ Result type used by traits in this crate.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":940,"byte_end":985,"line_start":29,"line_end":29,"column_start":1,"column_end":46}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":986,"byte_end":1009,"line_start":30,"line_end":30,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":139},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1309,"byte_end":1312,"line_start":39,"line_end":39,"column_start":2,"column_end":5},"name":"I32","qualname":"::ValueType::I32","value":"ValueType::I32","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" An `i32` value type.\n","sig":null,"attributes":[{"value":"/ An `i32` value type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1283,"byte_end":1307,"line_start":38,"line_end":38,"column_start":2,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":141},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1341,"byte_end":1344,"line_start":41,"line_end":41,"column_start":2,"column_end":5},"name":"I64","qualname":"::ValueType::I64","value":"ValueType::I64","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" An `i64` value type.\n","sig":null,"attributes":[{"value":"/ An `i64` value type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1315,"byte_end":1339,"line_start":40,"line_end":40,"column_start":2,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":143},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1373,"byte_end":1376,"line_start":43,"line_end":43,"column_start":2,"column_end":5},"name":"F32","qualname":"::ValueType::F32","value":"ValueType::F32","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" An `f32` value type.\n","sig":null,"attributes":[{"value":"/ An `f32` value type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1347,"byte_end":1371,"line_start":42,"line_end":42,"column_start":2,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":145},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1405,"byte_end":1408,"line_start":45,"line_end":45,"column_start":2,"column_end":5},"name":"F64","qualname":"::ValueType::F64","value":"ValueType::F64","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" An `f64` value type.\n","sig":null,"attributes":[{"value":"/ An `f64` value type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1379,"byte_end":1403,"line_start":44,"line_end":44,"column_start":2,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":138},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1270,"byte_end":1279,"line_start":37,"line_end":37,"column_start":10,"column_end":19},"name":"ValueType","qualname":"::ValueType","value":"ValueType::{I32, I64, F32, F64}","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":145}],"decl_id":null,"docs":" Value types supported by Substrate on the boundary between host/Wasm.\n","sig":null,"attributes":[{"value":"/ Value types supported by Substrate on the boundary between host/Wasm.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1142,"byte_end":1215,"line_start":35,"line_end":35,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":159},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2044,"byte_end":2047,"line_start":77,"line_end":77,"column_start":2,"column_end":5},"name":"I32","qualname":"::Value::I32","value":"Value::I32(i32)","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" A 32-bit integer.\n","sig":null,"attributes":[{"value":"/ A 32-bit integer.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2021,"byte_end":2042,"line_start":76,"line_end":76,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":162},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2078,"byte_end":2081,"line_start":79,"line_end":79,"column_start":2,"column_end":5},"name":"I64","qualname":"::Value::I64","value":"Value::I64(i64)","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" A 64-bit integer.\n","sig":null,"attributes":[{"value":"/ A 64-bit integer.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2055,"byte_end":2076,"line_start":78,"line_end":78,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":165},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2217,"byte_end":2220,"line_start":83,"line_end":83,"column_start":2,"column_end":5},"name":"F32","qualname":"::Value::F32","value":"Value::F32(u32)","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" A 32-bit floating-point number stored as raw bit pattern.","sig":null,"attributes":[{"value":"/ A 32-bit floating-point number stored as raw bit pattern.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2089,"byte_end":2150,"line_start":80,"line_end":80,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2152,"byte_end":2155,"line_start":81,"line_end":81,"column_start":2,"column_end":5}},{"value":"/ You can materialize this value using `f32::from_bits`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2157,"byte_end":2215,"line_start":82,"line_end":82,"column_start":2,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":168},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2356,"byte_end":2359,"line_start":87,"line_end":87,"column_start":2,"column_end":5},"name":"F64","qualname":"::Value::F64","value":"Value::F64(u64)","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" A 64-bit floating-point number stored as raw bit pattern.","sig":null,"attributes":[{"value":"/ A 64-bit floating-point number stored as raw bit pattern.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2228,"byte_end":2289,"line_start":84,"line_end":84,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2291,"byte_end":2294,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ You can materialize this value using `f64::from_bits`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2296,"byte_end":2354,"line_start":86,"line_end":86,"column_start":2,"column_end":60}}]},{"kind":"Enum","id":{"krate":0,"index":158},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2012,"byte_end":2017,"line_start":75,"line_end":75,"column_start":10,"column_end":15},"name":"Value","qualname":"::Value","value":"Value::{I32, I64, F32, F64}","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":168}],"decl_id":null,"docs":" Values supported by Substrate on the boundary between host/Wasm.\n","sig":null,"attributes":[{"value":"/ Values supported by Substrate on the boundary between host/Wasm.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1863,"byte_end":1931,"line_start":73,"line_end":73,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2427,"byte_end":2437,"line_start":92,"line_end":92,"column_start":9,"column_end":19},"name":"value_type","qualname":"<Value>::value_type","value":"fn (&self) -> ValueType","parent":null,"children":[],"decl_id":null,"docs":" Returns the type of this value.\n","sig":null,"attributes":[{"value":"/ Returns the type of this value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2383,"byte_end":2418,"line_start":91,"line_end":91,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2664,"byte_end":2670,"line_start":102,"line_end":102,"column_start":9,"column_end":15},"name":"as_i32","qualname":"<Value>::as_i32","value":"fn (&self) -> Option<i32>","parent":null,"children":[],"decl_id":null,"docs":" Return `Self` as `i32`.\n","sig":null,"attributes":[{"value":"/ Return `Self` as `i32`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2628,"byte_end":2655,"line_start":101,"line_end":101,"column_start":2,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":39},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2887,"byte_end":2893,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3091,"byte_end":3102,"line_start":123,"line_end":123,"column_start":11,"column_end":22},"name":"PointerType","qualname":"::PointerType","value":"PointerType: Sized + private::Sealed","parent":null,"children":[{"krate":0,"index":45}],"decl_id":null,"docs":" Something that can be wrapped in a wasm `Pointer`.","sig":null,"attributes":[{"value":"/ Something that can be wrapped in a wasm `Pointer`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2996,"byte_end":3050,"line_start":120,"line_end":120,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3051,"byte_end":3054,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3055,"byte_end":3080,"line_start":122,"line_end":122,"column_start":1,"column_end":26}}]},{"kind":"Const","id":{"krate":0,"index":45},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3172,"byte_end":3176,"line_start":125,"line_end":125,"column_start":8,"column_end":12},"name":"SIZE","qualname":"::PointerType::SIZE","value":"u32","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" The size of the type in wasm.\n","sig":null,"attributes":[{"value":"/ The size of the type in wasm.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3131,"byte_end":3164,"line_start":124,"line_end":124,"column_start":2,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":191},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3439,"byte_end":3446,"line_start":135,"line_end":135,"column_start":12,"column_end":19},"name":"Pointer","qualname":"::Pointer","value":"Pointer {  }","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"decl_id":null,"docs":" Type to represent a pointer in wasm at the host.\n","sig":null,"attributes":[{"value":"/ Type to represent a pointer in wasm at the host.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3330,"byte_end":3382,"line_start":133,"line_end":133,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3585,"byte_end":3588,"line_start":142,"line_end":142,"column_start":9,"column_end":12},"name":"new","qualname":"<Pointer<T>>::new","value":"fn (ptr: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `Self`.\n","sig":null,"attributes":[{"value":"/ Create a new instance of `Self`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3540,"byte_end":3576,"line_start":141,"line_end":141,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3907,"byte_end":3913,"line_start":154,"line_end":154,"column_start":9,"column_end":15},"name":"offset","qualname":"<Pointer<T>>::offset","value":"fn (self, offset: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Calculate the offset from this pointer.","sig":null,"attributes":[{"value":"/ Calculate the offset from this pointer.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3667,"byte_end":3710,"line_start":149,"line_end":149,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3712,"byte_end":3715,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ `offset` is in units of `T`. So, `3` means `3 * mem::size_of::<T>()` as offset to the pointer.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3717,"byte_end":3815,"line_start":151,"line_end":151,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3817,"byte_end":3820,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ Returns an `Option` to respect that the pointer could probably overflow.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3822,"byte_end":3898,"line_start":153,"line_end":153,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":4133,"byte_end":4137,"line_start":164,"line_end":164,"column_start":9,"column_end":13},"name":"null","qualname":"<Pointer<T>>::null","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a null pointer.\n","sig":null,"attributes":[{"value":"/ Create a null pointer.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":4098,"byte_end":4124,"line_start":163,"line_end":163,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":4238,"byte_end":4242,"line_start":169,"line_end":169,"column_start":9,"column_end":13},"name":"cast","qualname":"<Pointer<T>>::cast","value":"fn <R> (self) -> Pointer<R>","parent":null,"children":[],"decl_id":null,"docs":" Cast this pointer of type `T` to a pointer of type `R`.\n","sig":null,"attributes":[{"value":"/ Cast this pointer of type `T` to a pointer of type `R`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":4170,"byte_end":4229,"line_start":168,"line_end":168,"column_start":2,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":78},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5154,"byte_end":5162,"line_start":213,"line_end":213,"column_start":10,"column_end":18},"name":"WordSize","qualname":"::WordSize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The word size used in wasm. Normally known as `usize` in Rust.\n","sig":null,"attributes":[{"value":"/ The word size used in wasm. Normally known as `usize` in Rust.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5078,"byte_end":5144,"line_start":212,"line_end":212,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":214},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5253,"byte_end":5262,"line_start":217,"line_end":217,"column_start":12,"column_end":21},"name":"Signature","qualname":"::Signature","value":"Signature { args, return_value }","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216}],"decl_id":null,"docs":" The Signature of a function\n","sig":null,"attributes":[{"value":"/ The Signature of a function","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5171,"byte_end":5202,"line_start":215,"line_end":215,"column_start":1,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":215},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5304,"byte_end":5308,"line_start":219,"line_end":219,"column_start":6,"column_end":10},"name":"args","qualname":"::Signature::args","value":"std::borrow::Cow<'static, [ValueType]>","parent":{"krate":0,"index":214},"children":[],"decl_id":null,"docs":" The arguments of a function.\n","sig":null,"attributes":[{"value":"/ The arguments of a function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5266,"byte_end":5298,"line_start":218,"line_end":218,"column_start":2,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":216},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5388,"byte_end":5400,"line_start":221,"line_end":221,"column_start":6,"column_end":18},"name":"return_value","qualname":"::Signature::return_value","value":"std::option::Option<ValueType>","parent":{"krate":0,"index":214},"children":[],"decl_id":null,"docs":" The optional return value of a function.\n","sig":null,"attributes":[{"value":"/ The optional return value of a function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5338,"byte_end":5382,"line_start":220,"line_end":220,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5492,"byte_end":5495,"line_start":226,"line_end":226,"column_start":9,"column_end":12},"name":"new","qualname":"<Signature>::new","value":"fn <T> (args: T, return_value: Option<ValueType>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `Signature`.\n","sig":null,"attributes":[{"value":"/ Create a new instance of `Signature`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5442,"byte_end":5483,"line_start":225,"line_end":225,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5742,"byte_end":5755,"line_start":234,"line_end":234,"column_start":9,"column_end":22},"name":"new_with_args","qualname":"<Signature>::new_with_args","value":"fn <T> (args: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `Signature` with the given `args` and without any return value.\n","sig":null,"attributes":[{"value":"/ Create a new instance of `Signature` with the given `args` and without any return value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5641,"byte_end":5733,"line_start":233,"line_end":233,"column_start":2,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":84},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5973,"byte_end":5991,"line_start":244,"line_end":244,"column_start":11,"column_end":29},"name":"MaybeRefUnwindSafe","qualname":"::MaybeRefUnwindSafe","value":"MaybeRefUnwindSafe: std::panic::RefUnwindSafe","parent":null,"children":[],"decl_id":null,"docs":" A trait that requires `RefUnwindSafe` when `feature = std`.\n","sig":null,"attributes":[{"value":"/ A trait that requires `RefUnwindSafe` when `feature = std`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5875,"byte_end":5938,"line_start":242,"line_end":242,"column_start":1,"column_end":64}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5939,"byte_end":5962,"line_start":243,"line_end":243,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":87},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6398,"byte_end":6406,"line_start":255,"line_end":255,"column_start":11,"column_end":19},"name":"Function","qualname":"::Function","value":"Function: MaybeRefUnwindSafe + Send + Sync","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"decl_id":null,"docs":" Something that provides a function implementation on the host for a wasm function.\n","sig":null,"attributes":[{"value":"/ Something that provides a function implementation on the host for a wasm function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6301,"byte_end":6387,"line_start":254,"line_end":254,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6487,"byte_end":6491,"line_start":257,"line_end":257,"column_start":5,"column_end":9},"name":"name","qualname":"::Function::name","value":"fn (&self) -> &str","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Returns the name of this function.\n","sig":null,"attributes":[{"value":"/ Returns the name of this function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6444,"byte_end":6482,"line_start":256,"line_end":256,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6557,"byte_end":6566,"line_start":259,"line_end":259,"column_start":5,"column_end":14},"name":"signature","qualname":"::Function::signature","value":"fn (&self) -> Signature","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Returns the signature of this function.\n","sig":null,"attributes":[{"value":"/ Returns the signature of this function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6509,"byte_end":6552,"line_start":258,"line_end":258,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6645,"byte_end":6652,"line_start":261,"line_end":261,"column_start":5,"column_end":12},"name":"execute","qualname":"::Function::execute","value":"fn (&self, context: &mut dyn FunctionContext, args: &mut dyn Iterator<Item = Value>) -> Result<Option<Value>>","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":" Execute this function with the given arguments.\n","sig":null,"attributes":[{"value":"/ Execute this function with the given arguments.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6589,"byte_end":6640,"line_start":260,"line_end":260,"column_start":2,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":93},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7031,"byte_end":7046,"line_start":275,"line_end":275,"column_start":11,"column_end":26},"name":"FunctionContext","qualname":"::FunctionContext","value":"FunctionContext","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99}],"decl_id":null,"docs":" Context used by `Function` to interact with the allocator and the memory of the wasm instance.\n","sig":null,"attributes":[{"value":"/ Context used by `Function` to interact with the allocator and the memory of the wasm instance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6922,"byte_end":7020,"line_start":274,"line_end":274,"column_start":1,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7100,"byte_end":7111,"line_start":277,"line_end":277,"column_start":5,"column_end":16},"name":"read_memory","qualname":"::FunctionContext::read_memory","value":"fn (&self, address: Pointer<u8>, size: WordSize) -> Result<Vec<u8>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Read memory from `address` into a vector.\n","sig":null,"attributes":[{"value":"/ Read memory from `address` into a vector.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7050,"byte_end":7095,"line_start":276,"line_end":276,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7385,"byte_end":7401,"line_start":284,"line_end":284,"column_start":5,"column_end":21},"name":"read_memory_into","qualname":"::FunctionContext::read_memory_into","value":"fn (&self, address: Pointer<u8>, dest: &mut [u8]) -> Result<()>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Read memory into the given `dest` buffer from `address`.\n","sig":null,"attributes":[{"value":"/ Read memory into the given `dest` buffer from `address`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7320,"byte_end":7380,"line_start":283,"line_end":283,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7523,"byte_end":7535,"line_start":286,"line_end":286,"column_start":5,"column_end":17},"name":"write_memory","qualname":"::FunctionContext::write_memory","value":"fn (&mut self, address: Pointer<u8>, data: &[u8]) -> Result<()>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Write the given data at `address` into the memory.\n","sig":null,"attributes":[{"value":"/ Write the given data at `address` into the memory.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7464,"byte_end":7518,"line_start":285,"line_end":285,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7650,"byte_end":7665,"line_start":288,"line_end":288,"column_start":5,"column_end":20},"name":"allocate_memory","qualname":"::FunctionContext::allocate_memory","value":"fn (&mut self, size: WordSize) -> Result<Pointer<u8>>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Allocate a memory instance of `size` bytes.\n","sig":null,"attributes":[{"value":"/ Allocate a memory instance of `size` bytes.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7598,"byte_end":7645,"line_start":287,"line_end":287,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7762,"byte_end":7779,"line_start":290,"line_end":290,"column_start":5,"column_end":22},"name":"deallocate_memory","qualname":"::FunctionContext::deallocate_memory","value":"fn (&mut self, ptr: Pointer<u8>) -> Result<()>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Deallocate a given memory instance.\n","sig":null,"attributes":[{"value":"/ Deallocate a given memory instance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7718,"byte_end":7757,"line_start":289,"line_end":289,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7865,"byte_end":7872,"line_start":292,"line_end":292,"column_start":5,"column_end":12},"name":"sandbox","qualname":"::FunctionContext::sandbox","value":"fn (&mut self) -> &mut dyn Sandbox","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Provides access to the sandbox.\n","sig":null,"attributes":[{"value":"/ Provides access to the sandbox.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7825,"byte_end":7860,"line_start":291,"line_end":291,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":100},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7948,"byte_end":7956,"line_start":296,"line_end":296,"column_start":10,"column_end":18},"name":"MemoryId","qualname":"::MemoryId","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Sandbox memory identifier.\n","sig":null,"attributes":[{"value":"/ Sandbox memory identifier.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7908,"byte_end":7938,"line_start":295,"line_end":295,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":101},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8026,"byte_end":8033,"line_start":299,"line_end":299,"column_start":11,"column_end":18},"name":"Sandbox","qualname":"::Sandbox","value":"Sandbox","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"decl_id":null,"docs":" Something that provides access to the sandbox.\n","sig":null,"attributes":[{"value":"/ Something that provides access to the sandbox.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":7965,"byte_end":8015,"line_start":298,"line_end":298,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8129,"byte_end":8139,"line_start":301,"line_end":301,"column_start":5,"column_end":15},"name":"memory_get","qualname":"::Sandbox::memory_get","value":"fn (&mut self, memory_id: MemoryId, offset: WordSize, buf_ptr: Pointer<u8>, buf_len: WordSize) -> Result<u32>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Get sandbox memory from the `memory_id` instance at `offset` into the given buffer.\n","sig":null,"attributes":[{"value":"/ Get sandbox memory from the `memory_id` instance at `offset` into the given buffer.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8037,"byte_end":8124,"line_start":300,"line_end":300,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8311,"byte_end":8321,"line_start":309,"line_end":309,"column_start":5,"column_end":15},"name":"memory_set","qualname":"::Sandbox::memory_set","value":"fn (&mut self, memory_id: MemoryId, offset: WordSize, val_ptr: Pointer<u8>, val_len: WordSize) -> Result<u32>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Set sandbox memory from the given value.\n","sig":null,"attributes":[{"value":"/ Set sandbox memory from the given value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8262,"byte_end":8306,"line_start":308,"line_end":308,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8478,"byte_end":8493,"line_start":317,"line_end":317,"column_start":5,"column_end":20},"name":"memory_teardown","qualname":"::Sandbox::memory_teardown","value":"fn (&mut self, memory_id: MemoryId) -> Result<()>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Delete a memory instance.\n","sig":null,"attributes":[{"value":"/ Delete a memory instance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8444,"byte_end":8473,"line_start":316,"line_end":316,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8671,"byte_end":8681,"line_start":320,"line_end":320,"column_start":5,"column_end":15},"name":"memory_new","qualname":"::Sandbox::memory_new","value":"fn (&mut self, initial: u32, maximum: u32) -> Result<MemoryId>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Create a new memory instance with the given `initial` size and the `maximum` size.\n The size is given in wasm pages.\n","sig":null,"attributes":[{"value":"/ Create a new memory instance with the given `initial` size and the `maximum` size.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8542,"byte_end":8628,"line_start":318,"line_end":318,"column_start":2,"column_end":88}},{"value":"/ The size is given in wasm pages.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8630,"byte_end":8666,"line_start":319,"line_end":319,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8790,"byte_end":8796,"line_start":322,"line_end":322,"column_start":5,"column_end":11},"name":"invoke","qualname":"::Sandbox::invoke","value":"fn (&mut self, instance_id: u32, export_name: &str, args: &[u8], return_val: Pointer<u8>, return_val_len: WordSize, state: u32) -> Result<u32>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Invoke an exported function by a name.\n","sig":null,"attributes":[{"value":"/ Invoke an exported function by a name.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8743,"byte_end":8785,"line_start":321,"line_end":321,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8991,"byte_end":9008,"line_start":332,"line_end":332,"column_start":5,"column_end":22},"name":"instance_teardown","qualname":"::Sandbox::instance_teardown","value":"fn (&mut self, instance_id: u32) -> Result<()>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Delete a sandbox instance.\n","sig":null,"attributes":[{"value":"/ Delete a sandbox instance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":8956,"byte_end":8986,"line_start":331,"line_end":331,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9093,"byte_end":9105,"line_start":334,"line_end":334,"column_start":5,"column_end":17},"name":"instance_new","qualname":"::Sandbox::instance_new","value":"fn (&mut self, dispatch_thunk_id: u32, wasm: &[u8], raw_env_def: &[u8], state: u32) -> Result<u32>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Create a new sandbox instance.\n","sig":null,"attributes":[{"value":"/ Create a new sandbox instance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9054,"byte_end":9088,"line_start":333,"line_end":333,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9425,"byte_end":9439,"line_start":346,"line_end":346,"column_start":5,"column_end":19},"name":"get_global_val","qualname":"::Sandbox::get_global_val","value":"fn (&self, instance_idx: u32, name: &str) -> Result<Option<Value>>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Get the value from a global with the given `name`. The sandbox is determined by the\n given `instance_idx` instance.","sig":null,"attributes":[{"value":"/ Get the value from a global with the given `name`. The sandbox is determined by the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9218,"byte_end":9305,"line_start":342,"line_end":342,"column_start":2,"column_end":89}},{"value":"/ given `instance_idx` instance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9307,"byte_end":9341,"line_start":343,"line_end":343,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9343,"byte_end":9346,"line_start":344,"line_end":344,"column_start":2,"column_end":5}},{"value":"/ Returns `Some(_)` when the requested global variable could be found.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9348,"byte_end":9420,"line_start":345,"line_end":345,"column_start":2,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":110},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9581,"byte_end":9594,"line_start":350,"line_end":350,"column_start":11,"column_end":24},"name":"HostFunctions","qualname":"::HostFunctions","value":"HostFunctions: 'static","parent":null,"children":[{"krate":0,"index":111}],"decl_id":null,"docs":" Something that provides implementations for host functions.\n","sig":null,"attributes":[{"value":"/ Something that provides implementations for host functions.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9507,"byte_end":9570,"line_start":349,"line_end":349,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9659,"byte_end":9673,"line_start":352,"line_end":352,"column_start":5,"column_end":19},"name":"host_functions","qualname":"::HostFunctions::host_functions","value":"fn () -> Vec<&'static dyn Function>","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" Returns the host functions `Self` provides.\n","sig":null,"attributes":[{"value":"/ Returns the host functions `Self` provides.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9607,"byte_end":9654,"line_start":351,"line_end":351,"column_start":2,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":112},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":10054,"byte_end":10063,"line_start":367,"line_end":367,"column_start":11,"column_end":20},"name":"IntoValue","qualname":"::IntoValue","value":"IntoValue","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114}],"decl_id":null,"docs":" Something that can be converted into a wasm compatible `Value`.\n","sig":null,"attributes":[{"value":"/ Something that can be converted into a wasm compatible `Value`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":9976,"byte_end":10043,"line_start":366,"line_end":366,"column_start":1,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":113},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":10109,"byte_end":10119,"line_start":369,"line_end":369,"column_start":8,"column_end":18},"name":"VALUE_TYPE","qualname":"::IntoValue::VALUE_TYPE","value":"ValueType","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":" The type of the value in wasm.\n","sig":null,"attributes":[{"value":"/ The type of the value in wasm.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":10067,"byte_end":10101,"line_start":368,"line_end":368,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":10178,"byte_end":10188,"line_start":372,"line_end":372,"column_start":5,"column_end":15},"name":"into_value","qualname":"::IntoValue::into_value","value":"fn (self) -> Value","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":" Convert `self` into a wasm `Value`.\n","sig":null,"attributes":[{"value":"/ Convert `self` into a wasm `Value`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":10134,"byte_end":10173,"line_start":371,"line_end":371,"column_start":2,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":115},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":10277,"byte_end":10289,"line_start":376,"line_end":376,"column_start":11,"column_end":23},"name":"TryFromValue","qualname":"::TryFromValue","value":"TryFromValue: Sized","parent":null,"children":[{"krate":0,"index":116}],"decl_id":null,"docs":" Something that can may be created from a wasm `Value`.\n","sig":null,"attributes":[{"value":"/ Something that can may be created from a wasm `Value`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":10208,"byte_end":10266,"line_start":375,"line_end":375,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":10354,"byte_end":10368,"line_start":378,"line_end":378,"column_start":5,"column_end":19},"name":"try_from_value","qualname":"::TryFromValue::try_from_value","value":"fn (val: Value) -> Option<Self>","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Try to convert the given `Value` into `Self`.\n","sig":null,"attributes":[{"value":"/ Try to convert the given `Value` into `Self`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":10300,"byte_end":10349,"line_start":377,"line_end":377,"column_start":2,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":118},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":11110,"byte_end":11124,"line_start":417,"line_end":417,"column_start":11,"column_end":25},"name":"WritePrimitive","qualname":"::WritePrimitive","value":"WritePrimitive<T: PointerType>","parent":null,"children":[{"krate":0,"index":120}],"decl_id":null,"docs":" Something that can write a primitive to wasm memory location.\n","sig":null,"attributes":[{"value":"/ Something that can write a primitive to wasm memory location.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":11034,"byte_end":11099,"line_start":416,"line_end":416,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":11214,"byte_end":11229,"line_start":419,"line_end":419,"column_start":5,"column_end":20},"name":"write_primitive","qualname":"::WritePrimitive::write_primitive","value":"fn (&mut self, ptr: Pointer<T>, t: T) -> Result<()>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Write the given value `t` to the given memory location `ptr`.\n","sig":null,"attributes":[{"value":"/ Write the given value `t` to the given memory location `ptr`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":11144,"byte_end":11209,"line_start":418,"line_end":418,"column_start":2,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":125},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":11759,"byte_end":11772,"line_start":437,"line_end":437,"column_start":11,"column_end":24},"name":"ReadPrimitive","qualname":"::ReadPrimitive","value":"ReadPrimitive<T: PointerType>","parent":null,"children":[{"krate":0,"index":127}],"decl_id":null,"docs":" Something that can read a primitive from a wasm memory location.\n","sig":null,"attributes":[{"value":"/ Something that can read a primitive from a wasm memory location.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":11680,"byte_end":11748,"line_start":436,"line_end":436,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":11855,"byte_end":11869,"line_start":439,"line_end":439,"column_start":5,"column_end":19},"name":"read_primitive","qualname":"::ReadPrimitive::read_primitive","value":"fn (&self, ptr: Pointer<T>) -> Result<T>","parent":{"krate":0,"index":125},"children":[],"decl_id":null,"docs":" Read a primitive from the given memory location `ptr`.\n","sig":null,"attributes":[{"value":"/ Read a primitive from the given memory location `ptr`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":11792,"byte_end":11850,"line_start":438,"line_end":438,"column_start":2,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":796},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12612,"byte_end":12616,"line_start":464,"line_end":464,"column_start":2,"column_end":6},"name":"Unit","qualname":"::ReturnValue::Unit","value":"ReturnValue::Unit","parent":{"krate":0,"index":795},"children":[],"decl_id":null,"docs":" For returning nothing.\n","sig":null,"attributes":[{"value":"/ For returning nothing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12584,"byte_end":12610,"line_start":463,"line_end":463,"column_start":2,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":798},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12659,"byte_end":12664,"line_start":466,"line_end":466,"column_start":2,"column_end":7},"name":"Value","qualname":"::ReturnValue::Value","value":"ReturnValue::Value(Value)","parent":{"krate":0,"index":795},"children":[],"decl_id":null,"docs":" For returning some concrete value.\n","sig":null,"attributes":[{"value":"/ For returning some concrete value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12619,"byte_end":12657,"line_start":465,"line_end":465,"column_start":2,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":795},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12569,"byte_end":12580,"line_start":462,"line_end":462,"column_start":10,"column_end":21},"name":"ReturnValue","qualname":"::ReturnValue","value":"ReturnValue::{Unit, Value}","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":798}],"decl_id":null,"docs":" Typed value that can be returned from a function.","sig":null,"attributes":[{"value":"/ Typed value that can be returned from a function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12353,"byte_end":12406,"line_start":458,"line_end":458,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12407,"byte_end":12410,"line_start":459,"line_end":459,"column_start":1,"column_end":4}},{"value":"/ Basically a `TypedValue` plus `Unit`, for functions which return nothing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12411,"byte_end":12488,"line_start":460,"line_end":460,"column_start":1,"column_end":78}}]},{"kind":"Const","id":{"krate":0,"index":137},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":13076,"byte_end":13092,"line_start":482,"line_end":482,"column_start":12,"column_end":28},"name":"ENCODED_MAX_SIZE","qualname":"::ReturnValue::ENCODED_MAX_SIZE","value":"usize","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" Maximum number of bytes `ReturnValue` might occupy when serialized with `SCALE`.","sig":null,"attributes":[{"value":"/ Maximum number of bytes `ReturnValue` might occupy when serialized with `SCALE`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12797,"byte_end":12881,"line_start":476,"line_end":476,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12883,"byte_end":12886,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ Breakdown:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12888,"byte_end":12902,"line_start":478,"line_end":478,"column_start":2,"column_end":16}},{"value":"/  1 byte for encoding unit/value variant","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12904,"byte_end":12947,"line_start":479,"line_end":479,"column_start":2,"column_end":45}},{"value":"/  1 byte for encoding value type","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12949,"byte_end":12984,"line_start":480,"line_end":480,"column_start":2,"column_end":37}},{"value":"/  8 bytes for encoding the biggest value types available in wasm: f64, i64.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12986,"byte_end":13064,"line_start":481,"line_end":481,"column_start":2,"column_end":80}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":14519,"byte_end":14531,"line_start":22,"line_end":22,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":14794,"byte_end":14799,"line_start":33,"line_end":33,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15129,"byte_end":15138,"line_start":44,"line_end":44,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15364,"byte_end":15373,"line_start":55,"line_end":55,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15634,"byte_end":15643,"line_start":66,"line_end":66,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15855,"byte_end":15864,"line_start":73,"line_end":73,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1634,"byte_end":1643,"line_start":59,"line_end":59,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2374,"byte_end":2379,"line_start":90,"line_end":90,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3526,"byte_end":3533,"line_start":140,"line_end":140,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":4347,"byte_end":4354,"line_start":174,"line_end":174,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":4768,"byte_end":4775,"line_start":198,"line_end":198,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":4929,"byte_end":4936,"line_start":203,"line_end":203,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5429,"byte_end":5438,"line_start":224,"line_end":224,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6104,"byte_end":6105,"line_start":246,"line_end":246,"column_start":59,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12697,"byte_end":12708,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12782,"byte_end":12793,"line_start":475,"line_end":475,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":14519,"byte_end":14531,"line_start":22,"line_end":22,"column_start":29,"column_end":41},"kind":{"Impl":{"id":0}},"from":{"krate":23,"index":2586},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":14794,"byte_end":14799,"line_start":33,"line_end":33,"column_start":36,"column_end":41},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":158},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15129,"byte_end":15138,"line_start":44,"line_end":44,"column_start":33,"column_end":42},"kind":{"Impl":{"id":2}},"from":{"krate":23,"index":2561},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15364,"byte_end":15373,"line_start":55,"line_end":55,"column_start":33,"column_end":42},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":138},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15634,"byte_end":15643,"line_start":66,"line_end":66,"column_start":33,"column_end":42},"kind":{"Impl":{"id":4}},"from":{"krate":23,"index":2547},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/wasmi_impl.rs","byte_start":15855,"byte_end":15864,"line_start":73,"line_end":73,"column_start":34,"column_end":43},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":214},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":1634,"byte_end":1643,"line_start":59,"line_end":59,"column_start":39,"column_end":48},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":138},"to":{"krate":2,"index":1814}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":2374,"byte_end":2379,"line_start":90,"line_end":90,"column_start":6,"column_end":11},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3104,"byte_end":3109,"line_start":123,"line_end":123,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3121,"byte_end":3127,"line_start":123,"line_end":123,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":39},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":3526,"byte_end":3533,"line_start":140,"line_end":140,"column_start":22,"column_end":29},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":4347,"byte_end":4354,"line_start":174,"line_end":174,"column_start":36,"column_end":43},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":191},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":4768,"byte_end":4775,"line_start":198,"line_end":198,"column_start":36,"column_end":43},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":191},"to":{"krate":0,"index":112}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":4929,"byte_end":4936,"line_start":203,"line_end":203,"column_start":39,"column_end":46},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":191},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":5429,"byte_end":5438,"line_start":224,"line_end":224,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6005,"byte_end":6018,"line_start":244,"line_end":244,"column_start":43,"column_end":56},"kind":"SuperTrait","from":{"krate":1,"index":3652},"to":{"krate":0,"index":84}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6104,"byte_end":6105,"line_start":246,"line_end":246,"column_start":59,"column_end":60},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":86},"to":{"krate":0,"index":84}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6408,"byte_end":6426,"line_start":255,"line_end":255,"column_start":21,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":84},"to":{"krate":0,"index":87}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6429,"byte_end":6433,"line_start":255,"line_end":255,"column_start":42,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":87}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":6436,"byte_end":6440,"line_start":255,"line_end":255,"column_start":49,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":87}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":10291,"byte_end":10296,"line_start":376,"line_end":376,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12697,"byte_end":12708,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":795},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/wasm-interface/src/lib.rs","byte_start":12782,"byte_end":12793,"line_start":475,"line_end":475,"column_start":6,"column_end":17},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":795},"to":{"krate":4294967295,"index":4294967295}}]}