{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1","program":"/home/ipfs/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","trie_db","--edition=2018","/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"rustc-hex\"","--cfg","feature=\"std\"","-C","metadata=fbe9ffc2d87029f2","-C","extra-filename=-fbe9ffc2d87029f2","--out-dir","/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps","-L","dependency=/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps","--extern","hash_db=/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps/libhash_db-0c264603c81309b4.rmeta","--extern","hashbrown=/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps/libhashbrown-7d5c74ca42e87995.rmeta","--extern","log=/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps/liblog-0cfc9f3120ac6e4a.rmeta","--extern","rustc_hex=/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps/librustc_hex-6445f753420a4ffe.rmeta","--extern","smallvec=/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps/libsmallvec-a171f269ed47d617.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/ipfs/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ipfs/substrate-node-template/pallets/template/target/rls/debug/deps/libtrie_db-fbe9ffc2d87029f2.rmeta"},"prelude":{"crate_id":{"name":"trie_db","disambiguator":[14058592916532296697,15101355858841735982]},"crate_root":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src","external_crates":[{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","num":15,"id":{"name":"hash_db","disambiguator":[9792644969574235955,776104945287127595]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","num":16,"id":{"name":"hashbrown","disambiguator":[10607846963804169666,8224092687569940531]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","num":17,"id":{"name":"ahash","disambiguator":[7836108867056887213,9815184329433061515]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","num":18,"id":{"name":"const_random","disambiguator":[4215802248038723435,8585138714700839987]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","num":19,"id":{"name":"proc_macro_hack","disambiguator":[11648198905521943211,17157862379242527653]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","num":20,"id":{"name":"const_random_macro","disambiguator":[17458909312445488312,12242545549692467389]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","num":21,"id":{"name":"log","disambiguator":[9335353625162574946,15944831640773690670]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","num":22,"id":{"name":"cfg_if","disambiguator":[905820604123660737,9080961431952796619]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","num":23,"id":{"name":"rustc_hex","disambiguator":[10434719161438519964,14346445293922435357]}},{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","num":24,"id":{"name":"smallvec","disambiguator":[4204636050770628742,12614792987383810951]}}],"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":602,"byte_end":14439,"line_start":14,"line_end":460,"column_start":1,"column_end":69}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":24062,"byte_end":24076,"line_start":33,"line_end":33,"column_start":25,"column_end":39},"alias_span":null,"name":"generate_proof","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":0,"index":1530},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":24101,"byte_end":24106,"line_start":34,"line_end":34,"column_start":24,"column_end":29},"alias_span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":24110,"byte_end":24121,"line_start":34,"line_end":34,"column_start":33,"column_end":44},"name":"VerifyError","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":24123,"byte_end":24135,"line_start":34,"line_end":34,"column_start":46,"column_end":58},"alias_span":null,"name":"verify_proof","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":15,"index":40},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1553,"byte_end":1559,"line_start":60,"line_end":60,"column_start":19,"column_end":25},"alias_span":null,"name":"HashDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":48},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1561,"byte_end":1570,"line_start":60,"line_end":60,"column_start":27,"column_end":36},"alias_span":null,"name":"HashDBRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":11},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1572,"byte_end":1578,"line_start":60,"line_end":60,"column_start":38,"column_end":44},"alias_span":null,"name":"Hasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":266},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1604,"byte_end":1610,"line_start":61,"line_end":61,"column_start":24,"column_end":30},"alias_span":null,"name":"TrieDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":315},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1612,"byte_end":1626,"line_start":61,"line_end":61,"column_start":32,"column_end":46},"alias_span":null,"name":"TrieDBIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":491},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1655,"byte_end":1664,"line_start":62,"line_end":62,"column_start":27,"column_end":36},"alias_span":null,"name":"TrieDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1593},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1666,"byte_end":1680,"line_start":62,"line_end":62,"column_start":38,"column_end":52},"alias_span":null,"name":"ChildReference","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":598},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1711,"byte_end":1723,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"alias_span":null,"name":"SecTrieDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":565},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1750,"byte_end":1759,"line_start":64,"line_end":64,"column_start":26,"column_end":35},"alias_span":null,"name":"SecTrieDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":648},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1783,"byte_end":1788,"line_start":65,"line_end":65,"column_start":23,"column_end":28},"alias_span":null,"name":"FatDB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":669},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1790,"byte_end":1803,"line_start":65,"line_end":65,"column_start":30,"column_end":43},"alias_span":null,"name":"FatDBIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":702},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1830,"byte_end":1838,"line_start":66,"line_end":66,"column_start":25,"column_end":33},"alias_span":null,"name":"FatDBMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1652},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1865,"byte_end":1873,"line_start":67,"line_end":67,"column_start":26,"column_end":34},"alias_span":null,"name":"Recorder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1630},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1875,"byte_end":1881,"line_start":67,"line_end":67,"column_start":36,"column_end":42},"alias_span":null,"name":"Record","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":929},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1906,"byte_end":1912,"line_start":68,"line_end":68,"column_start":23,"column_end":29},"alias_span":null,"name":"Lookup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1714},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1937,"byte_end":1948,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"alias_span":null,"name":"NibbleSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1700},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1950,"byte_end":1959,"line_start":69,"line_end":69,"column_start":37,"column_end":46},"alias_span":null,"name":"NibbleVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1078},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1961,"byte_end":1971,"line_start":69,"line_end":69,"column_start":48,"column_end":58},"alias_span":null,"name":"nibble_ops","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1117},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2002,"byte_end":2011,"line_start":70,"line_end":70,"column_start":29,"column_end":38},"alias_span":null,"name":"NodeCodec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1115},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2013,"byte_end":2020,"line_start":70,"line_end":70,"column_start":40,"column_end":47},"alias_span":null,"name":"Partial","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":782},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2051,"byte_end":2061,"line_start":71,"line_end":71,"column_start":29,"column_end":39},"alias_span":null,"name":"trie_visit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":788},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2063,"byte_end":2081,"line_start":71,"line_end":71,"column_start":41,"column_end":59},"alias_span":null,"name":"ProcessEncodedNode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":791},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2085,"byte_end":2096,"line_start":72,"line_end":72,"column_start":3,"column_end":14},"alias_span":null,"name":"TrieBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":813},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2098,"byte_end":2106,"line_start":72,"line_end":72,"column_start":16,"column_end":24},"alias_span":null,"name":"TrieRoot","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":825},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2108,"byte_end":2124,"line_start":72,"line_end":72,"column_start":26,"column_end":42},"alias_span":null,"name":"TrieRootUnhashed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":874},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2152,"byte_end":2170,"line_start":73,"line_end":73,"column_start":26,"column_end":44},"alias_span":null,"name":"TrieDBNodeIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1201},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2200,"byte_end":2214,"line_start":74,"line_end":74,"column_start":29,"column_end":43},"alias_span":null,"name":"decode_compact","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1183},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2216,"byte_end":2230,"line_start":74,"line_end":74,"column_start":45,"column_end":59},"alias_span":null,"name":"encode_compact","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":832},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2285,"byte_end":2298,"line_start":77,"line_end":77,"column_start":28,"column_end":41},"alias_span":null,"name":"TrieRootPrint","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":602,"byte_end":14439,"line_start":14,"line_end":460,"column_start":1,"column_end":69},"name":"","qualname":"::","value":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":67},{"krate":0,"index":237},{"krate":0,"index":333},{"krate":0,"index":549},{"krate":0,"index":586},{"krate":0,"index":620},{"krate":0,"index":631},{"krate":0,"index":689},{"krate":0,"index":724},{"krate":0,"index":847},{"krate":0,"index":912},{"krate":0,"index":944},{"krate":0,"index":1104},{"krate":0,"index":1135},{"krate":0,"index":1206},{"krate":0,"index":1210},{"krate":0,"index":1213},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1230},{"krate":0,"index":1233},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1723},{"krate":0,"index":1759},{"krate":0,"index":1762},{"krate":0,"index":1752},{"krate":0,"index":1755},{"krate":0,"index":1748},{"krate":0,"index":1744},{"krate":0,"index":1245},{"krate":0,"index":1249},{"krate":0,"index":1253},{"krate":0,"index":1257},{"krate":0,"index":1261},{"krate":0,"index":1266},{"krate":0,"index":1272},{"krate":0,"index":1279},{"krate":0,"index":1287},{"krate":0,"index":1303},{"krate":0,"index":1314},{"krate":0,"index":1767},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1776},{"krate":0,"index":1774},{"krate":0,"index":1317},{"krate":0,"index":1781},{"krate":0,"index":1788},{"krate":0,"index":1785},{"krate":0,"index":1319},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1344},{"krate":0,"index":1352},{"krate":0,"index":1356},{"krate":0,"index":1375},{"krate":0,"index":1377}],"decl_id":null,"docs":" Trie interface and implementation.\n","sig":null,"attributes":[{"value":"! Trie interface and implementation.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":646,"byte_end":684,"line_start":16,"line_end":16,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"node","qualname":"::node","value":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":1379},{"krate":0,"index":1403},{"krate":0,"index":1400},{"krate":0,"index":1398},{"krate":0,"index":1392},{"krate":0,"index":1394},{"krate":0,"index":1387},{"krate":0,"index":1389},{"krate":0,"index":38},{"krate":0,"index":1406},{"krate":0,"index":1441},{"krate":0,"index":1443},{"krate":0,"index":1435},{"krate":0,"index":1437},{"krate":0,"index":1432},{"krate":0,"index":1429},{"krate":0,"index":1448},{"krate":0,"index":1464},{"krate":0,"index":1462},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":40},{"krate":0,"index":1466},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1471},{"krate":0,"index":1469},{"krate":0,"index":44},{"krate":0,"index":1480},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1500},{"krate":0,"index":1498},{"krate":0,"index":50},{"krate":0,"index":1511},{"krate":0,"index":1526},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1515},{"krate":0,"index":1517},{"krate":0,"index":60}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":15368,"byte_end":15375,"line_start":24,"line_end":24,"column_start":10,"column_end":17},"name":"NodeKey","qualname":"::node::NodeKey","value":"(usize, nibble::BackingByteVec)","parent":null,"children":[],"decl_id":null,"docs":" Partial node key type: offset and owned value of a nibbleslice.\n Offset is applied on first byte of array (bytes are right aligned).\n","sig":null,"attributes":[{"value":"/ Partial node key type: offset and owned value of a nibbleslice.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":15219,"byte_end":15286,"line_start":22,"line_end":22,"column_start":1,"column_end":68}},{"value":"/ Offset is applied on first byte of array (bytes are right aligned).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":15287,"byte_end":15358,"line_start":23,"line_end":23,"column_start":1,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1381},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":15561,"byte_end":15565,"line_start":29,"line_end":29,"column_start":2,"column_end":6},"name":"Hash","qualname":"::node::NodeHandle::Hash","value":"NodeHandle::Hash(&'a [u8])","parent":{"krate":0,"index":1379},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1384},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":15578,"byte_end":15584,"line_start":30,"line_end":30,"column_start":2,"column_end":8},"name":"Inline","qualname":"::node::NodeHandle::Inline","value":"NodeHandle::Inline(&'a [u8])","parent":{"krate":0,"index":1379},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1379},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":15543,"byte_end":15553,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"NodeHandle","qualname":"::node::NodeHandle","value":"NodeHandle::{Hash, Inline}","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1384}],"decl_id":null,"docs":" A reference to a trie node which may be stored within another trie node.\n","sig":null,"attributes":[{"value":"/ A reference to a trie node which may be stored within another trie node.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":15412,"byte_end":15488,"line_start":26,"line_end":26,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":15704,"byte_end":15715,"line_start":34,"line_end":34,"column_start":8,"column_end":19},"name":"decode_hash","qualname":"::node::decode_hash","value":"fn <H> (data: &[u8]) -> Option<H::Out>","parent":null,"children":[],"decl_id":null,"docs":" Read a hash from a slice into a Hasher output. Returns None if the slice is the wrong length.\n","sig":null,"attributes":[{"value":"/ Read a hash from a slice into a Hasher output. Returns None if the slice is the wrong length.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":15599,"byte_end":15696,"line_start":33,"line_end":33,"column_start":1,"column_end":98}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1408},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16127,"byte_end":16132,"line_start":48,"line_end":48,"column_start":2,"column_end":7},"name":"Empty","qualname":"::node::Node::Empty","value":"Node::Empty","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Null trie node; could be an empty root or an empty branch entry.\n","sig":null,"attributes":[{"value":"/ Null trie node; could be an empty root or an empty branch entry.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16057,"byte_end":16125,"line_start":47,"line_end":47,"column_start":2,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1410},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16200,"byte_end":16204,"line_start":50,"line_end":50,"column_start":2,"column_end":6},"name":"Leaf","qualname":"::node::Node::Leaf","value":"Node::Leaf(NibbleSlice<'a>, &'a [u8])","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Leaf node; has key slice and value. Value may not be empty.\n","sig":null,"attributes":[{"value":"/ Leaf node; has key slice and value. Value may not be empty.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16135,"byte_end":16198,"line_start":49,"line_end":49,"column_start":2,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1414},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16306,"byte_end":16315,"line_start":52,"line_end":52,"column_start":2,"column_end":11},"name":"Extension","qualname":"::node::Node::Extension","value":"Node::Extension(NibbleSlice<'a>, NodeHandle<'a>)","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Extension node; has key slice and node data. Data may not be null.\n","sig":null,"attributes":[{"value":"/ Extension node; has key slice and node data. Data may not be null.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16234,"byte_end":16304,"line_start":51,"line_end":51,"column_start":2,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1418},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16457,"byte_end":16463,"line_start":55,"line_end":55,"column_start":2,"column_end":8},"name":"Branch","qualname":"::node::Node::Branch","value":"Node::Branch([Option<NodeHandle<'a>>; nibble_ops::NIBBLE_LENGTH], Option<&'a [u8]>)","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Branch node; has slice of child nodes (each possibly null)\n and an optional immediate node data.\n","sig":null,"attributes":[{"value":"/ Branch node; has slice of child nodes (each possibly null)","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16351,"byte_end":16413,"line_start":53,"line_end":53,"column_start":2,"column_end":64}},{"value":"/ and an optional immediate node data.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16415,"byte_end":16455,"line_start":54,"line_end":54,"column_start":2,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1423},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16617,"byte_end":16630,"line_start":57,"line_end":57,"column_start":2,"column_end":15},"name":"NibbledBranch","qualname":"::node::Node::NibbledBranch","value":"Node::NibbledBranch(NibbleSlice<'a>, [Option<NodeHandle<'a>>; nibble_ops::NIBBLE_LENGTH], Option<&'a [u8]>)","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Branch node with support for a nibble (when extension nodes are not used).\n","sig":null,"attributes":[{"value":"/ Branch node with support for a nibble (when extension nodes are not used).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16537,"byte_end":16615,"line_start":56,"line_end":56,"column_start":2,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":1406},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16045,"byte_end":16049,"line_start":46,"line_end":46,"column_start":10,"column_end":14},"name":"Node","qualname":"::node::Node","value":"Node::{Empty, Leaf, Extension, Branch, NibbledBranch}","parent":null,"children":[{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1414},{"krate":0,"index":1418},{"krate":0,"index":1423}],"decl_id":null,"docs":" Type of node in the trie and essential information thereof.\n","sig":null,"attributes":[{"value":"/ Type of node in the trie and essential information thereof.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":15896,"byte_end":15959,"line_start":43,"line_end":43,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1449},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16968,"byte_end":16972,"line_start":64,"line_end":64,"column_start":2,"column_end":6},"name":"Hash","qualname":"::node::NodeHandlePlan::Hash","value":"NodeHandlePlan::Hash(Range<usize>)","parent":{"krate":0,"index":1448},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1452},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16989,"byte_end":16995,"line_start":65,"line_end":65,"column_start":2,"column_end":8},"name":"Inline","qualname":"::node::NodeHandlePlan::Inline","value":"NodeHandlePlan::Inline(Range<usize>)","parent":{"krate":0,"index":1448},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1448},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16950,"byte_end":16964,"line_start":63,"line_end":63,"column_start":10,"column_end":24},"name":"NodeHandlePlan","qualname":"::node::NodeHandlePlan","value":"NodeHandlePlan::{Hash, Inline}","parent":null,"children":[{"krate":0,"index":1449},{"krate":0,"index":1452}],"decl_id":null,"docs":" A `NodeHandlePlan` is a decoding plan for constructing a `NodeHandle` from an encoded trie\n node. This is used as a substructure of `NodePlan`. See `NodePlan` for details.\n","sig":null,"attributes":[{"value":"/ A `NodeHandlePlan` is a decoding plan for constructing a `NodeHandle` from an encoded trie","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16723,"byte_end":16817,"line_start":60,"line_end":60,"column_start":1,"column_end":95}},{"value":"/ node. This is used as a substructure of `NodePlan`. See `NodePlan` for details.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":16818,"byte_end":16901,"line_start":61,"line_end":61,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17294,"byte_end":17299,"line_start":72,"line_end":72,"column_start":9,"column_end":14},"name":"build","qualname":"<NodeHandlePlan>::build","value":"fn <'a, 'b> (&'a self, data: &'b [u8]) -> NodeHandle<'b>","parent":null,"children":[],"decl_id":null,"docs":" Build a node handle by decoding a byte slice according to the node handle plan. It is the\n responsibility of the caller to ensure that the node plan was created for the argument\n data, otherwise the call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a node handle by decoding a byte slice according to the node handle plan. It is the","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17037,"byte_end":17130,"line_start":69,"line_end":69,"column_start":2,"column_end":95}},{"value":"/ responsibility of the caller to ensure that the node plan was created for the argument","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17132,"byte_end":17222,"line_start":70,"line_end":70,"column_start":2,"column_end":92}},{"value":"/ data, otherwise the call may decode incorrectly or panic.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17224,"byte_end":17285,"line_start":71,"line_end":71,"column_start":2,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1466},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17799,"byte_end":17814,"line_start":84,"line_end":84,"column_start":12,"column_end":27},"name":"NibbleSlicePlan","qualname":"::node::NibbleSlicePlan","value":"NibbleSlicePlan {  }","parent":null,"children":[{"krate":0,"index":1467},{"krate":0,"index":1468}],"decl_id":null,"docs":" A `NibbleSlicePlan` is a blueprint for decoding a nibble slice from a byte slice. The\n `NibbleSlicePlan` is created by parsing a byte slice and can be reused multiple times.\n","sig":null,"attributes":[{"value":"/ A `NibbleSlicePlan` is a blueprint for decoding a nibble slice from a byte slice. The","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17531,"byte_end":17620,"line_start":80,"line_end":80,"column_start":1,"column_end":90}},{"value":"/ `NibbleSlicePlan` is created by parsing a byte slice and can be reused multiple times.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17621,"byte_end":17711,"line_start":81,"line_end":81,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17932,"byte_end":17935,"line_start":91,"line_end":91,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleSlicePlan>::new","value":"fn (bytes: Range<usize>, offset: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a nibble slice decode plan.\n","sig":null,"attributes":[{"value":"/ Construct a nibble slice decode plan.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17882,"byte_end":17923,"line_start":90,"line_end":90,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18083,"byte_end":18086,"line_start":99,"line_end":99,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleSlicePlan>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the nibble length of the slice.\n","sig":null,"attributes":[{"value":"/ Returns the nibble length of the slice.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18031,"byte_end":18074,"line_start":98,"line_end":98,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18438,"byte_end":18443,"line_start":106,"line_end":106,"column_start":9,"column_end":14},"name":"build","qualname":"<NibbleSlicePlan>::build","value":"fn <'a, 'b> (&'a self, data: &'b [u8]) -> NibbleSlice<'b>","parent":null,"children":[],"decl_id":null,"docs":" Build a nibble slice by decoding a byte slice according to the plan. It is the\n responsibility of the caller to ensure that the node plan was created for the argument\n data, otherwise the call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a nibble slice by decoding a byte slice according to the plan. It is the","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18192,"byte_end":18274,"line_start":103,"line_end":103,"column_start":2,"column_end":84}},{"value":"/ responsibility of the caller to ensure that the node plan was created for the argument","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18276,"byte_end":18366,"line_start":104,"line_end":104,"column_start":2,"column_end":92}},{"value":"/ data, otherwise the call may decode incorrectly or panic.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18368,"byte_end":18429,"line_start":105,"line_end":105,"column_start":2,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1481},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19147,"byte_end":19152,"line_start":121,"line_end":121,"column_start":2,"column_end":7},"name":"Empty","qualname":"::node::NodePlan::Empty","value":"NodePlan::Empty","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":" Null trie node; could be an empty root or an empty branch entry.\n","sig":null,"attributes":[{"value":"/ Null trie node; could be an empty root or an empty branch entry.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19077,"byte_end":19145,"line_start":120,"line_end":120,"column_start":2,"column_end":70}}]},{"kind":"StructVariant","id":{"krate":0,"index":1483},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19205,"byte_end":19209,"line_start":123,"line_end":123,"column_start":2,"column_end":6},"name":"Leaf","qualname":"::node::NodePlan::Leaf","value":"NodePlan::Leaf { partial, value }","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":" Leaf node; has a partial key plan and value.\n","sig":null,"attributes":[{"value":"/ Leaf node; has a partial key plan and value.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19155,"byte_end":19203,"line_start":122,"line_end":122,"column_start":2,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":1486},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19328,"byte_end":19337,"line_start":128,"line_end":128,"column_start":2,"column_end":11},"name":"Extension","qualname":"::node::NodePlan::Extension","value":"NodePlan::Extension { partial, child }","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":" Extension node; has a partial key plan and child data.\n","sig":null,"attributes":[{"value":"/ Extension node; has a partial key plan and child data.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19268,"byte_end":19326,"line_start":127,"line_end":127,"column_start":2,"column_end":60}}]},{"kind":"StructVariant","id":{"krate":0,"index":1489},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19504,"byte_end":19510,"line_start":134,"line_end":134,"column_start":2,"column_end":8},"name":"Branch","qualname":"::node::NodePlan::Branch","value":"NodePlan::Branch { value, children }","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":" Branch node; has slice of child nodes (each possibly null)\n and an optional immediate node data.\n","sig":null,"attributes":[{"value":"/ Branch node; has slice of child nodes (each possibly null)","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19398,"byte_end":19460,"line_start":132,"line_end":132,"column_start":2,"column_end":64}},{"value":"/ and an optional immediate node data.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19462,"byte_end":19502,"line_start":133,"line_end":133,"column_start":2,"column_end":42}}]},{"kind":"StructVariant","id":{"krate":0,"index":1493},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19694,"byte_end":19707,"line_start":139,"line_end":139,"column_start":2,"column_end":15},"name":"NibbledBranch","qualname":"::node::NodePlan::NibbledBranch","value":"NodePlan::NibbledBranch { partial, value, children }","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":" Branch node with support for a nibble (when extension nodes are not used).\n","sig":null,"attributes":[{"value":"/ Branch node with support for a nibble (when extension nodes are not used).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19614,"byte_end":19692,"line_start":138,"line_end":138,"column_start":2,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":1480},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19065,"byte_end":19073,"line_start":119,"line_end":119,"column_start":10,"column_end":18},"name":"NodePlan","qualname":"::node::NodePlan","value":"NodePlan::{Empty, Leaf, Extension, Branch, NibbledBranch}","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1483},{"krate":0,"index":1486},{"krate":0,"index":1489},{"krate":0,"index":1493}],"decl_id":null,"docs":" A `NodePlan` is a blueprint for decoding a node from a byte slice. The `NodePlan` is created\n by parsing an encoded node and can be reused multiple times. This is useful as a `Node` borrows\n from a byte slice and this struct does not.","sig":null,"attributes":[{"value":"/ A `NodePlan` is a blueprint for decoding a node from a byte slice. The `NodePlan` is created","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18571,"byte_end":18667,"line_start":111,"line_end":111,"column_start":1,"column_end":97}},{"value":"/ by parsing an encoded node and can be reused multiple times. This is useful as a `Node` borrows","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18668,"byte_end":18767,"line_start":112,"line_end":112,"column_start":1,"column_end":100}},{"value":"/ from a byte slice and this struct does not.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18768,"byte_end":18815,"line_start":113,"line_end":113,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18816,"byte_end":18819,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ The enum values mirror those of `Node` except that instead of byte slices, this struct stores","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18820,"byte_end":18917,"line_start":115,"line_end":115,"column_start":1,"column_end":98}},{"value":"/ ranges that can be used to index into a large byte slice.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":18918,"byte_end":18979,"line_start":116,"line_end":116,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":20101,"byte_end":20106,"line_start":150,"line_end":150,"column_start":9,"column_end":14},"name":"build","qualname":"<NodePlan>::build","value":"fn <'a, 'b> (&'a self, data: &'b [u8]) -> Node<'b>","parent":null,"children":[],"decl_id":null,"docs":" Build a node by decoding a byte slice according to the node plan. It is the responsibility\n of the caller to ensure that the node plan was created for the argument data, otherwise the\n call may decode incorrectly or panic.\n","sig":null,"attributes":[{"value":"/ Build a node by decoding a byte slice according to the node plan. It is the responsibility","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19858,"byte_end":19952,"line_start":147,"line_end":147,"column_start":2,"column_end":96}},{"value":"/ of the caller to ensure that the node plan was created for the argument data, otherwise the","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19954,"byte_end":20049,"line_start":148,"line_end":148,"column_start":2,"column_end":97}},{"value":"/ call may decode incorrectly or panic.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":20051,"byte_end":20092,"line_start":149,"line_end":149,"column_start":2,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1511},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21391,"byte_end":21400,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"OwnedNode","qualname":"::node::OwnedNode","value":"OwnedNode {  }","parent":null,"children":[{"krate":0,"index":1513},{"krate":0,"index":1514}],"decl_id":null,"docs":" An `OwnedNode` is an owned type from which a `Node` can be constructed which borrows data from\n the `OwnedNode`. This is useful for trie iterators.\n","sig":null,"attributes":[{"value":"/ An `OwnedNode` is an owned type from which a `Node` can be constructed which borrows data from","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21156,"byte_end":21254,"line_start":177,"line_end":177,"column_start":1,"column_end":99}},{"value":"/ the `OwnedNode`. This is useful for trie iterators.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21255,"byte_end":21310,"line_start":178,"line_end":178,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21583,"byte_end":21586,"line_start":188,"line_end":188,"column_start":9,"column_end":12},"name":"new","qualname":"<OwnedNode<D>>::new","value":"fn <C> (data: D) -> Result<Self, C::Error>","parent":null,"children":[],"decl_id":null,"docs":" Construct an `OwnedNode` by decoding an owned data source according to some codec.\n","sig":null,"attributes":[{"value":"/ Construct an `OwnedNode` by decoding an owned data source according to some codec.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21488,"byte_end":21574,"line_start":187,"line_end":187,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21772,"byte_end":21776,"line_start":194,"line_end":194,"column_start":9,"column_end":13},"name":"data","qualname":"<OwnedNode<D>>::data","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the backing data.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the backing data.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21719,"byte_end":21763,"line_start":193,"line_end":193,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21878,"byte_end":21887,"line_start":199,"line_end":199,"column_start":9,"column_end":18},"name":"node_plan","qualname":"<OwnedNode<D>>::node_plan","value":"fn (&self) -> &NodePlan","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the node decode plan.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the node decode plan.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21821,"byte_end":21869,"line_start":198,"line_end":198,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21995,"byte_end":21999,"line_start":204,"line_end":204,"column_start":9,"column_end":13},"name":"node","qualname":"<OwnedNode<D>>::node","value":"fn (&self) -> Node","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Node` by borrowing data from this struct.\n","sig":null,"attributes":[{"value":"/ Construct a `Node` by borrowing data from this struct.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21928,"byte_end":21986,"line_start":203,"line_end":203,"column_start":2,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"proof","qualname":"::proof","value":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":154}],"decl_id":null,"docs":" Generation and verification of compact proofs for Merkle-Patricia tries.","sig":null,"attributes":[{"value":"! Generation and verification of compact proofs for Merkle-Patricia tries.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":22658,"byte_end":22734,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":22735,"byte_end":22738,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! Using this module, it is possible to generate a logarithmic-space proof of inclusion or","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":22739,"byte_end":22830,"line_start":17,"line_end":17,"column_start":1,"column_end":92}},{"value":"! non-inclusion of certain key-value pairs in a trie with a known root. The proof contains","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":22831,"byte_end":22923,"line_start":18,"line_end":18,"column_start":1,"column_end":93}},{"value":"! information so that the verifier can reconstruct the subset of nodes in the trie required to","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":22924,"byte_end":23020,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"! lookup the keys. The trie nodes are not included in their entirety as data which the verifier","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23021,"byte_end":23118,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"! can compute for themself is omitted. In particular, the values of included keys and and hashes","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23119,"byte_end":23217,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"! of other trie nodes in the proof are omitted.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23218,"byte_end":23267,"line_start":22,"line_end":22,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23268,"byte_end":23271,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! The proof is a sequence of the subset of nodes in the trie traversed while performing lookups","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23272,"byte_end":23369,"line_start":24,"line_end":24,"column_start":1,"column_end":98}},{"value":"! on all keys. The trie nodes are listed in pre-order traversal order with some values and","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23370,"byte_end":23462,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"! internal hashes omitted. In particular, values on leaf nodes, child references on extension","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23463,"byte_end":23558,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"! nodes, values on branch nodes corresponding to a key in the statement, and child references on","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23559,"byte_end":23657,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"! branch nodes corresponding to another node in the proof are all omitted. The proof is verified","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23658,"byte_end":23756,"line_start":28,"line_end":28,"column_start":1,"column_end":99}},{"value":"! by iteratively reconstructing the trie nodes using the values proving as part of the statement","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23757,"byte_end":23855,"line_start":29,"line_end":29,"column_start":1,"column_end":99}},{"value":"! and the hashes of other reconstructed nodes. Since the nodes in the proof are arranged in","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23856,"byte_end":23949,"line_start":30,"line_end":30,"column_start":1,"column_end":94}},{"value":"! pre-order traversal order, the construction can be done efficiently using a stack.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/mod.rs","byte_start":23950,"byte_end":24036,"line_start":31,"line_end":31,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/generate.rs","byte_start":38969,"byte_end":38983,"line_start":221,"line_end":221,"column_start":8,"column_end":22},"name":"generate_proof","qualname":"::proof::generate::generate_proof","value":"fn <'a, T, L, I, K> (trie: &T, keys: I) -> TrieResult<Vec<Vec<u8>>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Generate a compact proof for key-value pairs in a trie given a set of keys.","sig":null,"attributes":[{"value":"/ Generate a compact proof for key-value pairs in a trie given a set of keys.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/generate.rs","byte_start":38826,"byte_end":38905,"line_start":218,"line_end":218,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/generate.rs","byte_start":38906,"byte_end":38909,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Assumes inline nodes have only inline children.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/generate.rs","byte_start":38910,"byte_end":38961,"line_start":220,"line_end":220,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1533},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49017,"byte_end":49029,"line_start":33,"line_end":33,"column_start":2,"column_end":14},"name":"DuplicateKey","qualname":"::proof::verify::Error::DuplicateKey","value":"Error::DuplicateKey(Vec<u8>)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The statement being verified contains multiple key-value pairs with the same key. The\n parameter is the duplicated key.\n","sig":null,"attributes":[{"value":"/ The statement being verified contains multiple key-value pairs with the same key. The","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":48888,"byte_end":48977,"line_start":31,"line_end":31,"column_start":2,"column_end":91}},{"value":"/ parameter is the duplicated key.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":48979,"byte_end":49015,"line_start":32,"line_end":32,"column_start":2,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1536},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49095,"byte_end":49109,"line_start":35,"line_end":35,"column_start":2,"column_end":16},"name":"ExtraneousNode","qualname":"::proof::verify::Error::ExtraneousNode","value":"Error::ExtraneousNode","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous node.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous node.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49041,"byte_end":49093,"line_start":34,"line_end":34,"column_start":2,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1538},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49218,"byte_end":49233,"line_start":38,"line_end":38,"column_start":2,"column_end":17},"name":"ExtraneousValue","qualname":"::proof::verify::Error::ExtraneousValue","value":"Error::ExtraneousValue(Vec<u8>)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous value which should have been omitted from the\n proof.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous value which should have been omitted from the","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49112,"byte_end":49204,"line_start":36,"line_end":36,"column_start":2,"column_end":94}},{"value":"/ proof.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49206,"byte_end":49216,"line_start":37,"line_end":37,"column_start":2,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1541},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49338,"byte_end":49361,"line_start":40,"line_end":40,"column_start":2,"column_end":25},"name":"ExtraneousHashReference","qualname":"::proof::verify::Error::ExtraneousHashReference","value":"Error::ExtraneousHashReference(HO)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof contains at least one extraneous hash reference the should have been omitted.\n","sig":null,"attributes":[{"value":"/ The proof contains at least one extraneous hash reference the should have been omitted.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49245,"byte_end":49336,"line_start":39,"line_end":39,"column_start":2,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1544},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49449,"byte_end":49470,"line_start":42,"line_end":42,"column_start":2,"column_end":23},"name":"InvalidChildReference","qualname":"::proof::verify::Error::InvalidChildReference","value":"Error::InvalidChildReference(Vec<u8>)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof contains an invalid child reference that exceeds the hash length.\n","sig":null,"attributes":[{"value":"/ The proof contains an invalid child reference that exceeds the hash length.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49368,"byte_end":49447,"line_start":41,"line_end":41,"column_start":2,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1547},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49557,"byte_end":49570,"line_start":44,"line_end":44,"column_start":2,"column_end":15},"name":"ValueMismatch","qualname":"::proof::verify::Error::ValueMismatch","value":"Error::ValueMismatch(Vec<u8>)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof indicates that an expected value was not found in the trie.\n","sig":null,"attributes":[{"value":"/ The proof indicates that an expected value was not found in the trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49482,"byte_end":49555,"line_start":43,"line_end":43,"column_start":2,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1550},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49639,"byte_end":49654,"line_start":46,"line_end":46,"column_start":2,"column_end":17},"name":"IncompleteProof","qualname":"::proof::verify::Error::IncompleteProof","value":"Error::IncompleteProof","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The proof is missing trie nodes required to verify.\n","sig":null,"attributes":[{"value":"/ The proof is missing trie nodes required to verify.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49582,"byte_end":49637,"line_start":45,"line_end":45,"column_start":2,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1552},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49714,"byte_end":49726,"line_start":48,"line_end":48,"column_start":2,"column_end":14},"name":"RootMismatch","qualname":"::proof::verify::Error::RootMismatch","value":"Error::RootMismatch(HO)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" The root hash computed from the proof is incorrect.\n","sig":null,"attributes":[{"value":"/ The root hash computed from the proof is incorrect.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49657,"byte_end":49712,"line_start":47,"line_end":47,"column_start":2,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1555},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49783,"byte_end":49794,"line_start":50,"line_end":50,"column_start":2,"column_end":13},"name":"DecodeError","qualname":"::proof::verify::Error::DecodeError","value":"Error::DecodeError(CE)","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" One of the proof nodes could not be decoded.\n","sig":null,"attributes":[{"value":"/ One of the proof nodes could not be decoded.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49733,"byte_end":49781,"line_start":49,"line_end":49,"column_start":2,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":1530},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":48871,"byte_end":48876,"line_start":30,"line_end":30,"column_start":10,"column_end":15},"name":"Error","qualname":"::proof::verify::Error","value":"Error::{DuplicateKey, ExtraneousNode, ExtraneousValue, ExtraneousHashReference, InvalidChildReference, ValueMismatch, IncompleteProof, RootMismatch, DecodeError}","parent":null,"children":[{"krate":0,"index":1533},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1541},{"krate":0,"index":1544},{"krate":0,"index":1547},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1555}],"decl_id":null,"docs":" Errors that may occur during proof verification. Most of the errors types simply indicate that\n the proof is invalid with respect to the statement being verified, and the exact error type can\n be used for debugging.\n","sig":null,"attributes":[{"value":"/ Errors that may occur during proof verification. Most of the errors types simply indicate that","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":48567,"byte_end":48665,"line_start":25,"line_end":25,"column_start":1,"column_end":99}},{"value":"/ the proof is invalid with respect to the statement being verified, and the exact error type can","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":48666,"byte_end":48765,"line_start":26,"line_end":26,"column_start":1,"column_end":100}},{"value":"/ be used for debugging.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":48766,"byte_end":48792,"line_start":27,"line_end":27,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":60083,"byte_end":60095,"line_start":391,"line_end":391,"column_start":8,"column_end":20},"name":"verify_proof","qualname":"::proof::verify::verify_proof","value":"fn <'a, L, I, K, V> (root: &<L::Hash as Hasher>::Out, proof: &[Vec<u8>], items: I) -> Result<(), Error<TrieHash<L>, CError<L>>>","parent":null,"children":[],"decl_id":null,"docs":" Verify a compact proof for key-value pairs in a trie given a root hash.\n","sig":null,"attributes":[{"value":"/ Verify a compact proof for key-value pairs in a trie given a root hash.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":60000,"byte_end":60075,"line_start":390,"line_end":390,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":237},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"triedb","qualname":"::triedb","value":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":281},{"krate":0,"index":292},{"krate":0,"index":300},{"krate":0,"index":311},{"krate":0,"index":315},{"krate":0,"index":319},{"krate":0,"index":324},{"krate":0,"index":328}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":266},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64702,"byte_end":64708,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"TrieDB","qualname":"::triedb::TrieDB","value":"TrieDB {  }","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"decl_id":null,"docs":" A `Trie` implementation using a generic `HashDB` backing database, a `Hasher`\n implementation to generate keys and a `NodeCodec` implementation to encode/decode\n the nodes.","sig":null,"attributes":[{"value":"/ A `Trie` implementation using a generic `HashDB` backing database, a `Hasher`","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":63770,"byte_end":63851,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ implementation to generate keys and a `NodeCodec` implementation to encode/decode","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":63852,"byte_end":63937,"line_start":29,"line_end":29,"column_start":1,"column_end":86}},{"value":"/ the nodes.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":63938,"byte_end":63952,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":63953,"byte_end":63956,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` trait object. You can use `db()` to get the backing database object.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":63957,"byte_end":64048,"line_start":32,"line_end":32,"column_start":1,"column_end":92}},{"value":"/ Use `get` and `contains` to query values associated with keys in the trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64049,"byte_end":64127,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64128,"byte_end":64131,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64132,"byte_end":64145,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64146,"byte_end":64153,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use hash_db::Hasher;","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64154,"byte_end":64178,"line_start":37,"line_end":37,"column_start":1,"column_end":25}},{"value":"/ use reference_trie::{RefTrieDBMut, RefTrieDB, Trie, TrieMut};","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64179,"byte_end":64244,"line_start":38,"line_end":38,"column_start":1,"column_end":66}},{"value":"/ use trie_db::DBValue;","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64245,"byte_end":64270,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ use keccak_hasher::KeccakHasher;","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64271,"byte_end":64307,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/ use memory_db::*;","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64308,"byte_end":64329,"line_start":41,"line_end":41,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64330,"byte_end":64333,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let mut memdb = MemoryDB::<KeccakHasher, HashKey<_>, _>::default();","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64334,"byte_end":64405,"line_start":43,"line_end":43,"column_start":1,"column_end":72}},{"value":"/ let mut root = Default::default();","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64406,"byte_end":64444,"line_start":44,"line_end":44,"column_start":1,"column_end":39}},{"value":"/ RefTrieDBMut::new(&mut memdb, &mut root).insert(b\"foo\", b\"bar\").unwrap();","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64445,"byte_end":64522,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ let t = RefTrieDB::new(&memdb, &root).unwrap();","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64523,"byte_end":64574,"line_start":46,"line_end":46,"column_start":1,"column_end":52}},{"value":"/ assert!(t.contains(b\"foo\").unwrap());","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64575,"byte_end":64616,"line_start":47,"line_end":47,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(t.get(b\"foo\").unwrap().unwrap(), b\"bar\".to_vec());","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64617,"byte_end":64682,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64683,"byte_end":64690,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":65075,"byte_end":65078,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDB>::new","value":"fn (db: &'db dyn HashDBRef<L::Hash, DBValue>, root: &'db TrieHash<L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`\n Returns an error if `root` does not exist\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64956,"byte_end":65019,"line_start":64,"line_end":64,"column_start":2,"column_end":65}},{"value":"/ Returns an error if `root` does not exist","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":65021,"byte_end":65066,"line_start":65,"line_end":65,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":65385,"byte_end":65387,"line_start":78,"line_end":78,"column_start":9,"column_end":11},"name":"db","qualname":"<TrieDB>::db","value":"fn (&'db self) -> &'db dyn HashDBRef<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":65347,"byte_end":65376,"line_start":77,"line_end":77,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":315},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":70840,"byte_end":70854,"line_start":265,"line_end":265,"column_start":12,"column_end":26},"name":"TrieDBIterator","qualname":"::triedb::TrieDBIterator","value":"TrieDBIterator {  }","parent":null,"children":[{"krate":0,"index":318}],"decl_id":null,"docs":" Iterator for going through all values in the trie in pre-order traversal order.\n","sig":null,"attributes":[{"value":"/ Iterator for going through all values in the trie in pre-order traversal order.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":70745,"byte_end":70828,"line_start":264,"line_end":264,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":70998,"byte_end":71001,"line_start":271,"line_end":271,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBIterator>::new","value":"fn (db: &'a TrieDB<L>) -> Result<TrieDBIterator<'a, L>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator.\n","sig":null,"attributes":[{"value":"/ Create a new iterator.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":70963,"byte_end":70989,"line_start":270,"line_end":270,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":71226,"byte_end":71238,"line_start":277,"line_end":277,"column_start":9,"column_end":21},"name":"new_prefixed","qualname":"<TrieDBIterator>::new_prefixed","value":"fn (db: &'a TrieDB<L>, prefix: &[u8]) -> Result<TrieDBIterator<'a, L>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator, but limited to a given prefix.\n","sig":null,"attributes":[{"value":"/ Create a new iterator, but limited to a given prefix.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":71160,"byte_end":71217,"line_start":276,"line_end":276,"column_start":2,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":333},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"triedbmut","qualname":"::triedbmut","value":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":337},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":349},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":361},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":1577},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1590},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":405},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":441},{"krate":0,"index":451},{"krate":0,"index":459},{"krate":0,"index":463},{"krate":0,"index":1593},{"krate":0,"index":1607},{"krate":0,"index":1605},{"krate":0,"index":1602},{"krate":0,"index":472},{"krate":0,"index":477},{"krate":0,"index":481},{"krate":0,"index":486},{"krate":0,"index":491},{"krate":0,"index":500},{"krate":0,"index":533},{"krate":0,"index":543},{"krate":0,"index":547}],"decl_id":null,"docs":" In-memory trie representation.\n","sig":null,"attributes":[{"value":"! In-memory trie representation.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":83965,"byte_end":83999,"line_start":15,"line_end":15,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1595},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":92744,"byte_end":92748,"line_start":310,"line_end":310,"column_start":2,"column_end":6},"name":"Hash","qualname":"::triedbmut::ChildReference::Hash","value":"ChildReference::Hash(HO)","parent":{"krate":0,"index":1593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1598},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":92755,"byte_end":92761,"line_start":311,"line_end":311,"column_start":2,"column_end":8},"name":"Inline","qualname":"::triedbmut::ChildReference::Inline","value":"ChildReference::Inline(HO, usize)","parent":{"krate":0,"index":1593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1593},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":92668,"byte_end":92682,"line_start":309,"line_end":309,"column_start":10,"column_end":24},"name":"ChildReference","qualname":"::triedbmut::ChildReference","value":"ChildReference::{Hash, Inline}","parent":null,"children":[{"krate":0,"index":1595},{"krate":0,"index":1598}],"decl_id":null,"docs":" Used to build a collection of child nodes from a collection of `NodeHandle`s\n","sig":null,"attributes":[{"value":"/ Used to build a collection of child nodes from a collection of `NodeHandle`s","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":92511,"byte_end":92591,"line_start":306,"line_end":306,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":491},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95734,"byte_end":95743,"line_start":414,"line_end":414,"column_start":12,"column_end":21},"name":"TrieDBMut","qualname":"::triedbmut::TrieDBMut","value":"TrieDBMut {  }","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499}],"decl_id":null,"docs":" A `Trie` implementation using a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A `Trie` implementation using a generic `HashDB` backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":94714,"byte_end":94784,"line_start":387,"line_end":387,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":94785,"byte_end":94788,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ Use it as a `TrieMut` trait object. You can use `db()` to get the backing database object.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":94789,"byte_end":94883,"line_start":389,"line_end":389,"column_start":1,"column_end":95}},{"value":"/ Note that changes are not committed to the database until `commit` is called.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":94884,"byte_end":94965,"line_start":390,"line_end":390,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":94966,"byte_end":94969,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ Querying the root or dropping the trie will commit automatically.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":94970,"byte_end":95039,"line_start":392,"line_end":392,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95040,"byte_end":95043,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95044,"byte_end":95047,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95048,"byte_end":95061,"line_start":395,"line_end":395,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95062,"byte_end":95069,"line_start":396,"line_end":396,"column_start":1,"column_end":8}},{"value":"/ use hash_db::Hasher;","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95070,"byte_end":95094,"line_start":397,"line_end":397,"column_start":1,"column_end":25}},{"value":"/ use reference_trie::{RefTrieDBMut, TrieMut};","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95095,"byte_end":95143,"line_start":398,"line_end":398,"column_start":1,"column_end":49}},{"value":"/ use trie_db::DBValue;","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95144,"byte_end":95169,"line_start":399,"line_end":399,"column_start":1,"column_end":26}},{"value":"/ use keccak_hasher::KeccakHasher;","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95170,"byte_end":95206,"line_start":400,"line_end":400,"column_start":1,"column_end":37}},{"value":"/ use memory_db::*;","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95207,"byte_end":95228,"line_start":401,"line_end":401,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95229,"byte_end":95232,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/ let mut memdb = MemoryDB::<KeccakHasher, HashKey<_>, DBValue>::default();","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95233,"byte_end":95310,"line_start":403,"line_end":403,"column_start":1,"column_end":78}},{"value":"/ let mut root = Default::default();","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95311,"byte_end":95349,"line_start":404,"line_end":404,"column_start":1,"column_end":39}},{"value":"/ let mut t = RefTrieDBMut::new(&mut memdb, &mut root);","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95350,"byte_end":95407,"line_start":405,"line_end":405,"column_start":1,"column_end":58}},{"value":"/ assert!(t.is_empty());","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95408,"byte_end":95434,"line_start":406,"line_end":406,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(*t.root(), KeccakHasher::hash(&[0u8][..]));","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95435,"byte_end":95493,"line_start":407,"line_end":407,"column_start":1,"column_end":59}},{"value":"/ t.insert(b\"foo\", b\"bar\").unwrap();","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95494,"byte_end":95532,"line_start":408,"line_end":408,"column_start":1,"column_end":39}},{"value":"/ assert!(t.contains(b\"foo\").unwrap());","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95533,"byte_end":95574,"line_start":409,"line_end":409,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(t.get(b\"foo\").unwrap().unwrap(), b\"bar\".to_vec());","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95575,"byte_end":95640,"line_start":410,"line_end":410,"column_start":1,"column_end":66}},{"value":"/ t.remove(b\"foo\").unwrap();","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95641,"byte_end":95671,"line_start":411,"line_end":411,"column_start":1,"column_end":31}},{"value":"/ assert!(!t.contains(b\"foo\").unwrap());","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95672,"byte_end":95714,"line_start":412,"line_end":412,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":95715,"byte_end":95722,"line_start":413,"line_end":413,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":96262,"byte_end":96265,"line_start":433,"line_end":433,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBMut>::new","value":"fn (db: &'a mut dyn HashDB<L::Hash, DBValue>, root: &'a mut TrieHash<L>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with backing database `db` and empty `root`.\n","sig":null,"attributes":[{"value":"/ Create a new trie with backing database `db` and empty `root`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":96187,"byte_end":96253,"line_start":432,"line_end":432,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":96711,"byte_end":96724,"line_start":449,"line_end":449,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<TrieDBMut>::from_existing","value":"fn (db: &'a mut dyn HashDB<L::Hash, DBValue>, root: &'a mut TrieHash<L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root.\n Returns an error if `root` does not exist.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":96591,"byte_end":96654,"line_start":447,"line_end":447,"column_start":2,"column_end":65}},{"value":"/ Returns an error if `root` does not exist.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":96656,"byte_end":96702,"line_start":448,"line_end":448,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":97173,"byte_end":97175,"line_start":468,"line_end":468,"column_start":9,"column_end":11},"name":"db","qualname":"<TrieDBMut>::db","value":"fn (&self) -> &dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":97135,"byte_end":97164,"line_start":467,"line_end":467,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":97279,"byte_end":97285,"line_start":473,"line_end":473,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<TrieDBMut>::db_mut","value":"fn (&mut self) -> &mut dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database mutably.\n","sig":null,"attributes":[{"value":"/ Get the backing database mutably.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":97233,"byte_end":97270,"line_start":472,"line_end":472,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":127628,"byte_end":127634,"line_start":1406,"line_end":1406,"column_start":9,"column_end":15},"name":"commit","qualname":"<TrieDBMut>::commit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Commit the in-memory changes to disk, freeing their storage and\n updating the state root.\n","sig":null,"attributes":[{"value":"/ Commit the in-memory changes to disk, freeing their storage and","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":127522,"byte_end":127589,"line_start":1404,"line_end":1404,"column_start":2,"column_end":69}},{"value":"/ updating the state root.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":127591,"byte_end":127619,"line_start":1405,"line_end":1405,"column_start":2,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":549},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sectriedb","qualname":"::sectriedb","value":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":565},{"krate":0,"index":569},{"krate":0,"index":575}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":565},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150103,"byte_end":150112,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"SecTrieDB","qualname":"::sectriedb::SecTrieDB","value":"SecTrieDB {  }","parent":null,"children":[{"krate":0,"index":568}],"decl_id":null,"docs":" A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":149903,"byte_end":149994,"line_start":20,"line_end":20,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":149995,"byte_end":149998,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` trait object. You can use `raw()` to get the backing `TrieDB` object.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":149999,"byte_end":150091,"line_start":22,"line_end":22,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150464,"byte_end":150467,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"name":"new","qualname":"<SecTrieDB>::new","value":"fn (db: &'db dyn HashDBRef<L::Hash, DBValue>, root: &'db TrieHash<L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150225,"byte_end":150294,"line_start":34,"line_end":34,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150296,"byte_end":150299,"line_start":35,"line_end":35,"column_start":2,"column_end":5}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150301,"byte_end":150359,"line_start":36,"line_end":36,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150361,"byte_end":150409,"line_start":37,"line_end":37,"column_start":2,"column_end":50}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150411,"byte_end":150455,"line_start":38,"line_end":38,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150704,"byte_end":150707,"line_start":47,"line_end":47,"column_start":9,"column_end":12},"name":"raw","qualname":"<SecTrieDB>::raw","value":"fn (&self) -> &TrieDB<L>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the underlying raw `TrieDB` struct.\n","sig":null,"attributes":[{"value":"/ Get a reference to the underlying raw `TrieDB` struct.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150637,"byte_end":150695,"line_start":46,"line_end":46,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150823,"byte_end":150830,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"raw_mut","qualname":"<SecTrieDB>::raw_mut","value":"fn (&mut self) -> &mut TrieDB<'db, L>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the underlying raw `TrieDB` struct.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the underlying raw `TrieDB` struct.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150748,"byte_end":150814,"line_start":51,"line_end":51,"column_start":2,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":586},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sectriedbmut","qualname":"::sectriedbmut","value":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":598},{"krate":0,"index":602},{"krate":0,"index":609}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":598},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153090,"byte_end":153102,"line_start":22,"line_end":22,"column_start":12,"column_end":24},"name":"SecTrieDBMut","qualname":"::sectriedbmut::SecTrieDBMut","value":"SecTrieDBMut {  }","parent":null,"children":[{"krate":0,"index":601}],"decl_id":null,"docs":" A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","sig":null,"attributes":[{"value":"/ A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":152862,"byte_end":152961,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":152962,"byte_end":152965,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object. You can use `raw()` to get the backing `TrieDBMut`","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":152966,"byte_end":153066,"line_start":20,"line_end":20,"column_start":1,"column_end":101}},{"value":"/ object.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153067,"byte_end":153078,"line_start":21,"line_end":21,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153407,"byte_end":153410,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<SecTrieDBMut>::new","value":"fn (db: &'db mut dyn HashDB<L::Hash, DBValue>, root: &'db mut TrieHash<L>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153219,"byte_end":153288,"line_start":33,"line_end":33,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153290,"byte_end":153348,"line_start":34,"line_end":34,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153350,"byte_end":153398,"line_start":35,"line_end":35,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153670,"byte_end":153683,"line_start":43,"line_end":43,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<SecTrieDBMut>::from_existing","value":"fn (db: &'db mut dyn HashDB<L::Hash, DBValue>, root: &'db mut TrieHash<L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`.","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153546,"byte_end":153610,"line_start":40,"line_end":40,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153612,"byte_end":153615,"line_start":41,"line_end":41,"column_start":2,"column_end":5}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153617,"byte_end":153661,"line_start":42,"line_end":42,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153912,"byte_end":153914,"line_start":51,"line_end":51,"column_start":9,"column_end":11},"name":"db","qualname":"<SecTrieDBMut>::db","value":"fn (&self) -> &dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153874,"byte_end":153903,"line_start":50,"line_end":50,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":154013,"byte_end":154019,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<SecTrieDBMut>::db_mut","value":"fn (&mut self) -> &mut dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153975,"byte_end":154004,"line_start":53,"line_end":53,"column_start":2,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":620},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"recorder","qualname":"::recorder","value":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":1630},{"krate":0,"index":1649},{"krate":0,"index":1643},{"krate":0,"index":1645},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1635},{"krate":0,"index":1652},{"krate":0,"index":1656},{"krate":0,"index":622},{"krate":0,"index":625}],"decl_id":null,"docs":" Trie query recorder.\n","sig":null,"attributes":[{"value":"! Trie query recorder.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156127,"byte_end":156151,"line_start":15,"line_end":15,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1630},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156300,"byte_end":156306,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"name":"Record","qualname":"::recorder::Record","value":"Record { depth, data, hash }","parent":null,"children":[{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634}],"decl_id":null,"docs":" A record of a visited node.\n","sig":null,"attributes":[{"value":"/ A record of a visited node.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156181,"byte_end":156212,"line_start":19,"line_end":19,"column_start":1,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1632},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156347,"byte_end":156352,"line_start":24,"line_end":24,"column_start":6,"column_end":11},"name":"depth","qualname":"::recorder::Record::depth","value":"u32","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" The depth of this node.\n","sig":null,"attributes":[{"value":"/ The depth of this node.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156314,"byte_end":156341,"line_start":23,"line_end":23,"column_start":2,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1633},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156396,"byte_end":156400,"line_start":27,"line_end":27,"column_start":6,"column_end":10},"name":"data","qualname":"::recorder::Record::data","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" The raw data of the node.\n","sig":null,"attributes":[{"value":"/ The raw data of the node.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156361,"byte_end":156390,"line_start":26,"line_end":26,"column_start":2,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1634},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156444,"byte_end":156448,"line_start":30,"line_end":30,"column_start":6,"column_end":10},"name":"hash","qualname":"::recorder::Record::hash","value":"HO","parent":{"krate":0,"index":1630},"children":[],"decl_id":null,"docs":" The hash of the data.\n","sig":null,"attributes":[{"value":"/ The hash of the data.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156413,"byte_end":156438,"line_start":29,"line_end":29,"column_start":2,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1652},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156552,"byte_end":156560,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"Recorder","qualname":"::recorder::Recorder","value":"Recorder {  }","parent":null,"children":[{"krate":0,"index":1654},{"krate":0,"index":1655}],"decl_id":null,"docs":" Records trie nodes as they pass it.\n","sig":null,"attributes":[{"value":"/ Records trie nodes as they pass it.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156457,"byte_end":156496,"line_start":33,"line_end":33,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156811,"byte_end":156814,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"new","qualname":"<Recorder<HO>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Recorder` which records all given nodes.\n","sig":null,"attributes":[{"value":"/ Create a new `Recorder` which records all given nodes.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156733,"byte_end":156791,"line_start":47,"line_end":47,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156793,"byte_end":156802,"line_start":48,"line_end":48,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156937,"byte_end":156947,"line_start":54,"line_end":54,"column_start":9,"column_end":19},"name":"with_depth","qualname":"<Recorder<HO>>::with_depth","value":"fn (depth: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Recorder` which only records nodes beyond a given depth.\n","sig":null,"attributes":[{"value":"/ Create a `Recorder` which only records nodes beyond a given depth.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156858,"byte_end":156928,"line_start":53,"line_end":53,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":157103,"byte_end":157109,"line_start":62,"line_end":62,"column_start":9,"column_end":15},"name":"record","qualname":"<Recorder<HO>>::record","value":"fn (&mut self, hash: &HO, data: &[u8], depth: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Record a visited node, given its hash, data, and depth.\n","sig":null,"attributes":[{"value":"/ Record a visited node, given its hash, data, and depth.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":157035,"byte_end":157094,"line_start":61,"line_end":61,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":157330,"byte_end":157335,"line_start":73,"line_end":73,"column_start":9,"column_end":14},"name":"drain","qualname":"<Recorder<HO>>::drain","value":"fn (&mut self) -> Vec<Record<HO>>","parent":null,"children":[],"decl_id":null,"docs":" Drain all visited records.\n","sig":null,"attributes":[{"value":"/ Drain all visited records.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":157291,"byte_end":157321,"line_start":72,"line_end":72,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":648},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":161974,"byte_end":161979,"line_start":25,"line_end":25,"column_start":12,"column_end":17},"name":"FatDB","qualname":"::fatdb::FatDB","value":"FatDB {  }","parent":null,"children":[{"krate":0,"index":651}],"decl_id":null,"docs":" A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.\n Additionaly it stores inserted hash-key mappings for later retrieval.","sig":null,"attributes":[{"value":"/ A `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":161743,"byte_end":161834,"line_start":21,"line_end":21,"column_start":1,"column_end":92}},{"value":"/ Additionaly it stores inserted hash-key mappings for later retrieval.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":161835,"byte_end":161908,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":161909,"byte_end":161912,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":161913,"byte_end":161962,"line_start":24,"line_end":24,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":162277,"byte_end":162280,"line_start":39,"line_end":39,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDB>::new","value":"fn (db: &'db dyn HashDBRef<L::Hash, DBValue>, root: &'db TrieHash<L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":162089,"byte_end":162158,"line_start":36,"line_end":36,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":162160,"byte_end":162218,"line_start":37,"line_end":37,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":162220,"byte_end":162268,"line_start":38,"line_end":38,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":162484,"byte_end":162486,"line_start":47,"line_end":47,"column_start":9,"column_end":11},"name":"db","qualname":"<FatDB>::db","value":"fn (&self) -> &dyn HashDBRef<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":162446,"byte_end":162475,"line_start":46,"line_end":46,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":669},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":163286,"byte_end":163299,"line_start":77,"line_end":77,"column_start":12,"column_end":25},"name":"FatDBIterator","qualname":"::fatdb::FatDBIterator","value":"FatDBIterator {  }","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673}],"decl_id":null,"docs":" Itarator over inserted pairs of key values.\n","sig":null,"attributes":[{"value":"/ Itarator over inserted pairs of key values.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":163227,"byte_end":163274,"line_start":76,"line_end":76,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":163497,"byte_end":163500,"line_start":90,"line_end":90,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDBIterator>::new","value":"fn (trie: &'db TrieDB<L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Creates new iterator.\n","sig":null,"attributes":[{"value":"/ Creates new iterator.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":163463,"byte_end":163488,"line_start":89,"line_end":89,"column_start":2,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":702},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":165998,"byte_end":166006,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"FatDBMut","qualname":"::fatdbmut::FatDBMut","value":"FatDBMut {  }","parent":null,"children":[{"krate":0,"index":705}],"decl_id":null,"docs":" A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.\n Additionaly it stores inserted hash-key mappings for later retrieval.","sig":null,"attributes":[{"value":"/ A mutable `Trie` implementation which hashes keys and uses a generic `HashDB` backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":165759,"byte_end":165858,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"/ Additionaly it stores inserted hash-key mappings for later retrieval.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":165859,"byte_end":165932,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":165933,"byte_end":165936,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Use it as a `Trie` or `TrieMut` trait object.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":165937,"byte_end":165986,"line_start":21,"line_end":21,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166310,"byte_end":166313,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<FatDBMut>::new","value":"fn (db: &'db mut dyn HashDB<L::Hash, DBValue>, root: &'db mut TrieHash<L>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and empty `root`\n Initialise to the state entailed by the genesis block.\n This guarantees the trie is built correctly.\n","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and empty `root`","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166122,"byte_end":166191,"line_start":33,"line_end":33,"column_start":2,"column_end":71}},{"value":"/ Initialise to the state entailed by the genesis block.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166193,"byte_end":166251,"line_start":34,"line_end":34,"column_start":2,"column_end":60}},{"value":"/ This guarantees the trie is built correctly.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166253,"byte_end":166301,"line_start":35,"line_end":35,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166569,"byte_end":166582,"line_start":43,"line_end":43,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<FatDBMut>::from_existing","value":"fn (db: &'db mut dyn HashDB<L::Hash, DBValue>, root: &'db mut TrieHash<L>) -> Result<Self, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new trie with the backing database `db` and `root`.","sig":null,"attributes":[{"value":"/ Create a new trie with the backing database `db` and `root`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166445,"byte_end":166509,"line_start":40,"line_end":40,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166511,"byte_end":166514,"line_start":41,"line_end":41,"column_start":2,"column_end":5}},{"value":"/ Returns an error if root does not exist.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166516,"byte_end":166560,"line_start":42,"line_end":42,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166806,"byte_end":166808,"line_start":51,"line_end":51,"column_start":9,"column_end":11},"name":"db","qualname":"<FatDBMut>::db","value":"fn (&self) -> &dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166768,"byte_end":166797,"line_start":50,"line_end":50,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166910,"byte_end":166916,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"name":"db_mut","qualname":"<FatDBMut>::db_mut","value":"fn (&mut self) -> &mut dyn HashDB<L::Hash, DBValue>","parent":null,"children":[],"decl_id":null,"docs":" Get the backing database.\n","sig":null,"attributes":[{"value":"/ Get the backing database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166872,"byte_end":166901,"line_start":55,"line_end":55,"column_start":2,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":176813,"byte_end":176823,"line_start":251,"line_end":251,"column_start":8,"column_end":18},"name":"trie_visit","qualname":"::iter_build::trie_visit","value":"fn <T, I, A, B, F> (input: I, callback: &mut F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Function visiting trie from key value inputs with a `ProccessEncodedNode` callback.\n This is the main entry point of this module.\n Calls to each node occurs ordered by byte key value but with longest keys first (from node to\n branch to root), this differs from standard byte array ordering a bit.\n","sig":null,"attributes":[{"value":"/ Function visiting trie from key value inputs with a `ProccessEncodedNode` callback.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":176496,"byte_end":176583,"line_start":247,"line_end":247,"column_start":1,"column_end":88}},{"value":"/ This is the main entry point of this module.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":176584,"byte_end":176632,"line_start":248,"line_end":248,"column_start":1,"column_end":49}},{"value":"/ Calls to each node occurs ordered by byte key value but with longest keys first (from node to","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":176633,"byte_end":176730,"line_start":249,"line_end":249,"column_start":1,"column_end":98}},{"value":"/ branch to root), this differs from standard byte array ordering a bit.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":176731,"byte_end":176805,"line_start":250,"line_end":250,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":788},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179144,"byte_end":179162,"line_start":313,"line_end":313,"column_start":11,"column_end":29},"name":"ProcessEncodedNode","qualname":"::iter_build::ProcessEncodedNode","value":"ProcessEncodedNode<HO>","parent":null,"children":[{"krate":0,"index":790}],"decl_id":null,"docs":" Visitor trait to implement when using `trie_visit`.\n","sig":null,"attributes":[{"value":"/ Visitor trait to implement when using `trie_visit`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179078,"byte_end":179133,"line_start":312,"line_end":312,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179574,"byte_end":179581,"line_start":321,"line_end":321,"column_start":5,"column_end":12},"name":"process","qualname":"::iter_build::ProcessEncodedNode::process","value":"fn (&mut self, prefix: Prefix, encoded_node: Vec<u8>, is_root: bool) -> ChildReference<HO>","parent":{"krate":0,"index":788},"children":[],"decl_id":null,"docs":" Function call with prefix, encoded value and a boolean indicating if the\n node is the root for each node of the trie.","sig":null,"attributes":[{"value":"/ Function call with prefix, encoded value and a boolean indicating if the","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179170,"byte_end":179246,"line_start":314,"line_end":314,"column_start":2,"column_end":78}},{"value":"/ node is the root for each node of the trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179248,"byte_end":179295,"line_start":315,"line_end":315,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179297,"byte_end":179300,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ Note that the returned value can change depending on implementation,","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179302,"byte_end":179374,"line_start":317,"line_end":317,"column_start":2,"column_end":74}},{"value":"/ but usually it should be the Hash of encoded node.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179376,"byte_end":179430,"line_start":318,"line_end":318,"column_start":2,"column_end":56}},{"value":"/ This is not something direcly related to encoding but is here for","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179432,"byte_end":179501,"line_start":319,"line_end":319,"column_start":2,"column_end":71}},{"value":"/ optimisation purpose (builder hash_db does return this value).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179503,"byte_end":179569,"line_start":320,"line_end":320,"column_start":2,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":791},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179850,"byte_end":179861,"line_start":327,"line_end":327,"column_start":12,"column_end":23},"name":"TrieBuilder","qualname":"::iter_build::TrieBuilder","value":"TrieBuilder { root }","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799}],"decl_id":null,"docs":" Get trie root and insert visited node in a hash_db.\n As for all `ProcessEncodedNode` implementation, it\n is only for full trie parsing (not existing trie).\n","sig":null,"attributes":[{"value":"/ Get trie root and insert visited node in a hash_db.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179673,"byte_end":179728,"line_start":324,"line_end":324,"column_start":1,"column_end":56}},{"value":"/ As for all `ProcessEncodedNode` implementation, it","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179729,"byte_end":179783,"line_start":325,"line_end":325,"column_start":1,"column_end":55}},{"value":"/ is only for full trie parsing (not existing trie).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179784,"byte_end":179838,"line_start":326,"line_end":326,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":798},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179904,"byte_end":179908,"line_start":329,"line_end":329,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieBuilder::root","value":"std::option::Option<HO>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":180015,"byte_end":180018,"line_start":334,"line_end":334,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieBuilder>::new","value":"fn (db: &'a mut DB) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":813},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":180807,"byte_end":180815,"line_start":363,"line_end":363,"column_start":12,"column_end":20},"name":"TrieRoot","qualname":"::iter_build::TrieRoot","value":"TrieRoot { root }","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":817}],"decl_id":null,"docs":" Calculate the trie root of the trie.\n","sig":null,"attributes":[{"value":"/ Calculate the trie root of the trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":180755,"byte_end":180795,"line_start":362,"line_end":362,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":816},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":180855,"byte_end":180859,"line_start":365,"line_end":365,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRoot::root","value":"std::option::Option<HO>","parent":{"krate":0,"index":813},"children":[],"decl_id":null,"docs":" The resulting root.\n","sig":null,"attributes":[{"value":"/ The resulting root.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":180826,"byte_end":180849,"line_start":364,"line_end":364,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":825},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":181667,"byte_end":181683,"line_start":398,"line_end":398,"column_start":12,"column_end":28},"name":"TrieRootUnhashed","qualname":"::iter_build::TrieRootUnhashed","value":"TrieRootUnhashed { root }","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828}],"decl_id":null,"docs":" Get the trie root node encoding.\n","sig":null,"attributes":[{"value":"/ Get the trie root node encoding.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":181619,"byte_end":181655,"line_start":397,"line_end":397,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":827},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":181727,"byte_end":181731,"line_start":400,"line_end":400,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRootUnhashed::root","value":"std::option::Option<std::vec::Vec<u8>>","parent":{"krate":0,"index":825},"children":[],"decl_id":null,"docs":" The resulting encoded root.\n","sig":null,"attributes":[{"value":"/ The resulting encoded root.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":181690,"byte_end":181721,"line_start":399,"line_end":399,"column_start":2,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":832},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":182000,"byte_end":182013,"line_start":413,"line_end":413,"column_start":12,"column_end":25},"name":"TrieRootPrint","qualname":"::iter_build::TrieRootPrint","value":"TrieRootPrint { root }","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836}],"decl_id":null,"docs":" Calculate the trie root of the trie.\n Print a debug trace.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":181899,"byte_end":181922,"line_start":410,"line_end":410,"column_start":1,"column_end":24}},{"value":"/ Calculate the trie root of the trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":181923,"byte_end":181963,"line_start":411,"line_end":411,"column_start":1,"column_end":41}},{"value":"/ Print a debug trace.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":181964,"byte_end":181988,"line_start":412,"line_end":412,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":835},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":182053,"byte_end":182057,"line_start":415,"line_end":415,"column_start":6,"column_end":10},"name":"root","qualname":"::iter_build::TrieRootPrint::root","value":"std::option::Option<HO>","parent":{"krate":0,"index":832},"children":[],"decl_id":null,"docs":" The resulting root.\n","sig":null,"attributes":[{"value":"/ The resulting root.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":182024,"byte_end":182047,"line_start":414,"line_end":414,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":874},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":194707,"byte_end":194725,"line_start":58,"line_end":58,"column_start":12,"column_end":30},"name":"TrieDBNodeIterator","qualname":"::iterator::TrieDBNodeIterator","value":"TrieDBNodeIterator {  }","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879}],"decl_id":null,"docs":" Iterator for going through all nodes in the trie in pre-order traversal order.\n","sig":null,"attributes":[{"value":"/ Iterator for going through all nodes in the trie in pre-order traversal order.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":194613,"byte_end":194695,"line_start":57,"line_end":57,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":194916,"byte_end":194919,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieDBNodeIterator>::new","value":"fn (db: &'a TrieDB<L>) -> Result<TrieDBNodeIterator<'a, L>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator.\n","sig":null,"attributes":[{"value":"/ Create a new iterator.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":194881,"byte_end":194907,"line_start":65,"line_end":65,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":199672,"byte_end":199678,"line_start":234,"line_end":234,"column_start":9,"column_end":15},"name":"prefix","qualname":"<TrieDBNodeIterator>::prefix","value":"fn (&mut self, prefix: &[u8]) -> Result<(), TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator into a prefix, no value out of the prefix will be accessed\n or returned after this operation.\n","sig":null,"attributes":[{"value":"/ Advance the iterator into a prefix, no value out of the prefix will be accessed","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":199541,"byte_end":199624,"line_start":232,"line_end":232,"column_start":2,"column_end":85}},{"value":"/ or returned after this operation.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":199626,"byte_end":199663,"line_start":233,"line_end":233,"column_start":2,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":929},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219038,"byte_end":219044,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"Lookup","qualname":"::lookup::Lookup","value":"Lookup { db, query, hash }","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935}],"decl_id":null,"docs":" Trie lookup helper object.\n","sig":null,"attributes":[{"value":"/ Trie lookup helper object.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":218996,"byte_end":219026,"line_start":24,"line_end":24,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":933},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219119,"byte_end":219121,"line_start":27,"line_end":27,"column_start":6,"column_end":8},"name":"db","qualname":"::lookup::Lookup::db","value":"&'a (dyn hash_db::HashDBRef<<L as TrieLayout>::Hash, std::vec::Vec<u8>> + 'a)","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" database to query from.\n","sig":null,"attributes":[{"value":"/ database to query from.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219086,"byte_end":219113,"line_start":26,"line_end":26,"column_start":2,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":934},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219219,"byte_end":219224,"line_start":29,"line_end":29,"column_start":6,"column_end":11},"name":"query","qualname":"::lookup::Lookup::query","value":"Q","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Query object to record nodes and transform data.\n","sig":null,"attributes":[{"value":"/ Query object to record nodes and transform data.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219161,"byte_end":219213,"line_start":28,"line_end":28,"column_start":2,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":935},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219256,"byte_end":219260,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"name":"hash","qualname":"::lookup::Lookup::hash","value":"<<L as TrieLayout>::Hash as hash_db::Hasher>::Out","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Hash to start at\n","sig":null,"attributes":[{"value":"/ Hash to start at","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219230,"byte_end":219250,"line_start":30,"line_end":30,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219477,"byte_end":219484,"line_start":41,"line_end":41,"column_start":9,"column_end":16},"name":"look_up","qualname":"<Lookup>::look_up","value":"fn (mut self, key: NibbleSlice) -> Result<Option<Q::Item>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Look up the given key. If the value is found, it will be passed to the given\n function to decode or copy.\n","sig":null,"attributes":[{"value":"/ Look up the given key. If the value is found, it will be passed to the given","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219355,"byte_end":219435,"line_start":39,"line_end":39,"column_start":2,"column_end":82}},{"value":"/ function to decode or copy.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219437,"byte_end":219468,"line_start":40,"line_end":40,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228372,"byte_end":228375,"line_start":31,"line_end":31,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleVec>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a new `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Make a new `NibbleVec`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228336,"byte_end":228363,"line_start":30,"line_end":30,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228513,"byte_end":228516,"line_start":40,"line_end":40,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleVec>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Length of the `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Length of the `NibbleVec`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228455,"byte_end":228485,"line_start":38,"line_end":38,"column_start":2,"column_end":32}},{"value":"inline(always)","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228487,"byte_end":228504,"line_start":39,"line_end":39,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228606,"byte_end":228614,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<NibbleVec>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retrurns true if `NibbleVec` has zero length.\n","sig":null,"attributes":[{"value":"/ Retrurns true if `NibbleVec` has zero length.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228548,"byte_end":228597,"line_start":42,"line_end":42,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228716,"byte_end":228718,"line_start":47,"line_end":47,"column_start":9,"column_end":11},"name":"at","qualname":"<NibbleVec>::at","value":"fn (&self, idx: usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Try to get the nibble at the given offset.\n","sig":null,"attributes":[{"value":"/ Try to get the nibble at the given offset.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228650,"byte_end":228696,"line_start":45,"line_end":45,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228698,"byte_end":228707,"line_start":46,"line_end":46,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228966,"byte_end":228970,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"name":"push","qualname":"<NibbleVec>::push","value":"fn (&mut self, nibble: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push a nibble onto the `NibbleVec`. Ignores the high 4 bits.\n","sig":null,"attributes":[{"value":"/ Push a nibble onto the `NibbleVec`. Ignores the high 4 bits.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228893,"byte_end":228957,"line_start":53,"line_end":53,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":229408,"byte_end":229411,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"name":"pop","qualname":"<NibbleVec>::pop","value":"fn (&mut self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Try to pop a nibble off the `NibbleVec`. Fails if len == 0.\n","sig":null,"attributes":[{"value":"/ Try to pop a nibble off the `NibbleVec`. Fails if len == 0.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":229336,"byte_end":229399,"line_start":67,"line_end":67,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":229828,"byte_end":229838,"line_start":82,"line_end":82,"column_start":9,"column_end":19},"name":"drop_lasts","qualname":"<NibbleVec>::drop_lasts","value":"fn (&mut self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove then n last nibbles in a faster way than popping n times.\n","sig":null,"attributes":[{"value":"/ Remove then n last nibbles in a faster way than popping n times.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":229751,"byte_end":229819,"line_start":81,"line_end":81,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":230399,"byte_end":230408,"line_start":101,"line_end":101,"column_start":9,"column_end":18},"name":"as_prefix","qualname":"<NibbleVec>::as_prefix","value":"fn (&self) -> Prefix","parent":null,"children":[],"decl_id":null,"docs":" Get `Prefix` representation of this `NibbleVec`.\n","sig":null,"attributes":[{"value":"/ Get `Prefix` representation of this `NibbleVec`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":230338,"byte_end":230390,"line_start":100,"line_end":100,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":230763,"byte_end":230769,"line_start":112,"line_end":112,"column_start":9,"column_end":15},"name":"append","qualname":"<NibbleVec>::append","value":"fn (&mut self, v: &NibbleVec) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Append another `NibbleVec`. Can be slow (alignement of second vec).\n","sig":null,"attributes":[{"value":"/ Append another `NibbleVec`. Can be slow (alignement of second vec).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":230683,"byte_end":230754,"line_start":111,"line_end":111,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":231561,"byte_end":231575,"line_start":135,"line_end":135,"column_start":9,"column_end":23},"name":"append_partial","qualname":"<NibbleVec>::append_partial","value":"fn (&mut self, (start_byte, sl): Partial) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Append a `Partial`. Can be slow (alignement of partial).\n","sig":null,"attributes":[{"value":"/ Append a `Partial`. Can be slow (alignement of partial).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":231492,"byte_end":231552,"line_start":134,"line_end":134,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":233034,"byte_end":233039,"line_start":188,"line_end":188,"column_start":9,"column_end":14},"name":"inner","qualname":"<NibbleVec>::inner","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying byte slice.\n","sig":null,"attributes":[{"value":"/ Get the underlying byte slice.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":232991,"byte_end":233025,"line_start":187,"line_end":187,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":233099,"byte_end":233104,"line_start":193,"line_end":193,"column_start":9,"column_end":14},"name":"clear","qualname":"<NibbleVec>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" clear\n","sig":null,"attributes":[{"value":"/ clear","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":233081,"byte_end":233090,"line_start":192,"line_end":192,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":233258,"byte_end":233272,"line_start":199,"line_end":199,"column_start":9,"column_end":23},"name":"as_nibbleslice","qualname":"<NibbleVec>::as_nibbleslice","value":"fn (&self) -> Option<NibbleSlice>","parent":null,"children":[],"decl_id":null,"docs":" Try to treat this `NibbleVec` as a `NibbleSlice`. Works only if there is no padding.\n","sig":null,"attributes":[{"value":"/ Try to treat this `NibbleVec` as a `NibbleSlice`. Works only if there is no padding.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":233161,"byte_end":233249,"line_start":198,"line_end":198,"column_start":2,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":233494,"byte_end":233505,"line_start":208,"line_end":208,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<NibbleVec>::starts_with","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Do we start with the same nibbles as the whole of `them`?\n","sig":null,"attributes":[{"value":"/ Do we start with the same nibbles as the whole of `them`?","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":233424,"byte_end":233485,"line_start":207,"line_end":207,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237156,"byte_end":237159,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"new","qualname":"<NibbleSlice>::new","value":"fn (data: &'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new nibble slice with the given byte-slice.\n","sig":null,"attributes":[{"value":"/ Create a new nibble slice with the given byte-slice.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237091,"byte_end":237147,"line_start":35,"line_end":35,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237308,"byte_end":237318,"line_start":39,"line_end":39,"column_start":9,"column_end":19},"name":"new_offset","qualname":"<NibbleSlice>::new_offset","value":"fn (data: &'a [u8], offset: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new nibble slice with the given byte-slice with a nibble offset.\n","sig":null,"attributes":[{"value":"/ Create a new nibble slice with the given byte-slice with a nibble offset.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237222,"byte_end":237299,"line_start":38,"line_end":38,"column_start":2,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237551,"byte_end":237555,"line_start":51,"line_end":51,"column_start":9,"column_end":13},"name":"iter","qualname":"<NibbleSlice>::iter","value":"fn (&'a self) -> NibbleSliceIterator<'a>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator for the series of nibbles.\n","sig":null,"attributes":[{"value":"/ Get an iterator for the series of nibbles.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237496,"byte_end":237542,"line_start":50,"line_end":50,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237687,"byte_end":237698,"line_start":56,"line_end":56,"column_start":9,"column_end":20},"name":"from_stored","qualname":"<NibbleSlice>::from_stored","value":"fn (i: &NodeKey) -> NibbleSlice","parent":null,"children":[],"decl_id":null,"docs":" Get nibble slice from a `NodeKey`.\n","sig":null,"attributes":[{"value":"/ Get nibble slice from a `NodeKey`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237640,"byte_end":237678,"line_start":55,"line_end":55,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237856,"byte_end":237865,"line_start":61,"line_end":61,"column_start":9,"column_end":18},"name":"to_stored","qualname":"<NibbleSlice>::to_stored","value":"fn (&self) -> NodeKey","parent":null,"children":[],"decl_id":null,"docs":" Helper function to create a owned `NodeKey` from this `NibbleSlice`.\n","sig":null,"attributes":[{"value":"/ Helper function to create a owned `NodeKey` from this `NibbleSlice`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237775,"byte_end":237847,"line_start":60,"line_end":60,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":238262,"byte_end":238277,"line_start":71,"line_end":71,"column_start":9,"column_end":24},"name":"to_stored_range","qualname":"<NibbleSlice>::to_stored_range","value":"fn (&self, nb: usize) -> NodeKey","parent":null,"children":[],"decl_id":null,"docs":" Helper function to create a owned `NodeKey` from this `NibbleSlice`,\n and for a given number of nibble.\n Warning this method can be slow (number of nibble does not align the\n original padding).\n","sig":null,"attributes":[{"value":"/ Helper function to create a owned `NodeKey` from this `NibbleSlice`,","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":238044,"byte_end":238116,"line_start":67,"line_end":67,"column_start":2,"column_end":74}},{"value":"/ and for a given number of nibble.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":238118,"byte_end":238155,"line_start":68,"line_end":68,"column_start":2,"column_end":39}},{"value":"/ Warning this method can be slow (number of nibble does not align the","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":238157,"byte_end":238229,"line_start":69,"line_end":69,"column_start":2,"column_end":74}},{"value":"/ original padding).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":238231,"byte_end":238253,"line_start":70,"line_end":70,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239175,"byte_end":239183,"line_start":96,"line_end":96,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<NibbleSlice>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the slice contains no nibbles.\n","sig":null,"attributes":[{"value":"/ Return true if the slice contains no nibbles.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239117,"byte_end":239166,"line_start":95,"line_end":95,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239298,"byte_end":239301,"line_start":100,"line_end":100,"column_start":9,"column_end":12},"name":"len","qualname":"<NibbleSlice>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length (in nibbles, naturally) of this slice.\n","sig":null,"attributes":[{"value":"/ Get the length (in nibbles, naturally) of this slice.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239221,"byte_end":239278,"line_start":98,"line_end":98,"column_start":2,"column_end":59}},{"value":"inline","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239280,"byte_end":239289,"line_start":99,"line_end":99,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239447,"byte_end":239449,"line_start":104,"line_end":104,"column_start":9,"column_end":11},"name":"at","qualname":"<NibbleSlice>::at","value":"fn (&self, i: usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the nibble at position `i`.\n","sig":null,"attributes":[{"value":"/ Get the nibble at position `i`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239384,"byte_end":239419,"line_start":102,"line_end":102,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239421,"byte_end":239438,"line_start":103,"line_end":103,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239607,"byte_end":239610,"line_start":109,"line_end":109,"column_start":9,"column_end":12},"name":"mid","qualname":"<NibbleSlice>::mid","value":"fn (&self, i: usize) -> NibbleSlice<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return object which represents a view on to this slice (further) offset by `i` nibbles.\n","sig":null,"attributes":[{"value":"/ Return object which represents a view on to this slice (further) offset by `i` nibbles.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239507,"byte_end":239598,"line_start":108,"line_end":108,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239780,"byte_end":239787,"line_start":117,"line_end":117,"column_start":9,"column_end":16},"name":"advance","qualname":"<NibbleSlice>::advance","value":"fn (&mut self, i: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Advance the view on the slice by `i` nibbles.\n","sig":null,"attributes":[{"value":"/ Advance the view on the slice by `i` nibbles.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239722,"byte_end":239771,"line_start":116,"line_end":116,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239935,"byte_end":239939,"line_start":123,"line_end":123,"column_start":9,"column_end":13},"name":"back","qualname":"<NibbleSlice>::back","value":"fn (&self, i: usize) -> NibbleSlice<'a>","parent":null,"children":[],"decl_id":null,"docs":" Move back to a previously valid fix offset position.\n","sig":null,"attributes":[{"value":"/ Move back to a previously valid fix offset position.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":239870,"byte_end":239926,"line_start":122,"line_end":122,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":240107,"byte_end":240118,"line_start":131,"line_end":131,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<NibbleSlice>::starts_with","value":"fn (&self, them: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Do we start with the same nibbles as the whole of `them`?\n","sig":null,"attributes":[{"value":"/ Do we start with the same nibbles as the whole of `them`?","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":240037,"byte_end":240098,"line_start":130,"line_end":130,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":240275,"byte_end":240288,"line_start":134,"line_end":134,"column_start":9,"column_end":22},"name":"common_prefix","qualname":"<NibbleSlice>::common_prefix","value":"fn (&self, them: &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" How many of the same nibbles at the beginning do we match with `them`?\n","sig":null,"attributes":[{"value":"/ How many of the same nibbles at the beginning do we match with `them`?","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":240192,"byte_end":240266,"line_start":133,"line_end":133,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":240567,"byte_end":240572,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"name":"right","qualname":"<NibbleSlice>::right","value":"fn (&'a self) -> Partial","parent":null,"children":[],"decl_id":null,"docs":" Return `Partial` representation of this slice:\n first encoded byte and following slice.\n","sig":null,"attributes":[{"value":"/ Return `Partial` representation of this slice:","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":240463,"byte_end":240513,"line_start":144,"line_end":144,"column_start":2,"column_end":52}},{"value":"/ first encoded byte and following slice.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":240515,"byte_end":240558,"line_start":145,"line_end":145,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":240926,"byte_end":240936,"line_start":157,"line_end":157,"column_start":9,"column_end":19},"name":"right_iter","qualname":"<NibbleSlice>::right_iter","value":"fn (&'a self) -> impl Iterator<Item = u8> + 'a","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over `Partial` bytes representation.\n","sig":null,"attributes":[{"value":"/ Return an iterator over `Partial` bytes representation.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":240858,"byte_end":240917,"line_start":156,"line_end":156,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":241409,"byte_end":241425,"line_start":177,"line_end":177,"column_start":9,"column_end":25},"name":"right_range_iter","qualname":"<NibbleSlice>::right_range_iter","value":"fn (&'a self, to: usize) -> impl Iterator<Item = u8> + 'a","parent":null,"children":[],"decl_id":null,"docs":" Return `Partial` bytes iterator over a range of byte..\n Warning can be slow when unaligned (similar to `to_stored_range`).\n","sig":null,"attributes":[{"value":"/ Return `Partial` bytes iterator over a range of byte..","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":241270,"byte_end":241328,"line_start":175,"line_end":175,"column_start":2,"column_end":60}},{"value":"/ Warning can be slow when unaligned (similar to `to_stored_range`).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":241330,"byte_end":241400,"line_start":176,"line_end":176,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":242547,"byte_end":242551,"line_start":219,"line_end":219,"column_start":9,"column_end":13},"name":"left","qualname":"<NibbleSlice>::left","value":"fn (&'a self) -> Prefix","parent":null,"children":[],"decl_id":null,"docs":" Return left portion of `NibbleSlice`, if the slice\n originates from a full key it will be the `Prefix of\n the node`.\n","sig":null,"attributes":[{"value":"/ Return left portion of `NibbleSlice`, if the slice","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":242410,"byte_end":242464,"line_start":216,"line_end":216,"column_start":2,"column_end":56}},{"value":"/ originates from a full key it will be the `Prefix of","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":242466,"byte_end":242522,"line_start":217,"line_end":217,"column_start":2,"column_end":58}},{"value":"/ the node`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":242524,"byte_end":242538,"line_start":218,"line_end":218,"column_start":2,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":242897,"byte_end":242907,"line_start":230,"line_end":230,"column_start":9,"column_end":19},"name":"left_owned","qualname":"<NibbleSlice>::left_owned","value":"fn (&'a self) -> (BackingByteVec, Option<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Owned version of a `Prefix` from a `left` method call.\n","sig":null,"attributes":[{"value":"/ Owned version of a `Prefix` from a `left` method call.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":242830,"byte_end":242888,"line_start":229,"line_end":229,"column_start":2,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":1078},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":222833,"byte_end":222843,"line_start":27,"line_end":27,"column_start":9,"column_end":19},"name":"nibble_ops","qualname":"::nibble::nibble_ops","value":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","parent":null,"children":[{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095}],"decl_id":null,"docs":" Utility methods to work on radix 16 nibble.\n","sig":null,"attributes":[{"value":"/ Utility methods to work on radix 16 nibble.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":222777,"byte_end":222824,"line_start":26,"line_end":26,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1080},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":222907,"byte_end":222921,"line_start":31,"line_end":31,"column_start":12,"column_end":26},"name":"BIT_PER_NIBBLE","qualname":"::nibble::nibble_ops::BIT_PER_NIBBLE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Single nibble length in bit.\n","sig":null,"attributes":[{"value":"/ Single nibble length in bit.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":222863,"byte_end":222895,"line_start":30,"line_end":30,"column_start":2,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":1081},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":222978,"byte_end":222993,"line_start":33,"line_end":33,"column_start":12,"column_end":27},"name":"NIBBLE_PER_BYTE","qualname":"::nibble::nibble_ops::NIBBLE_PER_BYTE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of nibble per byte.\n","sig":null,"attributes":[{"value":"/ Number of nibble per byte.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":222936,"byte_end":222966,"line_start":32,"line_end":32,"column_start":2,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":1082},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223066,"byte_end":223079,"line_start":35,"line_end":35,"column_start":12,"column_end":25},"name":"NIBBLE_LENGTH","qualname":"::nibble::nibble_ops::NIBBLE_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Number of child for a branch (trie radix).\n","sig":null,"attributes":[{"value":"/ Number of child for a branch (trie radix).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223008,"byte_end":223054,"line_start":34,"line_end":34,"column_start":2,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1083},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223132,"byte_end":223147,"line_start":37,"line_end":37,"column_start":12,"column_end":27},"name":"PADDING_BITMASK","qualname":"::nibble::nibble_ops::PADDING_BITMASK","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Nibble (half a byte).\n","sig":null,"attributes":[{"value":"/ Nibble (half a byte).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223095,"byte_end":223120,"line_start":36,"line_end":36,"column_start":2,"column_end":27}}]},{"kind":"Const","id":{"krate":0,"index":1084},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223192,"byte_end":223211,"line_start":39,"line_end":39,"column_start":12,"column_end":31},"name":"CONTENT_HEADER_SIZE","qualname":"::nibble::nibble_ops::CONTENT_HEADER_SIZE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Size of header.\n","sig":null,"attributes":[{"value":"/ Size of header.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223161,"byte_end":223180,"line_start":38,"line_end":38,"column_start":2,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":1085},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223288,"byte_end":223296,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"pad_left","qualname":"::nibble::nibble_ops::pad_left","value":"fn (b: u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Mask a byte, keeping left nibble.\n","sig":null,"attributes":[{"value":"/ Mask a byte, keeping left nibble.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223223,"byte_end":223260,"line_start":41,"line_end":41,"column_start":2,"column_end":39}},{"value":"inline(always)","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223262,"byte_end":223279,"line_start":42,"line_end":42,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1086},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223404,"byte_end":223413,"line_start":49,"line_end":49,"column_start":9,"column_end":18},"name":"pad_right","qualname":"::nibble::nibble_ops::pad_right","value":"fn (b: u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Mask a byte, keeping right byte.\n","sig":null,"attributes":[{"value":"/ Mask a byte, keeping right byte.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223340,"byte_end":223376,"line_start":47,"line_end":47,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223378,"byte_end":223395,"line_start":48,"line_end":48,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1087},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223535,"byte_end":223542,"line_start":55,"line_end":55,"column_start":9,"column_end":16},"name":"at_left","qualname":"::nibble::nibble_ops::at_left","value":"fn (ix: u8, b: u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index of a byte.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index of a byte.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223456,"byte_end":223507,"line_start":53,"line_end":53,"column_start":2,"column_end":53}},{"value":"inline(always)","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223509,"byte_end":223526,"line_start":54,"line_end":54,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1088},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223740,"byte_end":223754,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"name":"left_nibble_at","qualname":"::nibble::nibble_ops::left_nibble_at","value":"fn (v1: &[u8], ix: usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index in a left aligned array.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index in a left aligned array.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223647,"byte_end":223712,"line_start":63,"line_end":63,"column_start":2,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223714,"byte_end":223731,"line_start":64,"line_end":64,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1089},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223954,"byte_end":223956,"line_start":74,"line_end":74,"column_start":9,"column_end":11},"name":"at","qualname":"::nibble::nibble_ops::at","value":"fn (s: &NibbleSlice, i: usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get u8 nibble value at a given index in a `NibbleSlice`.\n","sig":null,"attributes":[{"value":"/ Get u8 nibble value at a given index in a `NibbleSlice`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223866,"byte_end":223926,"line_start":72,"line_end":72,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":223928,"byte_end":223945,"line_start":73,"line_end":73,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1090},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224213,"byte_end":224225,"line_start":82,"line_end":82,"column_start":9,"column_end":21},"name":"push_at_left","qualname":"::nibble::nibble_ops::push_at_left","value":"fn (ix: u8, v: u8, into: u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Push u8 nibble value at a given index into an existing byte.\n","sig":null,"attributes":[{"value":"/ Push u8 nibble value at a given index into an existing byte.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224121,"byte_end":224185,"line_start":80,"line_end":80,"column_start":2,"column_end":66}},{"value":"inline(always)","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224187,"byte_end":224204,"line_start":81,"line_end":81,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1091},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224421,"byte_end":224435,"line_start":92,"line_end":92,"column_start":9,"column_end":23},"name":"number_padding","qualname":"::nibble::nibble_ops::number_padding","value":"fn (i: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the number of needed padding a array of nibble length `i`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224329,"byte_end":224338,"line_start":90,"line_end":90,"column_start":2,"column_end":11}},{"value":"/ Calculate the number of needed padding a array of nibble length `i`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224340,"byte_end":224412,"line_start":91,"line_end":91,"column_start":2,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":1092},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224614,"byte_end":224626,"line_start":99,"line_end":99,"column_start":12,"column_end":24},"name":"SPLIT_SHIFTS","qualname":"::nibble::nibble_ops::SPLIT_SHIFTS","value":"(usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" The nibble shifts needed to align.\n We use two value, one is a left shift and\n the other is a right shift.\n","sig":null,"attributes":[{"value":"/ The nibble shifts needed to align.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224484,"byte_end":224522,"line_start":96,"line_end":96,"column_start":2,"column_end":40}},{"value":"/ We use two value, one is a left shift and","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224524,"byte_end":224569,"line_start":97,"line_end":97,"column_start":2,"column_end":47}},{"value":"/ the other is a right shift.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224571,"byte_end":224602,"line_start":98,"line_end":98,"column_start":2,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":1093},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224744,"byte_end":224757,"line_start":102,"line_end":102,"column_start":9,"column_end":22},"name":"biggest_depth","qualname":"::nibble::nibble_ops::biggest_depth","value":"fn (v1: &[u8], v2: &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Count the biggest common depth between two left aligned packed nibble slice.\n","sig":null,"attributes":[{"value":"/ Count the biggest common depth between two left aligned packed nibble slice.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":224655,"byte_end":224735,"line_start":101,"line_end":101,"column_start":2,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":1094},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":225101,"byte_end":225112,"line_start":114,"line_end":114,"column_start":9,"column_end":20},"name":"left_common","qualname":"::nibble::nibble_ops::left_common","value":"fn (a: u8, b: u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Calculate the number of common nibble between two left aligned bytes.\n","sig":null,"attributes":[{"value":"/ Calculate the number of common nibble between two left aligned bytes.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":225000,"byte_end":225073,"line_start":112,"line_end":112,"column_start":2,"column_end":75}},{"value":"inline(always)","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":225075,"byte_end":225092,"line_start":113,"line_end":113,"column_start":2,"column_end":19}}]},{"kind":"Function","id":{"krate":0,"index":1095},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":225397,"byte_end":225406,"line_start":127,"line_end":127,"column_start":9,"column_end":18},"name":"shift_key","qualname":"::nibble::nibble_ops::shift_key","value":"fn (key: &mut NodeKey, offset: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Shifts right aligned key to add a given left offset.\n Resulting in possibly padding at both left and right\n (example usage when combining two keys).\n","sig":null,"attributes":[{"value":"/ Shifts right aligned key to add a given left offset.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":225228,"byte_end":225284,"line_start":124,"line_end":124,"column_start":2,"column_end":58}},{"value":"/ Resulting in possibly padding at both left and right","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":225286,"byte_end":225342,"line_start":125,"line_end":125,"column_start":2,"column_end":58}},{"value":"/ (example usage when combining two keys).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":225344,"byte_end":225388,"line_start":126,"line_end":126,"column_start":2,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1700},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226363,"byte_end":226372,"line_start":159,"line_end":159,"column_start":12,"column_end":21},"name":"NibbleVec","qualname":"::nibble::NibbleVec","value":"NibbleVec {  }","parent":null,"children":[{"krate":0,"index":1701},{"krate":0,"index":1702}],"decl_id":null,"docs":" Owning, nibble-oriented byte vector. Counterpart to `NibbleSlice`.\n Nibbles are always left aligned, so making a `NibbleVec` from\n a `NibbleSlice` can get costy.\n","sig":null,"attributes":[{"value":"/ Owning, nibble-oriented byte vector. Counterpart to `NibbleSlice`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226104,"byte_end":226174,"line_start":154,"line_end":154,"column_start":1,"column_end":71}},{"value":"/ Nibbles are always left aligned, so making a `NibbleVec` from","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226175,"byte_end":226240,"line_start":155,"line_end":155,"column_start":1,"column_end":66}},{"value":"/ a `NibbleSlice` can get costy.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226241,"byte_end":226275,"line_start":156,"line_end":156,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1714},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":227266,"byte_end":227277,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"NibbleSlice","qualname":"::nibble::NibbleSlice","value":"NibbleSlice {  }","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717}],"decl_id":null,"docs":" Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.","sig":null,"attributes":[{"value":"/ Nibble-orientated view onto byte-slice, allowing nibble-precision offsets.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226415,"byte_end":226493,"line_start":164,"line_end":164,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226494,"byte_end":226497,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ This is an immutable struct. No operations actually change it.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226498,"byte_end":226564,"line_start":166,"line_end":166,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226565,"byte_end":226568,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226569,"byte_end":226582,"line_start":168,"line_end":168,"column_start":1,"column_end":14}},{"value":"/ ```snippet","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226583,"byte_end":226597,"line_start":169,"line_end":169,"column_start":1,"column_end":15}},{"value":"/ use patricia_trie::nibbleslice::NibbleSlice;","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226598,"byte_end":226646,"line_start":170,"line_end":170,"column_start":1,"column_end":49}},{"value":"/ fn main() {","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226647,"byte_end":226662,"line_start":171,"line_end":171,"column_start":1,"column_end":16}},{"value":"/   let d1 = &[0x01u8, 0x23, 0x45];","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226663,"byte_end":226700,"line_start":172,"line_end":172,"column_start":1,"column_end":38}},{"value":"/   let d2 = &[0x34u8, 0x50, 0x12];","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226701,"byte_end":226738,"line_start":173,"line_end":173,"column_start":1,"column_end":38}},{"value":"/   let d3 = &[0x00u8, 0x12];","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226739,"byte_end":226770,"line_start":174,"line_end":174,"column_start":1,"column_end":32}},{"value":"/   let n1 = NibbleSlice::new(d1);\t\t\t// 0,1,2,3,4,5","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226771,"byte_end":226824,"line_start":175,"line_end":175,"column_start":1,"column_end":54}},{"value":"/   let n2 = NibbleSlice::new(d2);\t\t\t// 3,4,5,0,1,2","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226825,"byte_end":226878,"line_start":176,"line_end":176,"column_start":1,"column_end":54}},{"value":"/   let n3 = NibbleSlice::new_offset(d3, 1);\t// 0,1,2","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226879,"byte_end":226934,"line_start":177,"line_end":177,"column_start":1,"column_end":56}},{"value":"/   assert!(n1 > n3);\t\t\t\t\t\t\t// 0,1,2,... > 0,1,2","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226935,"byte_end":226985,"line_start":178,"line_end":178,"column_start":1,"column_end":51}},{"value":"/   assert!(n1 < n2);\t\t\t\t\t\t\t// 0,... < 3,...","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":226986,"byte_end":227032,"line_start":179,"line_end":179,"column_start":1,"column_end":47}},{"value":"/   assert!(n2.mid(3) == n3);\t\t\t\t\t// 0,1,2 == 0,1,2","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":227033,"byte_end":227086,"line_start":180,"line_end":180,"column_start":1,"column_end":54}},{"value":"/   assert!(n1.starts_with(&n3));","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":227087,"byte_end":227122,"line_start":181,"line_end":181,"column_start":1,"column_end":36}},{"value":"/   assert_eq!(n1.common_prefix(&n3), 3);","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":227123,"byte_end":227166,"line_start":182,"line_end":182,"column_start":1,"column_end":44}},{"value":"/   assert_eq!(n2.mid(3).common_prefix(&n1), 3);","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":227167,"byte_end":227217,"line_start":183,"line_end":183,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":227218,"byte_end":227223,"line_start":184,"line_end":184,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":227224,"byte_end":227231,"line_start":185,"line_end":185,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1100},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":227369,"byte_end":227388,"line_start":193,"line_end":193,"column_start":12,"column_end":31},"name":"NibbleSliceIterator","qualname":"::nibble::NibbleSliceIterator","value":"NibbleSliceIterator {  }","parent":null,"children":[{"krate":0,"index":1102},{"krate":0,"index":1103}],"decl_id":null,"docs":" Iterator type for a nibble slice.\n","sig":null,"attributes":[{"value":"/ Iterator type for a nibble slice.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/mod.rs","byte_start":227320,"byte_end":227357,"line_start":192,"line_end":192,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1115},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":254953,"byte_end":254960,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"Partial","qualname":"::node_codec::Partial","value":"((u8, u8), &'a [u8])","parent":null,"children":[],"decl_id":null,"docs":" Representation of a nible slice (right aligned).\n It contains a right aligned padded first byte (first pair element is the number of nibbles\n (0 to max nb nibble - 1), second pair element is the padded nibble), and a slice over\n the remaining bytes.\n","sig":null,"attributes":[{"value":"/ Representation of a nible slice (right aligned).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":254681,"byte_end":254733,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/ It contains a right aligned padded first byte (first pair element is the number of nibbles","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":254734,"byte_end":254828,"line_start":26,"line_end":26,"column_start":1,"column_end":95}},{"value":"/ (0 to max nb nibble - 1), second pair element is the padded nibble), and a slice over","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":254829,"byte_end":254918,"line_start":27,"line_end":27,"column_start":1,"column_end":90}},{"value":"/ the remaining bytes.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":254919,"byte_end":254943,"line_start":28,"line_end":28,"column_start":1,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":1117},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255042,"byte_end":255051,"line_start":32,"line_end":32,"column_start":11,"column_end":20},"name":"NodeCodec","qualname":"::node_codec::NodeCodec","value":"NodeCodec: Sized","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1131}],"decl_id":null,"docs":" Trait for trie node encoding/decoding.\n","sig":null,"attributes":[{"value":"/ Trait for trie node encoding/decoding.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":254989,"byte_end":255031,"line_start":31,"line_end":31,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":1118},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255090,"byte_end":255095,"line_start":34,"line_end":34,"column_start":7,"column_end":12},"name":"Error","qualname":"::node_codec::NodeCodec::Error","value":"type Error: Error;","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Codec error type.\n","sig":null,"attributes":[{"value":"/ Codec error type.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255062,"byte_end":255083,"line_start":33,"line_end":33,"column_start":2,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1119},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255152,"byte_end":255159,"line_start":37,"line_end":37,"column_start":7,"column_end":14},"name":"HashOut","qualname":"::node_codec::NodeCodec::HashOut","value":"type HashOut: AsRef<[u8]> + AsMut<[u8]> + Default + MaybeDebug + PartialEq + Eq\n\t\t+ hash::Hash + Send + Sync + Clone + Copy;","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Output type of encoded node hasher.\n","sig":null,"attributes":[{"value":"/ Output type of encoded node hasher.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255106,"byte_end":255145,"line_start":36,"line_end":36,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255308,"byte_end":255324,"line_start":41,"line_end":41,"column_start":5,"column_end":21},"name":"hashed_null_node","qualname":"::node_codec::NodeCodec::hashed_null_node","value":"fn () -> Self::HashOut","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Get the hashed null node.\n","sig":null,"attributes":[{"value":"/ Get the hashed null node.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255274,"byte_end":255303,"line_start":40,"line_end":40,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255415,"byte_end":255426,"line_start":44,"line_end":44,"column_start":5,"column_end":16},"name":"decode_plan","qualname":"::node_codec::NodeCodec::decode_plan","value":"fn (data: &[u8]) -> Result<NodePlan, Self::Error>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Decode bytes to a `NodePlan`. Returns `Self::E` on failure.\n","sig":null,"attributes":[{"value":"/ Decode bytes to a `NodePlan`. Returns `Self::E` on failure.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255347,"byte_end":255410,"line_start":43,"line_end":43,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255540,"byte_end":255546,"line_start":47,"line_end":47,"column_start":5,"column_end":11},"name":"decode","qualname":"::node_codec::NodeCodec::decode","value":"fn (data: &[u8]) -> Result<Node, Self::Error>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Decode bytes to a `Node`. Returns `Self::E` on failure.\n","sig":null,"attributes":[{"value":"/ Decode bytes to a `Node`. Returns `Self::E` on failure.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255476,"byte_end":255535,"line_start":46,"line_end":46,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255714,"byte_end":255727,"line_start":52,"line_end":52,"column_start":5,"column_end":18},"name":"is_empty_node","qualname":"::node_codec::NodeCodec::is_empty_node","value":"fn (data: &[u8]) -> bool","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Check if the provided bytes correspond to the codecs \"empty\" node.\n","sig":null,"attributes":[{"value":"/ Check if the provided bytes correspond to the codecs \"empty\" node.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255639,"byte_end":255709,"line_start":51,"line_end":51,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255791,"byte_end":255801,"line_start":55,"line_end":55,"column_start":5,"column_end":15},"name":"empty_node","qualname":"::node_codec::NodeCodec::empty_node","value":"fn () -> &'static [u8]","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded empty node.\n","sig":null,"attributes":[{"value":"/ Returns an encoded empty node.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255752,"byte_end":255786,"line_start":54,"line_end":54,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255861,"byte_end":255870,"line_start":58,"line_end":58,"column_start":5,"column_end":14},"name":"leaf_node","qualname":"::node_codec::NodeCodec::leaf_node","value":"fn (partial: Partial, value: &[u8]) -> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded leaf node\n","sig":null,"attributes":[{"value":"/ Returns an encoded leaf node","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255824,"byte_end":255856,"line_start":57,"line_end":57,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":256147,"byte_end":256161,"line_start":64,"line_end":64,"column_start":5,"column_end":19},"name":"extension_node","qualname":"::node_codec::NodeCodec::extension_node","value":"fn (partial: impl Iterator<Item = u8>, number_nibble: usize, child_ref: ChildReference<Self::HashOut>) -> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded extension node\n Note that number_nibble is the number of element of the iterator\n it can possibly be obtain by `Iterator` `size_hint`, but\n for simplicity it is used directly as a parameter.\n","sig":null,"attributes":[{"value":"/ Returns an encoded extension node","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255917,"byte_end":255954,"line_start":60,"line_end":60,"column_start":2,"column_end":39}},{"value":"/ Note that number_nibble is the number of element of the iterator","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255956,"byte_end":256024,"line_start":61,"line_end":61,"column_start":2,"column_end":70}},{"value":"/ it can possibly be obtain by `Iterator` `size_hint`, but","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":256026,"byte_end":256086,"line_start":62,"line_end":62,"column_start":2,"column_end":62}},{"value":"/ for simplicity it is used directly as a parameter.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":256088,"byte_end":256142,"line_start":63,"line_end":63,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":256412,"byte_end":256423,"line_start":72,"line_end":72,"column_start":5,"column_end":16},"name":"branch_node","qualname":"::node_codec::NodeCodec::branch_node","value":"fn (children:\n    impl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>, value: Option<&[u8]>) -> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded branch node.\n Takes an iterator yielding `ChildReference<Self::HashOut>` and an optional value.\n","sig":null,"attributes":[{"value":"/ Returns an encoded branch node.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":256285,"byte_end":256320,"line_start":70,"line_end":70,"column_start":2,"column_end":37}},{"value":"/ Takes an iterator yielding `ChildReference<Self::HashOut>` and an optional value.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":256322,"byte_end":256407,"line_start":71,"line_end":71,"column_start":2,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":256693,"byte_end":256712,"line_start":79,"line_end":79,"column_start":5,"column_end":24},"name":"branch_node_nibbled","qualname":"::node_codec::NodeCodec::branch_node_nibbled","value":"fn (partial: impl Iterator<Item = u8>, number_nibble: usize, children:\n    impl Iterator<Item = impl Borrow<Option<ChildReference<Self::HashOut>>>>, value: Option<&[u8]>) -> Vec<u8>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":" Returns an encoded branch node with a possible partial path.\n `number_nibble` is the partial path length as in `extension_node`.\n","sig":null,"attributes":[{"value":"/ Returns an encoded branch node with a possible partial path.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":256552,"byte_end":256616,"line_start":77,"line_end":77,"column_start":2,"column_end":66}},{"value":"/ `number_nibble` is the partial path length as in `extension_node`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":256618,"byte_end":256688,"line_start":78,"line_end":78,"column_start":2,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":1183},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":263696,"byte_end":263710,"line_start":168,"line_end":168,"column_start":8,"column_end":22},"name":"encode_compact","qualname":"::trie_codec::encode_compact","value":"fn <L> (db: &TrieDB<L>) -> Result<Vec<Vec<u8>>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Generates a compact representation of the partial trie stored in the given DB. The encoding\n is a vector of mutated trie nodes with those child references omitted. The mutated trie nodes\n are listed in pre-order traversal order so that the full nodes can be efficiently\n reconstructed recursively.","sig":null,"attributes":[{"value":"/ Generates a compact representation of the partial trie stored in the given DB. The encoding","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":263259,"byte_end":263354,"line_start":161,"line_end":161,"column_start":1,"column_end":96}},{"value":"/ is a vector of mutated trie nodes with those child references omitted. The mutated trie nodes","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":263355,"byte_end":263452,"line_start":162,"line_end":162,"column_start":1,"column_end":98}},{"value":"/ are listed in pre-order traversal order so that the full nodes can be efficiently","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":263453,"byte_end":263538,"line_start":163,"line_end":163,"column_start":1,"column_end":86}},{"value":"/ reconstructed recursively.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":263539,"byte_end":263569,"line_start":164,"line_end":164,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":263570,"byte_end":263573,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ This function makes the assumption that all child references in an inline trie node are inline","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":263574,"byte_end":263672,"line_start":166,"line_end":166,"column_start":1,"column_end":99}},{"value":"/ references.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":263673,"byte_end":263688,"line_start":167,"line_end":167,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1201},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":271451,"byte_end":271465,"line_start":388,"line_end":388,"column_start":8,"column_end":22},"name":"decode_compact","qualname":"::trie_codec::decode_compact","value":"fn <L, DB, T> (db: &mut DB, encoded: &[Vec<u8>]) -> Result<(TrieHash<L>, usize), TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Reconstructs a partial trie DB from a compact representation. The encoding is a vector of\n mutated trie nodes with those child references omitted. The decode function reads them in order\n from the given slice, reconstructing the full nodes and inserting them into the given `HashDB`.\n It stops after fully constructing one partial trie and returns the root hash and the number of\n nodes read. If an error occurs during decoding, there are no guarantees about which entries\n were or were not added to the DB.","sig":null,"attributes":[{"value":"/ Reconstructs a partial trie DB from a compact representation. The encoding is a vector of","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":270605,"byte_end":270698,"line_start":376,"line_end":376,"column_start":1,"column_end":94}},{"value":"/ mutated trie nodes with those child references omitted. The decode function reads them in order","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":270699,"byte_end":270798,"line_start":377,"line_end":377,"column_start":1,"column_end":100}},{"value":"/ from the given slice, reconstructing the full nodes and inserting them into the given `HashDB`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":270799,"byte_end":270898,"line_start":378,"line_end":378,"column_start":1,"column_end":100}},{"value":"/ It stops after fully constructing one partial trie and returns the root hash and the number of","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":270899,"byte_end":270997,"line_start":379,"line_end":379,"column_start":1,"column_end":99}},{"value":"/ nodes read. If an error occurs during decoding, there are no guarantees about which entries","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":270998,"byte_end":271093,"line_start":380,"line_end":380,"column_start":1,"column_end":96}},{"value":"/ were or were not added to the DB.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":271094,"byte_end":271131,"line_start":381,"line_end":381,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":271132,"byte_end":271135,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ The number of nodes read may be fewer than the total number of items in `encoded`. This allows","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":271136,"byte_end":271234,"line_start":383,"line_end":383,"column_start":1,"column_end":99}},{"value":"/ one to concatenate multiple compact encodings together and still reconstruct them all.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":271235,"byte_end":271325,"line_start":384,"line_end":384,"column_start":1,"column_end":91}},{"value":"/ This function makes the assumption that all child references in an inline trie node are inline","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":271329,"byte_end":271427,"line_start":386,"line_end":386,"column_start":1,"column_end":99}},{"value":"/ references.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":271428,"byte_end":271443,"line_start":387,"line_end":387,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1244},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2329,"byte_end":2336,"line_start":80,"line_end":80,"column_start":10,"column_end":17},"name":"DBValue","qualname":"::DBValue","value":"Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Database value\n","sig":null,"attributes":[{"value":"/ Database value","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2301,"byte_end":2319,"line_start":79,"line_end":79,"column_start":1,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1726},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2596,"byte_end":2612,"line_start":89,"line_end":89,"column_start":2,"column_end":18},"name":"InvalidStateRoot","qualname":"::TrieError::InvalidStateRoot","value":"TrieError::InvalidStateRoot(T)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":" Attempted to create a trie with a state root not in the DB.\n","sig":null,"attributes":[{"value":"/ Attempted to create a trie with a state root not in the DB.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2531,"byte_end":2594,"line_start":88,"line_end":88,"column_start":2,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1729},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2660,"byte_end":2678,"line_start":91,"line_end":91,"column_start":2,"column_end":20},"name":"IncompleteDatabase","qualname":"::TrieError::IncompleteDatabase","value":"TrieError::IncompleteDatabase(T)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":" Trie item not found in the database,\n","sig":null,"attributes":[{"value":"/ Trie item not found in the database,","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2618,"byte_end":2658,"line_start":90,"line_end":90,"column_start":2,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1732},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2883,"byte_end":2903,"line_start":95,"line_end":95,"column_start":2,"column_end":22},"name":"ValueAtIncompleteKey","qualname":"::TrieError::ValueAtIncompleteKey","value":"TrieError::ValueAtIncompleteKey(Vec<u8>, u8)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":" A value was found in the trie with a nibble key that was not byte-aligned.\n The first parameter is the byte-aligned part of the prefix and the second parameter is the\n remaining nibble.\n","sig":null,"attributes":[{"value":"/ A value was found in the trie with a nibble key that was not byte-aligned.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2684,"byte_end":2762,"line_start":92,"line_end":92,"column_start":2,"column_end":80}},{"value":"/ The first parameter is the byte-aligned part of the prefix and the second parameter is the","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2764,"byte_end":2858,"line_start":93,"line_end":93,"column_start":2,"column_end":96}},{"value":"/ remaining nibble.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2860,"byte_end":2881,"line_start":94,"line_end":94,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1736},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2942,"byte_end":2954,"line_start":97,"line_end":97,"column_start":2,"column_end":14},"name":"DecoderError","qualname":"::TrieError::DecoderError","value":"TrieError::DecoderError(T, E)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":" Corrupt Trie item\n","sig":null,"attributes":[{"value":"/ Corrupt Trie item","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2919,"byte_end":2940,"line_start":96,"line_end":96,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1740},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2963,"byte_end":2974,"line_start":98,"line_end":98,"column_start":2,"column_end":13},"name":"InvalidHash","qualname":"::TrieError::InvalidHash","value":"TrieError::InvalidHash(T, Vec<u8>)","parent":{"krate":0,"index":1723},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1723},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2512,"byte_end":2521,"line_start":87,"line_end":87,"column_start":10,"column_end":19},"name":"TrieError","qualname":"::TrieError","value":"TrieError::{InvalidStateRoot, IncompleteDatabase, ValueAtIncompleteKey, DecoderError, InvalidHash}","parent":null,"children":[{"krate":0,"index":1726},{"krate":0,"index":1729},{"krate":0,"index":1732},{"krate":0,"index":1736},{"krate":0,"index":1740}],"decl_id":null,"docs":" Trie Errors.","sig":null,"attributes":[{"value":"/ Trie Errors.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2349,"byte_end":2365,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2366,"byte_end":2369,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ These borrow the data within them to avoid excessive copying on every","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2370,"byte_end":2443,"line_start":84,"line_end":84,"column_start":1,"column_end":74}},{"value":"/ trie operation.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":2444,"byte_end":2463,"line_start":85,"line_end":85,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":1253},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4450,"byte_end":4456,"line_start":139,"line_end":139,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"crate::rstd::result::Result<T, Box<TrieError<H, E>>>","parent":null,"children":[],"decl_id":null,"docs":" Trie result type.\n Boxed to avoid copying around extra space for the `Hasher`s `Out` on successful queries.\n","sig":null,"attributes":[{"value":"/ Trie result type.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4326,"byte_end":4347,"line_start":137,"line_end":137,"column_start":1,"column_end":22}},{"value":"/ Boxed to avoid copying around extra space for the `Hasher`s `Out` on successful queries.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4348,"byte_end":4440,"line_start":138,"line_end":138,"column_start":1,"column_end":93}}]},{"kind":"Type","id":{"krate":0,"index":1257},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4587,"byte_end":4595,"line_start":143,"line_end":143,"column_start":10,"column_end":18},"name":"TrieItem","qualname":"::TrieItem","value":"Result<(Vec<u8>, DBValue), U, E>","parent":null,"children":[],"decl_id":null,"docs":" Trie-Item type used for iterators over trie data.\n","sig":null,"attributes":[{"value":"/ Trie-Item type used for iterators over trie data.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4524,"byte_end":4577,"line_start":142,"line_end":142,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":1261},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4928,"byte_end":4933,"line_start":150,"line_end":150,"column_start":11,"column_end":16},"name":"Query","qualname":"::Query","value":"Query<H: Hasher>","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265}],"decl_id":null,"docs":" Description of what kind of query will be made to the trie.","sig":null,"attributes":[{"value":"/ Description of what kind of query will be made to the trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4643,"byte_end":4706,"line_start":145,"line_end":145,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4707,"byte_end":4710,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ This is implemented for any &mut recorder (where the query will return","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4711,"byte_end":4785,"line_start":147,"line_end":147,"column_start":1,"column_end":75}},{"value":"/ a DBValue), any function taking raw bytes (where no recording will be made),","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4786,"byte_end":4866,"line_start":148,"line_end":148,"column_start":1,"column_end":81}},{"value":"/ or any tuple of (&mut Recorder, FnOnce(&[u8]))","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4867,"byte_end":4917,"line_start":149,"line_end":149,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1263},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4971,"byte_end":4975,"line_start":152,"line_end":152,"column_start":7,"column_end":11},"name":"Item","qualname":"::Query::Item","value":"type Item;","parent":{"krate":0,"index":1261},"children":[],"decl_id":null,"docs":" Output item.\n","sig":null,"attributes":[{"value":"/ Output item.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4948,"byte_end":4964,"line_start":151,"line_end":151,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":5030,"byte_end":5036,"line_start":155,"line_end":155,"column_start":5,"column_end":11},"name":"decode","qualname":"::Query::decode","value":"fn (self, data: &[u8]) -> Self::Item","parent":{"krate":0,"index":1261},"children":[],"decl_id":null,"docs":" Decode a byte-slice into the desired item.\n","sig":null,"attributes":[{"value":"/ Decode a byte-slice into the desired item.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":4979,"byte_end":5025,"line_start":154,"line_end":154,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":5125,"byte_end":5131,"line_start":158,"line_end":158,"column_start":5,"column_end":11},"name":"record","qualname":"::Query::record","value":"fn (&mut self, _hash: &H::Out, _data: &[u8], _depth: u32) -> ()","parent":{"krate":0,"index":1261},"children":[],"decl_id":null,"docs":" Record that a node has been passed through.\n","sig":null,"attributes":[{"value":"/ Record that a node has been passed through.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":5073,"byte_end":5120,"line_start":157,"line_end":157,"column_start":2,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":1287},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":5966,"byte_end":5970,"line_start":183,"line_end":183,"column_start":11,"column_end":15},"name":"Trie","qualname":"::Trie","value":"Trie<L: TrieLayout>","parent":null,"children":[{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1297},{"krate":0,"index":1301}],"decl_id":null,"docs":" A key-value datastore implemented as a database-backed modified Merkle tree.\n","sig":null,"attributes":[{"value":"/ A key-value datastore implemented as a database-backed modified Merkle tree.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":5875,"byte_end":5955,"line_start":182,"line_end":182,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6026,"byte_end":6030,"line_start":185,"line_end":185,"column_start":5,"column_end":9},"name":"root","qualname":"::Trie::root","value":"fn (&self) -> &TrieHash<L>","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Return the root of the trie.\n","sig":null,"attributes":[{"value":"/ Return the root of the trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":5989,"byte_end":6021,"line_start":184,"line_end":184,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6084,"byte_end":6092,"line_start":188,"line_end":188,"column_start":5,"column_end":13},"name":"is_empty","qualname":"::Trie::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Is the trie empty?\n","sig":null,"attributes":[{"value":"/ Is the trie empty?","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6057,"byte_end":6079,"line_start":187,"line_end":187,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6202,"byte_end":6210,"line_start":191,"line_end":191,"column_start":5,"column_end":13},"name":"contains","qualname":"::Trie::contains","value":"fn (&self, key: &[u8]) -> Result<bool, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Does the trie contain a given key?\n","sig":null,"attributes":[{"value":"/ Does the trie contain a given key?","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6159,"byte_end":6197,"line_start":190,"line_end":190,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6372,"byte_end":6375,"line_start":196,"line_end":196,"column_start":5,"column_end":8},"name":"get","qualname":"::Trie::get","value":"fn <'a, 'key> (&'a self, key: &'key [u8]) -> Result<Option<DBValue>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" What is the value of the given key in this trie?\n","sig":null,"attributes":[{"value":"/ What is the value of the given key in this trie?","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6315,"byte_end":6367,"line_start":195,"line_end":195,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6655,"byte_end":6663,"line_start":205,"line_end":205,"column_start":5,"column_end":13},"name":"get_with","qualname":"::Trie::get_with","value":"fn <'a, 'key, Q> (&'a self, key: &'key [u8], query: Q) -> Result<Option<Q::Item>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Search for the key with the given query parameter. See the docs of the `Query`\n trait for more details.\n","sig":null,"attributes":[{"value":"/ Search for the key with the given query parameter. See the docs of the `Query`","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6539,"byte_end":6621,"line_start":203,"line_end":203,"column_start":2,"column_end":84}},{"value":"/ trait for more details.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6623,"byte_end":6650,"line_start":204,"line_end":204,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6874,"byte_end":6878,"line_start":212,"line_end":212,"column_start":5,"column_end":9},"name":"iter","qualname":"::Trie::iter","value":"fn <'a> (&'a self) -> Result<Box<dyn TrieIterator<L, Item = TrieItem<TrieHash<L>, CError<L>>> + 'a>,\n       TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":" Returns a depth-first iterator over the elements of trie.\n","sig":null,"attributes":[{"value":"/ Returns a depth-first iterator over the elements of trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":6808,"byte_end":6869,"line_start":211,"line_end":211,"column_start":2,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":1303},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7104,"byte_end":7111,"line_start":220,"line_end":220,"column_start":11,"column_end":18},"name":"TrieMut","qualname":"::TrieMut","value":"TrieMut<L: TrieLayout>","parent":null,"children":[{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1309},{"krate":0,"index":1312},{"krate":0,"index":1313}],"decl_id":null,"docs":" A key-value datastore implemented as a database-backed modified Merkle tree.\n","sig":null,"attributes":[{"value":"/ A key-value datastore implemented as a database-backed modified Merkle tree.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7013,"byte_end":7093,"line_start":219,"line_end":219,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1305},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7167,"byte_end":7171,"line_start":222,"line_end":222,"column_start":5,"column_end":9},"name":"root","qualname":"::TrieMut::root","value":"fn (&mut self) -> &TrieHash<L>","parent":{"krate":0,"index":1303},"children":[],"decl_id":null,"docs":" Return the root of the trie.\n","sig":null,"attributes":[{"value":"/ Return the root of the trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7130,"byte_end":7162,"line_start":221,"line_end":221,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7229,"byte_end":7237,"line_start":225,"line_end":225,"column_start":5,"column_end":13},"name":"is_empty","qualname":"::TrieMut::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":1303},"children":[],"decl_id":null,"docs":" Is the trie empty?\n","sig":null,"attributes":[{"value":"/ Is the trie empty?","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7202,"byte_end":7224,"line_start":224,"line_end":224,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7299,"byte_end":7307,"line_start":228,"line_end":228,"column_start":5,"column_end":13},"name":"contains","qualname":"::TrieMut::contains","value":"fn (&self, key: &[u8]) -> Result<bool, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1303},"children":[],"decl_id":null,"docs":" Does the trie contain a given key?\n","sig":null,"attributes":[{"value":"/ Does the trie contain a given key?","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7256,"byte_end":7294,"line_start":227,"line_end":227,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7468,"byte_end":7471,"line_start":233,"line_end":233,"column_start":5,"column_end":8},"name":"get","qualname":"::TrieMut::get","value":"fn <'a, 'key> (&'a self, key: &'key [u8]) -> Result<Option<DBValue>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1303},"children":[],"decl_id":null,"docs":" What is the value of the given key in this trie?\n","sig":null,"attributes":[{"value":"/ What is the value of the given key in this trie?","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7411,"byte_end":7463,"line_start":232,"line_end":232,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7767,"byte_end":7773,"line_start":240,"line_end":240,"column_start":5,"column_end":11},"name":"insert","qualname":"::TrieMut::insert","value":"fn (&mut self, key: &[u8], value: &[u8]) -> Result<Option<DBValue>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1303},"children":[],"decl_id":null,"docs":" Insert a `key`/`value` pair into the trie. An empty value is equivalent to removing\n `key` from the trie. Returns the old value associated with this key, if it existed.\n","sig":null,"attributes":[{"value":"/ Insert a `key`/`value` pair into the trie. An empty value is equivalent to removing","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7586,"byte_end":7673,"line_start":238,"line_end":238,"column_start":2,"column_end":89}},{"value":"/ `key` from the trie. Returns the old value associated with this key, if it existed.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7675,"byte_end":7762,"line_start":239,"line_end":239,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8031,"byte_end":8037,"line_start":248,"line_end":248,"column_start":5,"column_end":11},"name":"remove","qualname":"::TrieMut::remove","value":"fn (&mut self, key: &[u8]) -> Result<Option<DBValue>, TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1303},"children":[],"decl_id":null,"docs":" Remove a `key` from the trie. Equivalent to making it equal to the empty\n value. Returns the old value associated with this key, if it existed.\n","sig":null,"attributes":[{"value":"/ Remove a `key` from the trie. Equivalent to making it equal to the empty","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7875,"byte_end":7951,"line_start":246,"line_end":246,"column_start":2,"column_end":78}},{"value":"/ value. Returns the old value associated with this key, if it existed.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":7953,"byte_end":8026,"line_start":247,"line_end":247,"column_start":2,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1314},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8191,"byte_end":8203,"line_start":252,"line_end":252,"column_start":11,"column_end":23},"name":"TrieIterator","qualname":"::TrieIterator","value":"TrieIterator<L: TrieLayout>: Iterator","parent":null,"children":[{"krate":0,"index":1316}],"decl_id":null,"docs":" A trie iterator that also supports random access (`seek()`).\n","sig":null,"attributes":[{"value":"/ A trie iterator that also supports random access (`seek()`).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8116,"byte_end":8180,"line_start":251,"line_end":251,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8301,"byte_end":8305,"line_start":254,"line_end":254,"column_start":5,"column_end":9},"name":"seek","qualname":"::TrieIterator::seek","value":"fn (&mut self, key: &[u8]) -> Result<(), TrieHash<L>, CError<L>>","parent":{"krate":0,"index":1314},"children":[],"decl_id":null,"docs":" Position the iterator on the first element with key >= `key`\n","sig":null,"attributes":[{"value":"/ Position the iterator on the first element with key >= `key`","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8232,"byte_end":8296,"line_start":253,"line_end":253,"column_start":2,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1768},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8498,"byte_end":8505,"line_start":262,"line_end":262,"column_start":2,"column_end":9},"name":"Generic","qualname":"::TrieSpec::Generic","value":"TrieSpec::Generic","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" Generic trie.\n","sig":null,"attributes":[{"value":"/ Generic trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8479,"byte_end":8496,"line_start":261,"line_end":261,"column_start":2,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1770},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8526,"byte_end":8532,"line_start":264,"line_end":264,"column_start":2,"column_end":8},"name":"Secure","qualname":"::TrieSpec::Secure","value":"TrieSpec::Secure","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":" Secure trie.\n","sig":null,"attributes":[{"value":"/ Secure trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8508,"byte_end":8524,"line_start":263,"line_end":263,"column_start":2,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1772},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8571,"byte_end":8574,"line_start":266,"line_end":266,"column_start":2,"column_end":5},"name":"Fat","qualname":"::TrieSpec::Fat","value":"TrieSpec::Fat","parent":{"krate":0,"index":1767},"children":[],"decl_id":null,"docs":"\tSecure trie with fat database.\n","sig":null,"attributes":[{"value":"/\tSecure trie with fat database.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8535,"byte_end":8569,"line_start":265,"line_end":265,"column_start":2,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1767},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8467,"byte_end":8475,"line_start":260,"line_end":260,"column_start":10,"column_end":18},"name":"TrieSpec","qualname":"::TrieSpec","value":"TrieSpec::{Generic, Secure, Fat}","parent":null,"children":[{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772}],"decl_id":null,"docs":" Trie types\n","sig":null,"attributes":[{"value":"/ Trie types","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8371,"byte_end":8385,"line_start":257,"line_end":257,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":1781},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8715,"byte_end":8726,"line_start":277,"line_end":277,"column_start":12,"column_end":23},"name":"TrieFactory","qualname":"::TrieFactory","value":"TrieFactory {  }","parent":null,"children":[{"krate":0,"index":1783},{"krate":0,"index":1784}],"decl_id":null,"docs":" Trie factory.\n","sig":null,"attributes":[{"value":"/ Trie factory.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8660,"byte_end":8677,"line_start":275,"line_end":275,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1322},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8946,"byte_end":8953,"line_start":286,"line_end":286,"column_start":2,"column_end":9},"name":"Generic","qualname":"::TrieKinds::Generic","value":"TrieKinds::Generic(TrieDB<'db, L>)","parent":{"krate":0,"index":1319},"children":[],"decl_id":null,"docs":" A generic trie db.\n","sig":null,"attributes":[{"value":"/ A generic trie db.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8922,"byte_end":8944,"line_start":285,"line_end":285,"column_start":2,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1325},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8995,"byte_end":9001,"line_start":288,"line_end":288,"column_start":2,"column_end":8},"name":"Secure","qualname":"::TrieKinds::Secure","value":"TrieKinds::Secure(SecTrieDB<'db, L>)","parent":{"krate":0,"index":1319},"children":[],"decl_id":null,"docs":" A secure trie db.\n","sig":null,"attributes":[{"value":"/ A secure trie db.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8972,"byte_end":8993,"line_start":287,"line_end":287,"column_start":2,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1328},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":9043,"byte_end":9046,"line_start":290,"line_end":290,"column_start":2,"column_end":5},"name":"Fat","qualname":"::TrieKinds::Fat","value":"TrieKinds::Fat(FatDB<'db, L>)","parent":{"krate":0,"index":1319},"children":[],"decl_id":null,"docs":" A fat trie db.\n","sig":null,"attributes":[{"value":"/ A fat trie db.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":9023,"byte_end":9041,"line_start":289,"line_end":289,"column_start":2,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":1319},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8889,"byte_end":8898,"line_start":284,"line_end":284,"column_start":10,"column_end":19},"name":"TrieKinds","qualname":"::TrieKinds","value":"TrieKinds::{Generic, Secure, Fat}","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1325},{"krate":0,"index":1328}],"decl_id":null,"docs":" All different kinds of tries.\n This is used to prevent a heap allocation for every created trie.\n","sig":null,"attributes":[{"value":"/ All different kinds of tries.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8776,"byte_end":8809,"line_start":282,"line_end":282,"column_start":1,"column_end":34}},{"value":"/ This is used to prevent a heap allocation for every created trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8810,"byte_end":8879,"line_start":283,"line_end":283,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":10146,"byte_end":10149,"line_start":340,"line_end":340,"column_start":9,"column_end":12},"name":"new","qualname":"<TrieFactory<L>>::new","value":"fn (spec: TrieSpec, layout: L) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates new factory.\n","sig":null,"attributes":[{"value":"/ Creates new factory.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":10113,"byte_end":10137,"line_start":339,"line_end":339,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":10274,"byte_end":10282,"line_start":345,"line_end":345,"column_start":9,"column_end":17},"name":"readonly","qualname":"<TrieFactory<L>>::readonly","value":"fn (&self, db: &'db dyn HashDBRef<L::Hash, DBValue>, root: &'db TrieHash<L>) -> Result<TrieKinds<'db, L>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create new immutable instance of Trie.\n","sig":null,"attributes":[{"value":"/ Create new immutable instance of Trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":10223,"byte_end":10265,"line_start":344,"line_end":344,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":10706,"byte_end":10712,"line_start":358,"line_end":358,"column_start":9,"column_end":15},"name":"create","qualname":"<TrieFactory<L>>::create","value":"fn (&self, db: &'db mut dyn HashDB<L::Hash, DBValue>, root: &'db mut TrieHash<L>) -> Box<dyn TrieMut<L> + 'db>","parent":null,"children":[],"decl_id":null,"docs":" Create new mutable instance of Trie.\n","sig":null,"attributes":[{"value":"/ Create new mutable instance of Trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":10657,"byte_end":10697,"line_start":357,"line_end":357,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":11123,"byte_end":11136,"line_start":371,"line_end":371,"column_start":9,"column_end":22},"name":"from_existing","qualname":"<TrieFactory<L>>::from_existing","value":"fn (&self, db: &'db mut dyn HashDB<L::Hash, DBValue>, root: &'db mut TrieHash<L>) -> Result<Box<dyn TrieMut<L> + 'db>, TrieHash<L>, CError<L>>","parent":null,"children":[],"decl_id":null,"docs":" Create new mutable instance of trie and check for errors.\n","sig":null,"attributes":[{"value":"/ Create new mutable instance of trie and check for errors.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":11053,"byte_end":11114,"line_start":370,"line_end":370,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":11637,"byte_end":11643,"line_start":384,"line_end":384,"column_start":9,"column_end":15},"name":"is_fat","qualname":"<TrieFactory<L>>::is_fat","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the trie DB is a fat DB (allows enumeration of keys).\n","sig":null,"attributes":[{"value":"/ Returns true iff the trie DB is a fat DB (allows enumeration of keys).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":11554,"byte_end":11628,"line_start":383,"line_end":383,"column_start":2,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":1352},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":11831,"byte_end":11841,"line_start":390,"line_end":390,"column_start":11,"column_end":21},"name":"TrieLayout","qualname":"::TrieLayout","value":"TrieLayout","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355}],"decl_id":null,"docs":" Trait with definition of trie layout.\n Contains all associated trait needed for\n a trie definition or implementation.\n","sig":null,"attributes":[{"value":"/ Trait with definition of trie layout.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":11693,"byte_end":11734,"line_start":387,"line_end":387,"column_start":1,"column_end":42}},{"value":"/ Contains all associated trait needed for","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":11735,"byte_end":11779,"line_start":388,"line_end":388,"column_start":1,"column_end":45}},{"value":"/ a trie definition or implementation.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":11780,"byte_end":11820,"line_start":389,"line_end":389,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":1353},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12006,"byte_end":12019,"line_start":394,"line_end":394,"column_start":8,"column_end":21},"name":"USE_EXTENSION","qualname":"::TrieLayout::USE_EXTENSION","value":"bool","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":" If true, the trie will use extension nodes and\n no partial in branch, if false the trie will only\n use branch and node with partials in both.\n","sig":null,"attributes":[{"value":"/ If true, the trie will use extension nodes and","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":11845,"byte_end":11895,"line_start":391,"line_end":391,"column_start":2,"column_end":52}},{"value":"/ no partial in branch, if false the trie will only","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":11897,"byte_end":11950,"line_start":392,"line_end":392,"column_start":2,"column_end":55}},{"value":"/ use branch and node with partials in both.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":11952,"byte_end":11998,"line_start":393,"line_end":393,"column_start":2,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":1354},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12067,"byte_end":12071,"line_start":396,"line_end":396,"column_start":7,"column_end":11},"name":"Hash","qualname":"::TrieLayout::Hash","value":"type Hash: Hasher;","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":" Hasher to use for this trie.\n","sig":null,"attributes":[{"value":"/ Hasher to use for this trie.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12028,"byte_end":12060,"line_start":395,"line_end":395,"column_start":2,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":1355},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12145,"byte_end":12150,"line_start":398,"line_end":398,"column_start":7,"column_end":12},"name":"Codec","qualname":"::TrieLayout::Codec","value":"type Codec: NodeCodec<HashOut=<Self::Hash as Hasher>::Out>;","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":" Codec to use (needs to match hasher and nibble ops).\n","sig":null,"attributes":[{"value":"/ Codec to use (needs to match hasher and nibble ops).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12082,"byte_end":12138,"line_start":397,"line_end":397,"column_start":2,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":1356},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12385,"byte_end":12402,"line_start":404,"line_end":404,"column_start":11,"column_end":28},"name":"TrieConfiguration","qualname":"::TrieConfiguration","value":"TrieConfiguration: Sized + TrieLayout","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1362},{"krate":0,"index":1366},{"krate":0,"index":1370},{"krate":0,"index":1371}],"decl_id":null,"docs":" This trait associates a trie definition with preferred methods.\n It also contains own default implementations and can be\n used to allow switching implementation.\n","sig":null,"attributes":[{"value":"/ This trait associates a trie definition with preferred methods.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12203,"byte_end":12270,"line_start":401,"line_end":401,"column_start":1,"column_end":68}},{"value":"/ It also contains own default implementations and can be","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12271,"byte_end":12330,"line_start":402,"line_end":402,"column_start":1,"column_end":60}},{"value":"/ used to allow switching implementation.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12331,"byte_end":12374,"line_start":403,"line_end":403,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12510,"byte_end":12520,"line_start":406,"line_end":406,"column_start":5,"column_end":15},"name":"trie_build","qualname":"::TrieConfiguration::trie_build","value":"fn <DB, I, A, B> (db: &mut DB, input: I) -> <Self::Hash as Hasher>::Out","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Operation to build a trie db from its ordered iterator over its key/values.\n","sig":null,"attributes":[{"value":"/ Operation to build a trie db from its ordered iterator over its key/values.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12426,"byte_end":12505,"line_start":405,"line_end":405,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12917,"byte_end":12926,"line_start":417,"line_end":417,"column_start":5,"column_end":14},"name":"trie_root","qualname":"::TrieConfiguration::trie_root","value":"fn <I, A, B> (input: I) -> <Self::Hash as Hasher>::Out","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Determines a trie root given its ordered contents, closed form.\n","sig":null,"attributes":[{"value":"/ Determines a trie root given its ordered contents, closed form.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12845,"byte_end":12912,"line_start":416,"line_end":416,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":13302,"byte_end":13320,"line_start":427,"line_end":427,"column_start":5,"column_end":23},"name":"trie_root_unhashed","qualname":"::TrieConfiguration::trie_root_unhashed","value":"fn <I, A, B> (input: I) -> Vec<u8>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Determines a trie root node's data given its ordered contents, closed form.\n","sig":null,"attributes":[{"value":"/ Determines a trie root node's data given its ordered contents, closed form.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":13218,"byte_end":13297,"line_start":426,"line_end":426,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":13683,"byte_end":13695,"line_start":438,"line_end":438,"column_start":5,"column_end":17},"name":"encode_index","qualname":"::TrieConfiguration::encode_index","value":"fn (input: u32) -> Vec<u8>","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Encoding of index as a key (when reusing general trie for\n indexed trie).\n","sig":null,"attributes":[{"value":"/ Encoding of index as a key (when reusing general trie for","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":13597,"byte_end":13658,"line_start":436,"line_end":436,"column_start":2,"column_end":63}},{"value":"/ indexed trie).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":13660,"byte_end":13678,"line_start":437,"line_end":437,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":13920,"byte_end":13937,"line_start":444,"line_end":444,"column_start":5,"column_end":22},"name":"ordered_trie_root","qualname":"::TrieConfiguration::ordered_trie_root","value":"fn <I, A> (input: I) -> <Self::Hash as Hasher>::Out","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" A trie root formed from the items, with keys attached according to their\n compact-encoded index (using `parity-codec` crate).\n","sig":null,"attributes":[{"value":"/ A trie root formed from the items, with keys attached according to their","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":13782,"byte_end":13858,"line_start":442,"line_end":442,"column_start":2,"column_end":78}},{"value":"/ compact-encoded index (using `parity-codec` crate).","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":13860,"byte_end":13915,"line_start":443,"line_end":443,"column_start":2,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":1375},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":14236,"byte_end":14244,"line_start":458,"line_end":458,"column_start":10,"column_end":18},"name":"TrieHash","qualname":"::TrieHash","value":"<<L as TrieLayout>::Hash as Hasher>::Out","parent":null,"children":[],"decl_id":null,"docs":" Alias accessor to hasher hash output type from a `TrieLayout`.\n","sig":null,"attributes":[{"value":"/ Alias accessor to hasher hash output type from a `TrieLayout`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":14160,"byte_end":14226,"line_start":457,"line_end":457,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":1377},"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":14380,"byte_end":14386,"line_start":460,"line_end":460,"column_start":10,"column_end":16},"name":"CError","qualname":"::CError","value":"<<L as TrieLayout>::Codec as NodeCodec>::Error","parent":null,"children":[],"decl_id":null,"docs":" Alias accessor to `NodeCodec` associated `Error` type from a `TrieLayout`.\n","sig":null,"attributes":[{"value":"/ Alias accessor to `NodeCodec` associated `Error` type from a `TrieLayout`.","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":14292,"byte_end":14370,"line_start":459,"line_end":459,"column_start":1,"column_end":79}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17019,"byte_end":17033,"line_start":68,"line_end":68,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17863,"byte_end":17878,"line_start":89,"line_end":89,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19846,"byte_end":19854,"line_start":146,"line_end":146,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21472,"byte_end":21481,"line_start":186,"line_end":186,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/generate.rs","byte_start":33262,"byte_end":33272,"line_start":47,"line_end":47,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":120},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49898,"byte_end":49903,"line_start":54,"line_end":54,"column_start":72,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":51101,"byte_end":51106,"line_start":88,"line_end":88,"column_start":82,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":51880,"byte_end":51890,"line_start":112,"line_end":112,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64916,"byte_end":64922,"line_start":60,"line_end":60,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":66880,"byte_end":66886,"line_start":118,"line_end":118,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":67737,"byte_end":67755,"line_start":161,"line_end":161,"column_start":33,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":70394,"byte_end":70400,"line_start":247,"line_end":247,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":70938,"byte_end":70952,"line_start":269,"line_end":269,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":71494,"byte_end":71508,"line_start":288,"line_end":288,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":71742,"byte_end":71756,"line_start":295,"line_end":295,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":85011,"byte_end":85021,"line_start":52,"line_end":52,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":86317,"byte_end":86322,"line_start":91,"line_end":91,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":86552,"byte_end":86556,"line_start":102,"line_end":102,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":87193,"byte_end":87197,"line_start":118,"line_end":118,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":421},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":92002,"byte_end":92014,"line_start":282,"line_end":282,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":92890,"byte_end":92904,"line_start":314,"line_end":314,"column_start":49,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":93751,"byte_end":93762,"line_start":347,"line_end":347,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":94499,"byte_end":94510,"line_start":376,"line_end":376,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":96145,"byte_end":96154,"line_start":428,"line_end":428,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":130898,"byte_end":130907,"line_start":1507,"line_end":1507,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":132838,"byte_end":132847,"line_start":1585,"line_end":1585,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150182,"byte_end":150191,"line_start":30,"line_end":30,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150914,"byte_end":150923,"line_start":57,"line_end":57,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153174,"byte_end":153186,"line_start":29,"line_end":29,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":154121,"byte_end":154133,"line_start":57,"line_end":57,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156639,"byte_end":156647,"line_start":40,"line_end":40,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156717,"byte_end":156725,"line_start":46,"line_end":46,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":162050,"byte_end":162055,"line_start":32,"line_end":32,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":162576,"byte_end":162581,"line_start":50,"line_end":50,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":163416,"byte_end":163429,"line_start":85,"line_end":85,"column_start":14,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":163691,"byte_end":163704,"line_start":98,"line_end":98,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":163927,"byte_end":163940,"line_start":108,"line_end":108,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166080,"byte_end":166088,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":167021,"byte_end":167029,"line_start":61,"line_end":61,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":171455,"byte_end":171465,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179975,"byte_end":179986,"line_start":333,"line_end":333,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":180187,"byte_end":180198,"line_start":340,"line_end":340,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":180922,"byte_end":180930,"line_start":369,"line_end":369,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":181073,"byte_end":181081,"line_start":375,"line_end":375,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":181795,"byte_end":181811,"line_start":404,"line_end":404,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":182144,"byte_end":182157,"line_start":420,"line_end":420,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":182329,"byte_end":182342,"line_start":427,"line_end":427,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":183111,"byte_end":183127,"line_start":453,"line_end":453,"column_start":60,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":193954,"byte_end":193959,"line_start":40,"line_end":40,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":194852,"byte_end":194870,"line_start":64,"line_end":64,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":195541,"byte_end":195559,"line_start":91,"line_end":91,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":199969,"byte_end":199987,"line_start":249,"line_end":249,"column_start":45,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":200160,"byte_end":200178,"line_start":259,"line_end":259,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219293,"byte_end":219299,"line_start":34,"line_end":34,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228257,"byte_end":228266,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228323,"byte_end":228332,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":971},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":234066,"byte_end":234075,"line_start":227,"line_end":227,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":236868,"byte_end":236887,"line_start":23,"line_end":23,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237072,"byte_end":237083,"line_start":34,"line_end":34,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243029,"byte_end":243040,"line_start":236,"line_end":236,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243138,"byte_end":243149,"line_start":242,"line_end":242,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243268,"byte_end":243279,"line_start":248,"line_end":248,"column_start":17,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243313,"byte_end":243324,"line_start":250,"line_end":250,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243435,"byte_end":243446,"line_start":256,"line_end":256,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243834,"byte_end":243845,"line_start":272,"line_end":272,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":248341,"byte_end":248356,"line_start":28,"line_end":28,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":250491,"byte_end":250506,"line_start":97,"line_end":97,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":251138,"byte_end":251153,"line_start":123,"line_end":123,"column_start":17,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":251186,"byte_end":251201,"line_start":125,"line_end":125,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":251314,"byte_end":251329,"line_start":131,"line_end":131,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":251456,"byte_end":251471,"line_start":138,"line_end":138,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":259448,"byte_end":259465,"line_start":53,"line_end":53,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":267164,"byte_end":267181,"line_start":263,"line_end":263,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":3043,"byte_end":3052,"line_start":102,"line_end":102,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1248}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":3883,"byte_end":3892,"line_start":125,"line_end":125,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1252}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":5483,"byte_end":5484,"line_start":169,"line_end":169,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8596,"byte_end":8604,"line_start":269,"line_end":269,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":9428,"byte_end":9437,"line_start":304,"line_end":304,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1342}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":10067,"byte_end":10078,"line_start":335,"line_end":335,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1307,"byte_end":1311,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":27}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1321,"byte_end":1326,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1336,"byte_end":1342,"line_start":45,"line_end":45,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":237}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1352,"byte_end":1361,"line_start":46,"line_end":46,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":333}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1371,"byte_end":1380,"line_start":47,"line_end":47,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":549}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1390,"byte_end":1402,"line_start":48,"line_end":48,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":586}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":1412,"byte_end":1420,"line_start":49,"line_end":49,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":620}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17019,"byte_end":17033,"line_start":68,"line_end":68,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":17863,"byte_end":17878,"line_start":89,"line_end":89,"column_start":6,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":19846,"byte_end":19854,"line_start":146,"line_end":146,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node.rs","byte_start":21472,"byte_end":21481,"line_start":186,"line_end":186,"column_start":23,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/generate.rs","byte_start":33262,"byte_end":33272,"line_start":47,"line_end":47,"column_start":24,"column_end":34},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":99},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":49898,"byte_end":49903,"line_start":54,"line_end":54,"column_start":72,"column_end":77},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1530},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":51101,"byte_end":51106,"line_start":88,"line_end":88,"column_start":82,"column_end":87},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1530},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/proof/verify.rs","byte_start":51880,"byte_end":51890,"line_start":112,"line_end":112,"column_start":24,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":64916,"byte_end":64922,"line_start":60,"line_end":60,"column_start":14,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":66880,"byte_end":66886,"line_start":118,"line_end":118,"column_start":26,"column_end":32},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":266},"to":{"krate":0,"index":1287}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":67737,"byte_end":67755,"line_start":161,"line_end":161,"column_start":33,"column_end":51},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":292},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":70394,"byte_end":70400,"line_start":247,"line_end":247,"column_start":29,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":266},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":70938,"byte_end":70952,"line_start":269,"line_end":269,"column_start":25,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":71494,"byte_end":71508,"line_start":288,"line_end":288,"column_start":45,"column_end":59},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":315},"to":{"krate":0,"index":1314}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedb.rs","byte_start":71742,"byte_end":71756,"line_start":295,"line_end":295,"column_start":38,"column_end":52},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":315},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":85011,"byte_end":85021,"line_start":52,"line_end":52,"column_start":33,"column_end":43},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1582},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":86317,"byte_end":86322,"line_start":91,"line_end":91,"column_start":20,"column_end":25},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":86552,"byte_end":86556,"line_start":102,"line_end":102,"column_start":26,"column_end":30},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":87193,"byte_end":87197,"line_start":118,"line_end":118,"column_start":9,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":92002,"byte_end":92014,"line_start":282,"line_end":282,"column_start":9,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":92890,"byte_end":92904,"line_start":314,"line_end":314,"column_start":49,"column_end":63},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1593},"to":{"krate":2,"index":1814}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":93751,"byte_end":93762,"line_start":347,"line_end":347,"column_start":9,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":94499,"byte_end":94510,"line_start":376,"line_end":376,"column_start":42,"column_end":53},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":477},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":96145,"byte_end":96154,"line_start":428,"line_end":428,"column_start":13,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":130898,"byte_end":130907,"line_start":1507,"line_end":1507,"column_start":28,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":491},"to":{"krate":0,"index":1303}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/triedbmut.rs","byte_start":132838,"byte_end":132847,"line_start":1585,"line_end":1585,"column_start":22,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":491},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150182,"byte_end":150191,"line_start":30,"line_end":30,"column_start":14,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":565},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedb.rs","byte_start":150914,"byte_end":150923,"line_start":57,"line_end":57,"column_start":26,"column_end":35},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":565},"to":{"krate":0,"index":1287}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":153174,"byte_end":153186,"line_start":29,"line_end":29,"column_start":14,"column_end":26},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/sectriedbmut.rs","byte_start":154121,"byte_end":154133,"line_start":57,"line_end":57,"column_start":29,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":598},"to":{"krate":0,"index":1303}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156639,"byte_end":156647,"line_start":40,"line_end":40,"column_start":28,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1652},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/recorder.rs","byte_start":156717,"byte_end":156725,"line_start":46,"line_end":46,"column_start":16,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":162050,"byte_end":162055,"line_start":32,"line_end":32,"column_start":14,"column_end":19},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":162576,"byte_end":162581,"line_start":50,"line_end":50,"column_start":26,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":648},"to":{"krate":0,"index":1287}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":163416,"byte_end":163429,"line_start":85,"line_end":85,"column_start":14,"column_end":27},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":163691,"byte_end":163704,"line_start":98,"line_end":98,"column_start":34,"column_end":47},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":669},"to":{"krate":0,"index":1314}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdb.rs","byte_start":163927,"byte_end":163940,"line_start":108,"line_end":108,"column_start":27,"column_end":40},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":669},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":166080,"byte_end":166088,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/fatdbmut.rs","byte_start":167021,"byte_end":167029,"line_start":61,"line_end":61,"column_start":29,"column_end":37},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":702},"to":{"krate":0,"index":1303}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":171455,"byte_end":171465,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":179975,"byte_end":179986,"line_start":333,"line_end":333,"column_start":24,"column_end":35},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":180187,"byte_end":180198,"line_start":340,"line_end":340,"column_start":6,"column_end":17},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":791},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":180922,"byte_end":180930,"line_start":369,"line_end":369,"column_start":25,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":813},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":181073,"byte_end":181081,"line_start":375,"line_end":375,"column_start":60,"column_end":68},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":813},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":181795,"byte_end":181811,"line_start":404,"line_end":404,"column_start":21,"column_end":37},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":825},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":182144,"byte_end":182157,"line_start":420,"line_end":420,"column_start":25,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":832},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":182329,"byte_end":182342,"line_start":427,"line_end":427,"column_start":60,"column_end":73},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":832},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iter_build.rs","byte_start":183111,"byte_end":183127,"line_start":453,"line_end":453,"column_start":60,"column_end":76},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":825},"to":{"krate":0,"index":788}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":193954,"byte_end":193959,"line_start":40,"line_end":40,"column_start":17,"column_end":22},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1681},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":194852,"byte_end":194870,"line_start":64,"line_end":64,"column_start":25,"column_end":43},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":195541,"byte_end":195559,"line_start":91,"line_end":91,"column_start":25,"column_end":43},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":199969,"byte_end":199987,"line_start":249,"line_end":249,"column_start":45,"column_end":63},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":874},"to":{"krate":0,"index":1314}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/iterator.rs","byte_start":200160,"byte_end":200178,"line_start":259,"line_end":259,"column_start":38,"column_end":56},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lookup.rs","byte_start":219293,"byte_end":219299,"line_start":34,"line_end":34,"column_start":16,"column_end":22},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228257,"byte_end":228266,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1700},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":228323,"byte_end":228332,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1700},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibblevec.rs","byte_start":234066,"byte_end":234075,"line_start":227,"line_end":227,"column_start":36,"column_end":45},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1700},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":236868,"byte_end":236887,"line_start":23,"line_end":23,"column_start":23,"column_end":42},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1100},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":237072,"byte_end":237083,"line_start":34,"line_end":34,"column_start":10,"column_end":21},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1714},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243029,"byte_end":243040,"line_start":236,"line_end":236,"column_start":28,"column_end":39},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243138,"byte_end":243149,"line_start":242,"line_end":242,"column_start":24,"column_end":35},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":1619}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243268,"byte_end":243279,"line_start":248,"line_end":248,"column_start":17,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243313,"byte_end":243324,"line_start":250,"line_end":250,"column_start":25,"column_end":36},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":1656}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243435,"byte_end":243446,"line_start":256,"line_end":256,"column_start":18,"column_end":29},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":1645}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/nibbleslice.rs","byte_start":243834,"byte_end":243845,"line_start":272,"line_end":272,"column_start":25,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":248341,"byte_end":248356,"line_start":28,"line_end":28,"column_start":10,"column_end":25},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":250491,"byte_end":250506,"line_start":97,"line_end":97,"column_start":24,"column_end":39},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1619}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":251138,"byte_end":251153,"line_start":123,"line_end":123,"column_start":17,"column_end":32},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":251186,"byte_end":251201,"line_start":125,"line_end":125,"column_start":25,"column_end":40},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1656}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":251314,"byte_end":251329,"line_start":131,"line_end":131,"column_start":18,"column_end":33},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":1645}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/nibble/leftnibbleslice.rs","byte_start":251456,"byte_end":251471,"line_start":138,"line_end":138,"column_start":30,"column_end":45},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/node_codec.rs","byte_start":255053,"byte_end":255058,"line_start":32,"line_end":32,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":259448,"byte_end":259465,"line_start":53,"line_end":53,"column_start":20,"column_end":37},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/trie_codec.rs","byte_start":267164,"byte_end":267181,"line_start":263,"line_end":263,"column_start":24,"column_end":41},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":3043,"byte_end":3052,"line_start":102,"line_end":102,"column_start":29,"column_end":38},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1723},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":3883,"byte_end":3892,"line_start":125,"line_end":125,"column_start":22,"column_end":31},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1723},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":5483,"byte_end":5484,"line_start":169,"line_end":169,"column_start":36,"column_end":37},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1273},"to":{"krate":0,"index":1261}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8220,"byte_end":8228,"line_start":252,"line_end":252,"column_start":40,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":4773},"to":{"krate":0,"index":1314}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":8596,"byte_end":8604,"line_start":269,"line_end":269,"column_start":18,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1767},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":9428,"byte_end":9437,"line_start":304,"line_end":304,"column_start":38,"column_end":47},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1319},"to":{"krate":0,"index":1287}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":10067,"byte_end":10078,"line_start":335,"line_end":335,"column_start":14,"column_end":25},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1781},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12404,"byte_end":12409,"line_start":404,"line_end":404,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":1356}},{"span":{"file_name":"/home/ipfs/.cargo/registry/src/crates.rustcc.com-a21e0f92747beca3/trie-db-0.20.1/src/lib.rs","byte_start":12412,"byte_end":12422,"line_start":404,"line_end":404,"column_start":38,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":1352},"to":{"krate":0,"index":1356}}]}