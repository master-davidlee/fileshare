{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support","program":"/home/ipfs/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","frame_support","--edition=2018","/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"once_cell\"","--cfg","feature=\"serde\"","--cfg","feature=\"sp-state-machine\"","--cfg","feature=\"std\"","-C","metadata=a9880e76644bf355","-C","extra-filename=-a9880e76644bf355","--out-dir","/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps","-L","dependency=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps","--extern","bitmask=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libbitmask-fbeedc408fd1d375.rmeta","--extern","frame_metadata=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libframe_metadata-493b4878b8c39464.rmeta","--extern","frame_support_procedural=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libframe_support_procedural-2b378c783ddbb725.so","--extern","impl_trait_for_tuples=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libimpl_trait_for_tuples-d3ed7ab712078c16.so","--extern","log=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/liblog-0cfc9f3120ac6e4a.rmeta","--extern","once_cell=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libonce_cell-ec83331676be648c.rmeta","--extern","codec=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libparity_scale_codec-f846fd866e90eb5c.rmeta","--extern","paste=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libpaste-201b3031ca389bab.rmeta","--extern","serde=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libserde-8e3179877dc95843.rmeta","--extern","smallvec=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsmallvec-a171f269ed47d617.rmeta","--extern","sp_arithmetic=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_arithmetic-9e003245508a5a06.rmeta","--extern","sp_core=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_core-9055fb2270914a2d.rmeta","--extern","sp_inherents=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_inherents-b01de02d34892753.rmeta","--extern","sp_io=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_io-09bc09859104f0c1.rmeta","--extern","sp_runtime=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_runtime-9caae4869a8bb1df.rmeta","--extern","sp_state_machine=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_state_machine-fe01307b60f1adcd.rmeta","--extern","sp_std=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_std-31df6ce51c93d927.rmeta","--extern","sp_tracing=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_tracing-c70f969151c7dbf6.rmeta","--cap-lints","allow","-L","native=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/build/clear_on_drop-a23791235c119df6/out","--error-format=json","--sysroot","/home/ipfs/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libframe_support-a9880e76644bf355.rmeta"},"prelude":{"crate_id":{"name":"frame_support","disambiguator":[8782947252842266080,9503866071100922085]},"crate_root":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src","external_crates":[{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":15,"id":{"name":"bitmask","disambiguator":[1619848168571468831,6398955130628558161]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":16,"id":{"name":"sp_tracing","disambiguator":[11438562976580646038,3002446573349231072]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":17,"id":{"name":"tracing","disambiguator":[13479947174673550820,4133118777693013263]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":18,"id":{"name":"cfg_if","disambiguator":[905820604123660737,9080961431952796619]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":19,"id":{"name":"tracing_core","disambiguator":[12837523844224698924,229843443816219795]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":20,"id":{"name":"lazy_static","disambiguator":[9660684555614800310,8568331244489293542]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":21,"id":{"name":"tracing_attributes","disambiguator":[2263492286649080348,13111413153421272784]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","num":22,"id":{"name":"serde","disambiguator":[13481768320746797087,7282555180186658229]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":23,"id":{"name":"serde_derive","disambiguator":[14214070500933581380,3624999802238555216]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","num":24,"id":{"name":"sp_std","disambiguator":[11276958021017479825,16325732417868216137]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":25,"id":{"name":"parity_scale_codec","disambiguator":[15638882894901664300,15938776292720705477]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":26,"id":{"name":"parity_scale_codec_derive","disambiguator":[379814399442547304,17581532101419470896]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":27,"id":{"name":"arrayvec","disambiguator":[1332372460335241694,11021197825096612758]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":28,"id":{"name":"byte_slice_cast","disambiguator":[3640415380441394815,6311138287404375443]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":29,"id":{"name":"once_cell","disambiguator":[9949018888993973705,561490500926270181]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":30,"id":{"name":"parking_lot","disambiguator":[4077664270008470479,11966793794786088639]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":31,"id":{"name":"lock_api","disambiguator":[2863804777762583869,14799884867851676310]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":32,"id":{"name":"scopeguard","disambiguator":[5081943333480440636,9076196664652206448]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":33,"id":{"name":"parking_lot_core","disambiguator":[10023082735607659909,12352998360333487442]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","num":34,"id":{"name":"smallvec","disambiguator":[4204636050770628742,12614792987383810951]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":35,"id":{"name":"libc","disambiguator":[15850054303935087509,2172107276946414463]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":36,"id":{"name":"paste","disambiguator":[11050493384304019062,12843146093891921070]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":37,"id":{"name":"proc_macro_hack","disambiguator":[11648198905521943211,17157862379242527653]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","num":38,"id":{"name":"paste_impl","disambiguator":[10824166642002270382,7200536081022686254]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":39,"id":{"name":"sp_state_machine","disambiguator":[698521374749418897,10707581595686833401]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","num":40,"id":{"name":"log","disambiguator":[9335353625162574946,15944831640773690670]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":41,"id":{"name":"hash_db","disambiguator":[9792644969574235955,776104945287127595]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","num":42,"id":{"name":"sp_core","disambiguator":[17683045494970980731,13559405023477717555]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":43,"id":{"name":"sp_debug_derive","disambiguator":[13522996333100151204,9314162219563761913]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":44,"id":{"name":"impl_serde","disambiguator":[8980924363609643778,8190912899161023955]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":45,"id":{"name":"blake2_rfc","disambiguator":[13425746585612006076,3893349097137814390]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":46,"id":{"name":"arrayvec","disambiguator":[8980556773631144340,1530384929258256254]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":47,"id":{"name":"nodrop","disambiguator":[15580487097472407489,16164216452101372544]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":48,"id":{"name":"constant_time_eq","disambiguator":[7513921960350961442,6826608885349661575]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":49,"id":{"name":"sha2","disambiguator":[2087999941899417202,8652755061219861371]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":50,"id":{"name":"block_buffer","disambiguator":[13746670423446533395,10291558624333589947]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":51,"id":{"name":"byteorder","disambiguator":[8554857055557278435,8958170879440380952]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":52,"id":{"name":"block_padding","disambiguator":[15921479850100810545,9304032769572156234]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":53,"id":{"name":"byte_tools","disambiguator":[16878705203460379785,8432621841611626380]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":54,"id":{"name":"generic_array","disambiguator":[961146259118279585,2903465428615636575]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":55,"id":{"name":"typenum","disambiguator":[10535840393202809930,23112338360262232]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":56,"id":{"name":"fake_simd","disambiguator":[10163378265795300682,3429049470422498345]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":57,"id":{"name":"opaque_debug","disambiguator":[542094102041843082,10502796311115957597]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":58,"id":{"name":"digest","disambiguator":[6126133259670863194,4625233068246866504]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":59,"id":{"name":"tiny_keccak","disambiguator":[16657255994201729273,15749590166371444127]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":60,"id":{"name":"crunchy","disambiguator":[8492468043868098796,9147562601699587076]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":61,"id":{"name":"twox_hash","disambiguator":[14103234801566248918,11854203410743868499]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":62,"id":{"name":"rand","disambiguator":[14852911624231536199,4329007306221210672]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":63,"id":{"name":"rand_core","disambiguator":[8541689899428407495,4972805062826425925]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":64,"id":{"name":"getrandom","disambiguator":[13618700189715949314,16365477718892601647]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":65,"id":{"name":"rand_chacha","disambiguator":[5821611541543872135,256988615729141104]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":66,"id":{"name":"ppv_lite86","disambiguator":[2483357076725709498,12969028423603202931]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":67,"id":{"name":"rand_pcg","disambiguator":[1329119161985853472,9189108109752656620]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":68,"id":{"name":"regex","disambiguator":[14198027042281804208,86081918665039131]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":69,"id":{"name":"aho_corasick","disambiguator":[6163840134106157642,11678023651240554382]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":70,"id":{"name":"memchr","disambiguator":[1600158827687491313,9258850746937660075]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":71,"id":{"name":"regex_syntax","disambiguator":[6585461900833040906,12117303110178991079]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":72,"id":{"name":"thread_local","disambiguator":[6963393236790488947,14544403037844186749]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":73,"id":{"name":"base58","disambiguator":[16777386067770725910,11698301221143548428]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":74,"id":{"name":"zeroize","disambiguator":[8419538233743450039,4463467074577268889]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":75,"id":{"name":"zeroize_derive","disambiguator":[2444816796196962847,17316197202642986580]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":76,"id":{"name":"sp_runtime_interface","disambiguator":[682286166039121589,14525474089550891235]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":77,"id":{"name":"sp_wasm_interface","disambiguator":[8675793106772160261,13785408035542529938]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","num":78,"id":{"name":"impl_trait_for_tuples","disambiguator":[11683877044574956040,7740304785833687617]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":79,"id":{"name":"wasmi","disambiguator":[2416228699110756094,1766770583142414386]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":80,"id":{"name":"memory_units","disambiguator":[14678550925423856477,13054517670253120849]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":81,"id":{"name":"parity_wasm","disambiguator":[1554235133951985503,17351528177382477681]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":82,"id":{"name":"wasmi_validation","disambiguator":[16639948640573147516,6276059922634634811]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":83,"id":{"name":"num_rational","disambiguator":[6975831310803048684,9911959382833982500]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":84,"id":{"name":"num_bigint","disambiguator":[12568277182492191496,17615354144430726922]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":85,"id":{"name":"num_integer","disambiguator":[6615314100295200538,6263506198981215227]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":86,"id":{"name":"num_traits","disambiguator":[17866579788280904889,8893385662677143502]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":87,"id":{"name":"sp_runtime_interface_proc_macro","disambiguator":[10297837370306352563,17721521789272836432]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":88,"id":{"name":"sp_externalities","disambiguator":[13735059725287377343,7074722714493672266]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":89,"id":{"name":"sp_storage","disambiguator":[8388726998902642419,5566405698735839699]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":90,"id":{"name":"ref_cast","disambiguator":[14927837505420523305,6271955165879955941]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":91,"id":{"name":"ref_cast_impl","disambiguator":[4388911118607149955,14232018770742587068]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":92,"id":{"name":"impl_serde","disambiguator":[4240565461243128030,16964821940194849107]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":93,"id":{"name":"environmental","disambiguator":[4327085142237264898,15570963526468317845]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":94,"id":{"name":"primitive_types","disambiguator":[2776970764958629400,18334998628678477911]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":95,"id":{"name":"fixed_hash","disambiguator":[14470681025450579457,6662852255323844967]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":96,"id":{"name":"static_assertions","disambiguator":[2878701793821026304,16986476632016046768]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":97,"id":{"name":"rustc_hex","disambiguator":[10434719161438519964,14346445293922435357]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":98,"id":{"name":"uint","disambiguator":[16452983131080529725,17838387769575104159]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":99,"id":{"name":"impl_codec","disambiguator":[10299275643052968783,3017370659095368483]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":100,"id":{"name":"substrate_bip39","disambiguator":[16026320640443918052,13713051357735189700]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":101,"id":{"name":"hmac","disambiguator":[11460341029875594496,1906197491684850741]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":102,"id":{"name":"crypto_mac","disambiguator":[8320459484509458636,4799276508247752895]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":103,"id":{"name":"subtle","disambiguator":[8535025202508457436,17708549248523872086]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":104,"id":{"name":"pbkdf2","disambiguator":[4851686168477502927,14028351777984925782]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":105,"id":{"name":"schnorrkel","disambiguator":[16900468384019694665,10044191511765835896]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":106,"id":{"name":"arrayref","disambiguator":[16829708543304003037,4144275909003046035]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":107,"id":{"name":"curve25519_dalek","disambiguator":[16644072626332759431,10277902055030964482]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":108,"id":{"name":"subtle","disambiguator":[10234490685617874908,7684466441341660066]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":109,"id":{"name":"merlin","disambiguator":[7121650087445607272,2582201859466345986]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":110,"id":{"name":"keccak","disambiguator":[11472536135153304124,6639515317597576426]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":111,"id":{"name":"bip39","disambiguator":[17568215238128443509,8359727043341043963]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":112,"id":{"name":"failure","disambiguator":[16123704538531388289,16892100019265791353]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":113,"id":{"name":"failure_derive","disambiguator":[3132760448282680033,18074464896337337867]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":114,"id":{"name":"backtrace","disambiguator":[18134607837615136743,9446271803075368385]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":115,"id":{"name":"rustc_demangle","disambiguator":[5146049380465956145,771809060488072883]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":116,"id":{"name":"addr2line","disambiguator":[4367394800532784875,14916486106589456017]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":117,"id":{"name":"gimli","disambiguator":[2365300210788396002,3502160938625290209]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":118,"id":{"name":"object","disambiguator":[14105361202928525417,13644467560032816245]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":119,"id":{"name":"rustc_hash","disambiguator":[642462796696129389,1517420890865137522]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":120,"id":{"name":"unicode_normalization","disambiguator":[5970646019162551857,17803897583820378264]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":121,"id":{"name":"secp256k1","disambiguator":[8656482482167472749,13898755881770913524]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":122,"id":{"name":"hmac_drbg","disambiguator":[1089521263031708807,8798061245638132398]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":123,"id":{"name":"hash256_std_hasher","disambiguator":[5964121242482212794,15478076518551278946]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":124,"id":{"name":"futures","disambiguator":[6054638481473170312,13203952068894848752]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":125,"id":{"name":"futures_core","disambiguator":[11059587244940335782,9444176274970569630]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":126,"id":{"name":"futures_util","disambiguator":[2297583133361674607,515887674582286629]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":127,"id":{"name":"pin_utils","disambiguator":[3395662280469368698,5400338344872609158]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":128,"id":{"name":"futures_task","disambiguator":[3375057385569108956,3660099607051496066]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":129,"id":{"name":"futures_sink","disambiguator":[11970731802322653413,20414178876719527]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":130,"id":{"name":"pin_project","disambiguator":[8927595869626226213,3154285897060979768]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":131,"id":{"name":"pin_project_internal","disambiguator":[8120037564058734458,5789199392772687002]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":132,"id":{"name":"futures_channel","disambiguator":[13337516612303749283,16221296507189771847]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":133,"id":{"name":"slab","disambiguator":[4729543071339994363,11740316045407999008]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":134,"id":{"name":"futures_io","disambiguator":[14784988759255588471,7048209535732240470]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":135,"id":{"name":"futures_macro","disambiguator":[13580139449298337526,18153847132449885543]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":136,"id":{"name":"proc_macro_nested","disambiguator":[325458717225558210,1907731413471412174]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":137,"id":{"name":"futures_executor","disambiguator":[393111632237910805,16437123074104340741]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":138,"id":{"name":"num_cpus","disambiguator":[3634483020136970562,12375898465086858394]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":139,"id":{"name":"parity_util_mem","disambiguator":[3673319352374838710,9109263036345257279]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":140,"id":{"name":"parity_util_mem_derive","disambiguator":[16094718766684562609,9112552796339687964]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":141,"id":{"name":"derive_more","disambiguator":[13664702256915482174,18424806257437289619]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":142,"id":{"name":"hex","disambiguator":[18431432733982247784,9665997700775139809]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":143,"id":{"name":"ed25519_dalek","disambiguator":[6077726820243101941,623554713352160653]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":144,"id":{"name":"clear_on_drop","disambiguator":[17664436509209251898,11479650557223418245]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":145,"id":{"name":"sp_trie","disambiguator":[10248385436001548364,13201773522252176679]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":146,"id":{"name":"trie_db","disambiguator":[14058592916532296697,15101355858841735982]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":147,"id":{"name":"hashbrown","disambiguator":[10607846963804169666,8224092687569940531]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":148,"id":{"name":"ahash","disambiguator":[7836108867056887213,9815184329433061515]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":149,"id":{"name":"const_random","disambiguator":[4215802248038723435,8585138714700839987]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":150,"id":{"name":"const_random_macro","disambiguator":[17458909312445488312,12242545549692467389]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":151,"id":{"name":"trie_root","disambiguator":[14527925958066830872,5108783250952835176]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":152,"id":{"name":"memory_db","disambiguator":[8751240236175815197,15856563000382176854]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":153,"id":{"name":"sp_panic_handler","disambiguator":[9035826821212920039,325693535763843033]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":154,"id":{"name":"sp_io","disambiguator":[17240266865883701302,11091636102929359783]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","num":155,"id":{"name":"frame_metadata","disambiguator":[1275294346644632988,11275879783152833245]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","num":156,"id":{"name":"sp_runtime","disambiguator":[17196542902034591833,17105029301237206912]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","num":157,"id":{"name":"sp_application_crypto","disambiguator":[9476118913656431312,14367123982054691573]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","num":158,"id":{"name":"sp_arithmetic","disambiguator":[8176318265880389008,7753099555937938416]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","num":159,"id":{"name":"integer_sqrt","disambiguator":[9275225289175460513,11772712138008559603]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/inherent.rs","num":160,"id":{"name":"sp_inherents","disambiguator":[15443672778924761386,2787903443966412348]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","num":161,"id":{"name":"frame_support_procedural","disambiguator":[6065211030329364633,16613927533931804152]}}],"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":686,"byte_end":18641,"line_start":18,"line_end":652,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":0},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":920,"byte_end":930,"line_start":29,"line_end":29,"column_start":9,"column_end":19},"alias_span":null,"name":"sp_tracing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":0},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":965,"byte_end":970,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"alias_span":null,"name":"serde","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":0},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":995,"byte_end":1001,"line_start":34,"line_end":34,"column_start":9,"column_end":15},"alias_span":null,"name":"sp_std","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":25,"index":0},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1026,"byte_end":1031,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"alias_span":null,"name":"codec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":29,"index":0},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1109,"byte_end":1118,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"alias_span":null,"name":"once_cell","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":36,"index":0},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1143,"byte_end":1148,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"alias_span":null,"name":"paste","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":39,"index":2115},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1215,"byte_end":1233,"line_start":45,"line_end":45,"column_start":27,"column_end":45},"alias_span":null,"name":"BasicExternalities","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":154,"index":120},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1274,"byte_end":1278,"line_start":47,"line_end":47,"column_start":25,"column_end":29},"alias_span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1282,"byte_end":1294,"line_start":47,"line_end":47,"column_start":33,"column_end":45},"name":"storage_root","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":43,"index":43},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1331,"byte_end":1343,"line_start":49,"line_end":49,"column_start":21,"column_end":33},"alias_span":null,"name":"RuntimeDebug","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":40,"index":17},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21975,"byte_end":21979,"line_start":93,"line_end":93,"column_start":15,"column_end":19},"alias_span":null,"name":"info","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":40,"index":18},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21981,"byte_end":21986,"line_start":93,"line_end":93,"column_start":21,"column_end":26},"alias_span":null,"name":"debug","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":40,"index":15},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21988,"byte_end":21993,"line_start":93,"line_end":93,"column_start":28,"column_end":33},"alias_span":null,"name":"error","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":40,"index":19},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21995,"byte_end":22000,"line_start":93,"line_end":93,"column_start":35,"column_end":40},"alias_span":null,"name":"trace","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":40,"index":16},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22002,"byte_end":22006,"line_start":93,"line_end":93,"column_start":42,"column_end":46},"alias_span":null,"name":"warn","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22024,"byte_end":22037,"line_start":94,"line_end":94,"column_start":16,"column_end":29},"alias_span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22041,"byte_end":22046,"line_start":94,"line_end":94,"column_start":33,"column_end":38},"name":"print","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":40,"index":17},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22262,"byte_end":22266,"line_start":102,"line_end":102,"column_start":18,"column_end":22},"alias_span":null,"name":"info","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":0,"index":38},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22268,"byte_end":22273,"line_start":102,"line_end":102,"column_start":24,"column_end":29},"alias_span":null,"name":"debug","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":40,"index":15},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22275,"byte_end":22280,"line_start":102,"line_end":102,"column_start":31,"column_end":36},"alias_span":null,"name":"error","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":40,"index":19},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22282,"byte_end":22287,"line_start":102,"line_end":102,"column_start":38,"column_end":43},"alias_span":null,"name":"trace","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":40,"index":16},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22289,"byte_end":22293,"line_start":102,"line_end":102,"column_start":45,"column_end":49},"alias_span":null,"name":"warn","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22295,"byte_end":22300,"line_start":102,"line_end":102,"column_start":51,"column_end":56},"alias_span":null,"name":"print","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":2,"index":5420},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25850,"byte_end":25856,"line_start":21,"line_end":21,"column_start":25,"column_end":31},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":5,"index":2730},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25858,"byte_end":25861,"line_start":21,"line_end":21,"column_start":33,"column_end":36},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":5,"index":4064},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25873,"byte_end":25876,"line_start":21,"line_end":21,"column_start":48,"column_end":51},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":2,"index":1593},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25878,"byte_end":25883,"line_start":21,"line_end":21,"column_start":53,"column_end":58},"alias_span":null,"name":"Clone","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":2,"index":1624},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25885,"byte_end":25887,"line_start":21,"line_end":21,"column_start":60,"column_end":62},"alias_span":null,"name":"Eq","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":2,"index":1619},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25889,"byte_end":25898,"line_start":21,"line_end":21,"column_start":64,"column_end":73},"alias_span":null,"name":"PartialEq","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":2,"index":1878},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25901,"byte_end":25907,"line_start":21,"line_end":21,"column_start":76,"column_end":82},"alias_span":null,"name":"marker","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":25,"index":123},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25933,"byte_end":25938,"line_start":22,"line_end":22,"column_start":24,"column_end":29},"alias_span":null,"name":"Codec","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":25,"index":657},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25940,"byte_end":25950,"line_start":22,"line_end":22,"column_start":31,"column_end":41},"alias_span":null,"name":"EncodeLike","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":25,"index":119},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25952,"byte_end":25958,"line_start":22,"line_end":22,"column_start":43,"column_end":49},"alias_span":null,"name":"Decode","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":25,"index":107},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25960,"byte_end":25966,"line_start":22,"line_end":22,"column_start":51,"column_end":57},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":25,"index":54},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25968,"byte_end":25973,"line_start":22,"line_end":22,"column_start":59,"column_end":64},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":25,"index":76},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25975,"byte_end":25981,"line_start":22,"line_end":22,"column_start":66,"column_end":72},"alias_span":null,"name":"Output","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":25,"index":477},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25983,"byte_end":25993,"line_start":22,"line_end":22,"column_start":74,"column_end":84},"alias_span":null,"name":"HasCompact","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":25,"index":222},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25995,"byte_end":26006,"line_start":22,"line_end":22,"column_start":86,"column_end":97},"alias_span":null,"name":"EncodeAsRef","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":155,"index":113},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26036,"byte_end":26052,"line_start":24,"line_end":24,"column_start":2,"column_end":18},"alias_span":null,"name":"FunctionMetadata","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":155,"index":100},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26054,"byte_end":26069,"line_start":24,"line_end":24,"column_start":20,"column_end":35},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":155,"index":45},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26071,"byte_end":26091,"line_start":24,"line_end":24,"column_start":37,"column_end":57},"alias_span":null,"name":"DecodeDifferentArray","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":155,"index":145},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26093,"byte_end":26117,"line_start":24,"line_end":24,"column_start":59,"column_end":83},"alias_span":null,"name":"FunctionArgumentMetadata","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":155,"index":285},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26120,"byte_end":26142,"line_start":25,"line_end":25,"column_start":2,"column_end":24},"alias_span":null,"name":"ModuleConstantMetadata","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":155,"index":69},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26144,"byte_end":26155,"line_start":25,"line_end":25,"column_start":26,"column_end":37},"alias_span":null,"name":"DefaultByte","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":155,"index":349},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26157,"byte_end":26174,"line_start":25,"line_end":25,"column_start":39,"column_end":56},"alias_span":null,"name":"DefaultByteGetter","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":155,"index":65},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26176,"byte_end":26195,"line_start":25,"line_end":25,"column_start":58,"column_end":77},"alias_span":null,"name":"ModuleErrorMetadata","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":155,"index":318},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26197,"byte_end":26210,"line_start":25,"line_end":25,"column_start":79,"column_end":92},"alias_span":null,"name":"ErrorMetadata","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":1369},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26241,"byte_end":26256,"line_start":28,"line_end":28,"column_start":2,"column_end":17},"alias_span":null,"name":"GetDispatchInfo","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":5202},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26258,"byte_end":26270,"line_start":28,"line_end":28,"column_start":19,"column_end":31},"alias_span":null,"name":"DispatchInfo","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":1356},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26272,"byte_end":26281,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"alias_span":null,"name":"WeighData","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":1359},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26283,"byte_end":26299,"line_start":28,"line_end":28,"column_start":44,"column_end":60},"alias_span":null,"name":"ClassifyDispatch","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":156,"index":1131},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26301,"byte_end":26320,"line_start":28,"line_end":28,"column_start":62,"column_end":81},"alias_span":null,"name":"TransactionPriority","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":1346},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26322,"byte_end":26328,"line_start":28,"line_end":28,"column_start":83,"column_end":89},"alias_span":null,"name":"Weight","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":1362},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26331,"byte_end":26338,"line_start":29,"line_end":29,"column_start":2,"column_end":9},"alias_span":null,"name":"PaysFee","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":5231},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26340,"byte_end":26356,"line_start":29,"line_end":29,"column_start":11,"column_end":27},"alias_span":null,"name":"PostDispatchInfo","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":1381},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26358,"byte_end":26378,"line_start":29,"line_end":29,"column_start":29,"column_end":49},"alias_span":null,"name":"WithPostDispatchInfo","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":156,"index":993},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26412,"byte_end":26424,"line_start":31,"line_end":31,"column_start":30,"column_end":42},"alias_span":null,"name":"Dispatchable","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":156,"index":3669},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26426,"byte_end":26439,"line_start":31,"line_end":31,"column_start":44,"column_end":57},"alias_span":null,"name":"DispatchError","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":2848},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26466,"byte_end":26478,"line_start":32,"line_end":32,"column_start":25,"column_end":37},"alias_span":null,"name":"CallMetadata","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":1284},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26480,"byte_end":26495,"line_start":32,"line_end":32,"column_start":39,"column_end":54},"alias_span":null,"name":"GetCallMetadata","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":1281},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26497,"byte_end":26508,"line_start":32,"line_end":32,"column_start":56,"column_end":67},"alias_span":null,"name":"GetCallName","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":89,"index":352},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":129921,"byte_end":129930,"line_start":26,"line_end":26,"column_start":28,"column_end":37},"alias_span":null,"name":"ChildInfo","value":"","parent":{"krate":0,"index":229}},{"kind":"Use","ref_id":{"krate":89,"index":378},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":129932,"byte_end":129941,"line_start":26,"line_end":26,"column_start":39,"column_end":48},"alias_span":null,"name":"ChildType","value":"","parent":{"krate":0,"index":229}},{"kind":"Use","ref_id":{"krate":0,"index":287},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":135504,"byte_end":135514,"line_start":31,"line_end":31,"column_start":14,"column_end":24},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":268}},{"kind":"Use","ref_id":{"krate":0,"index":393},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":135536,"byte_end":135552,"line_start":32,"line_end":32,"column_start":21,"column_end":37},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":268}},{"kind":"Use","ref_id":{"krate":0,"index":512},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":135569,"byte_end":135581,"line_start":33,"line_end":33,"column_start":16,"column_end":28},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":268}},{"kind":"Use","ref_id":{"krate":155,"index":219},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/event.rs","byte_start":180562,"byte_end":180575,"line_start":20,"line_end":20,"column_start":26,"column_end":39},"alias_span":null,"name":"EventMetadata","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":155,"index":100},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/event.rs","byte_start":180577,"byte_end":180592,"line_start":20,"line_end":20,"column_start":41,"column_end":56},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":155,"index":188},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/event.rs","byte_start":180594,"byte_end":180612,"line_start":20,"line_end":20,"column_start":58,"column_end":76},"alias_span":null,"name":"OuterEventMetadata","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":155,"index":176},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/event.rs","byte_start":180614,"byte_end":180622,"line_start":20,"line_end":20,"column_start":78,"column_end":86},"alias_span":null,"name":"FnEncode","value":"","parent":{"krate":0,"index":900}},{"kind":"Use","ref_id":{"krate":155,"index":100},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207214,"byte_end":207229,"line_start":19,"line_end":19,"column_start":2,"column_end":17},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":176},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207231,"byte_end":207239,"line_start":19,"line_end":19,"column_start":19,"column_end":27},"alias_span":null,"name":"FnEncode","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":561},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207241,"byte_end":207256,"line_start":19,"line_end":19,"column_start":29,"column_end":44},"alias_span":null,"name":"RuntimeMetadata","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":668},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207258,"byte_end":207272,"line_start":19,"line_end":19,"column_start":46,"column_end":60},"alias_span":null,"name":"ModuleMetadata","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":91},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207274,"byte_end":207300,"line_start":19,"line_end":19,"column_start":62,"column_end":88},"alias_span":null,"name":"RuntimeMetadataLastVersion","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":349},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207303,"byte_end":207320,"line_start":20,"line_end":20,"column_start":2,"column_end":19},"alias_span":null,"name":"DefaultByteGetter","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":502},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207322,"byte_end":207345,"line_start":20,"line_end":20,"column_start":21,"column_end":44},"alias_span":null,"name":"RuntimeMetadataPrefixed","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":251},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207347,"byte_end":207367,"line_start":20,"line_end":20,"column_start":46,"column_end":66},"alias_span":null,"name":"StorageEntryMetadata","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":471},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207369,"byte_end":207384,"line_start":20,"line_end":20,"column_start":68,"column_end":83},"alias_span":null,"name":"StorageMetadata","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":396},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207387,"byte_end":207403,"line_start":21,"line_end":21,"column_start":2,"column_end":18},"alias_span":null,"name":"StorageEntryType","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":439},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207405,"byte_end":207425,"line_start":21,"line_end":21,"column_start":20,"column_end":40},"alias_span":null,"name":"StorageEntryModifier","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":69},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207427,"byte_end":207438,"line_start":21,"line_end":21,"column_start":42,"column_end":53},"alias_span":null,"name":"DefaultByte","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":354},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207440,"byte_end":207453,"line_start":21,"line_end":21,"column_start":55,"column_end":68},"alias_span":null,"name":"StorageHasher","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":65},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207455,"byte_end":207474,"line_start":21,"line_end":21,"column_start":70,"column_end":89},"alias_span":null,"name":"ModuleErrorMetadata","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":155,"index":532},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":207477,"byte_end":207494,"line_start":22,"line_end":22,"column_start":2,"column_end":19},"alias_span":null,"name":"ExtrinsicMetadata","value":"","parent":{"krate":0,"index":913}},{"kind":"Use","ref_id":{"krate":5,"index":4064},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/inherent.rs","byte_start":223776,"byte_end":223779,"line_start":19,"line_end":19,"column_start":29,"column_end":32},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":935}},{"kind":"Use","ref_id":{"krate":156,"index":955},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/inherent.rs","byte_start":223832,"byte_end":223837,"line_start":21,"line_end":21,"column_start":37,"column_end":42},"alias_span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/inherent.rs","byte_start":223841,"byte_end":223847,"line_start":21,"line_end":21,"column_start":46,"column_end":52},"name":"BlockT","value":"","parent":{"krate":0,"index":935}},{"kind":"Use","ref_id":{"krate":156,"index":965},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/inherent.rs","byte_start":223849,"byte_end":223858,"line_start":21,"line_end":21,"column_start":54,"column_end":63},"alias_span":null,"name":"Extrinsic","value":"","parent":{"krate":0,"index":935}},{"kind":"Use","ref_id":{"krate":160,"index":101},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/inherent.rs","byte_start":223899,"byte_end":223911,"line_start":23,"line_end":23,"column_start":24,"column_end":36},"alias_span":null,"name":"InherentData","value":"","parent":{"krate":0,"index":935}},{"kind":"Use","ref_id":{"krate":160,"index":72},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/inherent.rs","byte_start":223913,"byte_end":223928,"line_start":23,"line_end":23,"column_start":38,"column_end":53},"alias_span":null,"name":"ProvideInherent","value":"","parent":{"krate":0,"index":935}},{"kind":"Use","ref_id":{"krate":160,"index":122},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/inherent.rs","byte_start":223930,"byte_end":223950,"line_start":23,"line_end":23,"column_start":55,"column_end":75},"alias_span":null,"name":"CheckInherentsResult","value":"","parent":{"krate":0,"index":935}},{"kind":"Use","ref_id":{"krate":160,"index":64},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/inherent.rs","byte_start":223952,"byte_end":223964,"line_start":23,"line_end":23,"column_start":77,"column_end":89},"alias_span":null,"name":"IsFatalError","value":"","parent":{"krate":0,"index":935}},{"kind":"Use","ref_id":{"krate":156,"index":1041},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/unsigned.rs","byte_start":227704,"byte_end":227720,"line_start":19,"line_end":19,"column_start":36,"column_end":52},"alias_span":null,"name":"ValidateUnsigned","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":156,"index":1150},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/unsigned.rs","byte_start":227789,"byte_end":227808,"line_start":22,"line_end":22,"column_start":2,"column_end":21},"alias_span":null,"name":"TransactionValidity","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":156,"index":3243},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/unsigned.rs","byte_start":227810,"byte_end":227828,"line_start":22,"line_end":22,"column_start":23,"column_end":41},"alias_span":null,"name":"UnknownTransaction","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":156,"index":3280},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/unsigned.rs","byte_start":227830,"byte_end":227854,"line_start":22,"line_end":22,"column_start":43,"column_end":67},"alias_span":null,"name":"TransactionValidityError","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":156,"index":3316},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/unsigned.rs","byte_start":227856,"byte_end":227873,"line_start":22,"line_end":22,"column_start":69,"column_end":86},"alias_span":null,"name":"TransactionSource","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":156,"index":2651},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/error.rs","byte_start":231757,"byte_end":231768,"line_start":21,"line_end":21,"column_start":30,"column_end":41},"alias_span":null,"name":"LookupError","value":"","parent":{"krate":0,"index":954}},{"kind":"Use","ref_id":{"krate":156,"index":2638},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/error.rs","byte_start":231770,"byte_end":231779,"line_start":21,"line_end":21,"column_start":43,"column_end":52},"alias_span":null,"name":"BadOrigin","value":"","parent":{"krate":0,"index":954}},{"kind":"Use","ref_id":{"krate":155,"index":65},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/error.rs","byte_start":231822,"byte_end":231841,"line_start":23,"line_end":23,"column_start":26,"column_end":45},"alias_span":null,"name":"ModuleErrorMetadata","value":"","parent":{"krate":0,"index":954}},{"kind":"Use","ref_id":{"krate":155,"index":318},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/error.rs","byte_start":231843,"byte_end":231856,"line_start":23,"line_end":23,"column_start":47,"column_end":60},"alias_span":null,"name":"ErrorMetadata","value":"","parent":{"krate":0,"index":954}},{"kind":"Use","ref_id":{"krate":155,"index":100},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/error.rs","byte_start":231858,"byte_end":231873,"line_start":23,"line_end":23,"column_start":62,"column_end":77},"alias_span":null,"name":"DecodeDifferent","value":"","parent":{"krate":0,"index":954}},{"kind":"Use","ref_id":{"krate":156,"index":1131},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":289320,"byte_end":289339,"line_start":143,"line_end":143,"column_start":43,"column_end":62},"alias_span":null,"name":"TransactionPriority","value":"","parent":{"krate":0,"index":1319}},{"kind":"Use","ref_id":{"krate":0,"index":893},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1663,"byte_end":1670,"line_start":73,"line_end":73,"column_start":2,"column_end":9},"alias_span":null,"name":"Twox256","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":886},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1672,"byte_end":1679,"line_start":73,"line_end":73,"column_start":11,"column_end":18},"alias_span":null,"name":"Twox128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":879},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1681,"byte_end":1691,"line_start":73,"line_end":73,"column_start":20,"column_end":30},"alias_span":null,"name":"Blake2_256","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":872},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1693,"byte_end":1703,"line_start":73,"line_end":73,"column_start":32,"column_end":42},"alias_span":null,"name":"Blake2_128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":851},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1705,"byte_end":1713,"line_start":73,"line_end":73,"column_start":44,"column_end":52},"alias_span":null,"name":"Identity","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":858},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1715,"byte_end":1727,"line_start":73,"line_end":73,"column_start":54,"column_end":66},"alias_span":null,"name":"Twox64Concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":865},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1729,"byte_end":1745,"line_start":73,"line_end":73,"column_start":68,"column_end":84},"alias_span":null,"name":"Blake2_128Concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":821},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1747,"byte_end":1755,"line_start":73,"line_end":73,"column_start":86,"column_end":94},"alias_span":null,"name":"Hashable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":846},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1758,"byte_end":1771,"line_start":74,"line_end":74,"column_start":2,"column_end":15},"alias_span":null,"name":"StorageHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":849},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1773,"byte_end":1796,"line_start":74,"line_end":74,"column_start":17,"column_end":40},"alias_span":null,"name":"ReversibleStorageHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":614},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1826,"byte_end":1838,"line_start":77,"line_end":77,"column_start":2,"column_end":14},"alias_span":null,"name":"StorageValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":641},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1840,"byte_end":1850,"line_start":77,"line_end":77,"column_start":16,"column_end":26},"alias_span":null,"name":"StorageMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":714},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1852,"byte_end":1868,"line_start":77,"line_end":77,"column_start":28,"column_end":44},"alias_span":null,"name":"StorageDoubleMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":781},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1870,"byte_end":1888,"line_start":77,"line_end":77,"column_start":46,"column_end":64},"alias_span":null,"name":"StoragePrefixedMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":690},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1890,"byte_end":1908,"line_start":77,"line_end":77,"column_start":66,"column_end":84},"alias_span":null,"name":"IterableStorageMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":699},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1911,"byte_end":1935,"line_start":78,"line_end":78,"column_start":2,"column_end":26},"alias_span":null,"name":"IterableStorageDoubleMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":555},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1937,"byte_end":1946,"line_start":78,"line_end":78,"column_start":28,"column_end":37},"alias_span":null,"name":"migration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":108},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1975,"byte_end":1984,"line_start":80,"line_end":80,"column_start":26,"column_end":35},"alias_span":null,"name":"Parameter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":102},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1986,"byte_end":1994,"line_start":80,"line_end":80,"column_start":37,"column_end":45},"alias_span":null,"name":"Callable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":112},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1996,"byte_end":2005,"line_start":80,"line_end":80,"column_start":47,"column_end":56},"alias_span":null,"name":"IsSubType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":156,"index":0},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":2029,"byte_end":2033,"line_start":81,"line_end":81,"column_start":22,"column_end":26},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":156,"index":1277},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":2035,"byte_end":2052,"line_start":81,"line_end":81,"column_start":28,"column_end":45},"alias_span":null,"name":"ConsensusEngineId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":156,"index":1401},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":2054,"byte_end":2059,"line_start":81,"line_end":81,"column_start":47,"column_end":52},"alias_span":null,"name":"print","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":156,"index":1099},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":2069,"byte_end":2078,"line_start":81,"line_end":81,"column_start":62,"column_end":71},"alias_span":null,"name":"Printable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":161,"index":420},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":3978,"byte_end":3990,"line_start":157,"line_end":157,"column_start":36,"column_end":48},"alias_span":null,"name":"decl_storage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":161,"index":421},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":3992,"byte_end":4009,"line_start":157,"line_end":157,"column_start":50,"column_end":67},"alias_span":null,"name":"construct_runtime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":1680},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":6643,"byte_end":6652,"line_start":261,"line_end":261,"column_start":17,"column_end":26},"alias_span":null,"name":"Serialize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":1192},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":6654,"byte_end":6665,"line_start":261,"line_end":261,"column_start":28,"column_end":39},"alias_span":null,"name":"Deserialize","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":686,"byte_end":18641,"line_start":18,"line_end":652,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":53},{"krate":0,"index":123},{"krate":0,"index":812},{"krate":0,"index":900},{"krate":0,"index":911},{"krate":0,"index":913},{"krate":0,"index":935},{"krate":0,"index":946},{"krate":0,"index":954},{"krate":0,"index":963},{"krate":0,"index":1319},{"krate":0,"index":1498},{"krate":0,"index":1509},{"krate":0,"index":1517},{"krate":0,"index":1521},{"krate":0,"index":5313},{"krate":0,"index":5314},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1528},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":5316},{"krate":0,"index":5334},{"krate":0,"index":5329},{"krate":0,"index":5325},{"krate":0,"index":5322},{"krate":0,"index":5323},{"krate":0,"index":5319},{"krate":0,"index":5320},{"krate":0,"index":5317},{"krate":0,"index":1538}],"decl_id":null,"docs":" Support code for the runtime.\n","sig":null,"attributes":[{"value":"! Support code for the runtime.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":686,"byte_end":719,"line_start":18,"line_end":18,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":17},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"debug","qualname":"::debug","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":1542},{"krate":0,"index":1545},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48}],"decl_id":null,"docs":" Runtime debugging and logging utilities.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1346,"byte_end":1358,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"! Runtime debugging and logging utilities.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19329,"byte_end":19373,"line_start":18,"line_end":18,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19374,"byte_end":19377,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! This module contains macros and functions that will allow","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19378,"byte_end":19439,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"! you to print logs out of the runtime code.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19440,"byte_end":19486,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19487,"byte_end":19490,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! First and foremost be aware that adding regular logging code to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19491,"byte_end":19558,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"! your runtime will have a negative effect on the performance","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19559,"byte_end":19622,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"! and size of the blob. Luckily there are some ways to mitigate","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19623,"byte_end":19688,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"! this that are described below.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19689,"byte_end":19723,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19724,"byte_end":19727,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! First component to utilize debug-printing and logging is actually","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19728,"byte_end":19797,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"! located in `primitives` crate: `sp_core::RuntimeDebug`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19798,"byte_end":19857,"line_start":29,"line_end":29,"column_start":1,"column_end":60}},{"value":"! This custom-derive generates `core::fmt::Debug` implementation,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19858,"byte_end":19925,"line_start":30,"line_end":30,"column_start":1,"column_end":68}},{"value":"! just like regular `derive(Debug)`, however it does not generate","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19926,"byte_end":19993,"line_start":31,"line_end":31,"column_start":1,"column_end":68}},{"value":"! any code when the code is compiled to WASM. This means that","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":19994,"byte_end":20057,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"! you can safely sprinkle `RuntimeDebug` in your runtime codebase,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20058,"byte_end":20126,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"! without affecting the size. This also allows you to print/log","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20127,"byte_end":20192,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"! both when the code is running natively or in WASM, but note","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20193,"byte_end":20256,"line_start":35,"line_end":35,"column_start":1,"column_end":64}},{"value":"! that WASM debug formatting of structs will be empty.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20257,"byte_end":20313,"line_start":36,"line_end":36,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20314,"byte_end":20317,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! ```rust,no_run","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20318,"byte_end":20336,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"!\tuse frame_support::debug;","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20337,"byte_end":20366,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20367,"byte_end":20370,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! #[derive(sp_core::RuntimeDebug)]","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20371,"byte_end":20407,"line_start":41,"line_end":41,"column_start":1,"column_end":37}},{"value":"!\tstruct MyStruct {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20408,"byte_end":20429,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"!   a: u64,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20430,"byte_end":20443,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"!\t}","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20444,"byte_end":20449,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20450,"byte_end":20453,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! // First initialize the logger.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20454,"byte_end":20489,"line_start":46,"line_end":46,"column_start":1,"column_end":36}},{"value":"! //","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20490,"byte_end":20496,"line_start":47,"line_end":47,"column_start":1,"column_end":7}},{"value":"! // This is only required when you want the logs to be printed","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20497,"byte_end":20562,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"! // also during non-native run.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20563,"byte_end":20597,"line_start":49,"line_end":49,"column_start":1,"column_end":35}},{"value":"! // Note that enabling the logger has performance impact on","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20598,"byte_end":20660,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"! // WASM runtime execution and should be used sparingly.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20661,"byte_end":20720,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"!\tdebug::RuntimeLogger::init();","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20721,"byte_end":20754,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20755,"byte_end":20758,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"! let x = MyStruct { a: 5 };","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20759,"byte_end":20789,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"!\t// will log an info line `\"My struct: MyStruct{a:5}\"` when running","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20790,"byte_end":20860,"line_start":55,"line_end":55,"column_start":1,"column_end":71}},{"value":"!\t// natively, but will only print `\"My struct: \"` when running WASM.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20861,"byte_end":20932,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"!\tdebug::info!(\"My struct: {:?}\", x);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20933,"byte_end":20972,"line_start":57,"line_end":57,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20973,"byte_end":20976,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"!\t// same output here, although this will print to stdout","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":20977,"byte_end":21036,"line_start":59,"line_end":59,"column_start":1,"column_end":60}},{"value":"!\t// (and without log format)","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21037,"byte_end":21068,"line_start":60,"line_end":60,"column_start":1,"column_end":32}},{"value":"!\tdebug::print!(\"My struct: {:?}\", x);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21069,"byte_end":21109,"line_start":61,"line_end":61,"column_start":1,"column_end":41}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21110,"byte_end":21117,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21118,"byte_end":21121,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! If you want to avoid extra overhead in WASM, but still be able","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21122,"byte_end":21188,"line_start":64,"line_end":64,"column_start":1,"column_end":67}},{"value":"! to print / log when the code is executed natively you can use","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21189,"byte_end":21254,"line_start":65,"line_end":65,"column_start":1,"column_end":66}},{"value":"! macros coming from `native` sub-module. This module enables","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21255,"byte_end":21318,"line_start":66,"line_end":66,"column_start":1,"column_end":64}},{"value":"! logs conditionally and strips out logs in WASM.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21319,"byte_end":21370,"line_start":67,"line_end":67,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21371,"byte_end":21374,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"! ```rust,no_run","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21375,"byte_end":21393,"line_start":69,"line_end":69,"column_start":1,"column_end":19}},{"value":"!\tuse frame_support::debug::native;","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21394,"byte_end":21431,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21432,"byte_end":21435,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"! #[derive(sp_core::RuntimeDebug)]","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21436,"byte_end":21472,"line_start":72,"line_end":72,"column_start":1,"column_end":37}},{"value":"!\tstruct MyStruct {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21473,"byte_end":21494,"line_start":73,"line_end":73,"column_start":1,"column_end":22}},{"value":"!   a: u64,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21495,"byte_end":21508,"line_start":74,"line_end":74,"column_start":1,"column_end":14}},{"value":"!\t}","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21509,"byte_end":21514,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21515,"byte_end":21518,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"! // We don't initialize the logger, since","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21519,"byte_end":21563,"line_start":77,"line_end":77,"column_start":1,"column_end":45}},{"value":"! // we are not printing anything out in WASM.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21564,"byte_end":21612,"line_start":78,"line_end":78,"column_start":1,"column_end":49}},{"value":"!\t// debug::RuntimeLogger::init();","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21613,"byte_end":21649,"line_start":79,"line_end":79,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21650,"byte_end":21653,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"! let x = MyStruct { a: 5 };","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21654,"byte_end":21684,"line_start":81,"line_end":81,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21685,"byte_end":21688,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"!\t// Displays an info log when running natively, nothing when WASM.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21689,"byte_end":21758,"line_start":83,"line_end":83,"column_start":1,"column_end":70}},{"value":"!\tnative::info!(\"My struct: {:?}\", x);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21759,"byte_end":21799,"line_start":84,"line_end":84,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21800,"byte_end":21803,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"!\t// same output to stdout, no overhead on WASM.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21804,"byte_end":21854,"line_start":86,"line_end":86,"column_start":1,"column_end":51}},{"value":"!\tnative::print!(\"My struct: {:?}\", x);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21855,"byte_end":21896,"line_start":87,"line_end":87,"column_start":1,"column_end":42}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":21897,"byte_end":21904,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":29},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22236,"byte_end":22242,"line_start":101,"line_end":101,"column_start":9,"column_end":15},"name":"native","qualname":"::debug::native","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","parent":null,"children":[{"krate":0,"index":30}],"decl_id":null,"docs":" Native-only logging.","sig":null,"attributes":[{"value":"/ Native-only logging.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22049,"byte_end":22073,"line_start":96,"line_end":96,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22074,"byte_end":22077,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ Using any functions from this module will have any effect","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22078,"byte_end":22139,"line_start":98,"line_end":98,"column_start":1,"column_end":62}},{"value":"/ only if the runtime is running natively (i.e. not via WASM)","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22140,"byte_end":22203,"line_start":99,"line_end":99,"column_start":1,"column_end":64}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":22204,"byte_end":22227,"line_start":100,"line_end":100,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23096,"byte_end":23101,"line_start":143,"line_end":143,"column_start":8,"column_end":13},"name":"debug","qualname":"::debug::debug","value":"fn (data: &impl Debug) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Print out the debuggable type.\n","sig":null,"attributes":[{"value":"/ Print out the debuggable type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23054,"byte_end":23088,"line_start":142,"line_end":142,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1542},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23258,"byte_end":23264,"line_start":149,"line_end":149,"column_start":12,"column_end":18},"name":"Writer","qualname":"::debug::Writer","value":"","parent":null,"children":[],"decl_id":null,"docs":" A target for `core::write!` macro - constructs a string in memory.\n","sig":null,"attributes":[{"value":"/ A target for `core::write!` macro - constructs a string in memory.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23157,"byte_end":23227,"line_start":147,"line_end":147,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23469,"byte_end":23474,"line_start":160,"line_end":160,"column_start":9,"column_end":14},"name":"print","qualname":"<Writer>::print","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Print the content of this `Writer` out.\n","sig":null,"attributes":[{"value":"/ Print the content of this `Writer` out.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23417,"byte_end":23460,"line_start":159,"line_end":159,"column_start":2,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":44},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":24075,"byte_end":24088,"line_start":177,"line_end":177,"column_start":12,"column_end":25},"name":"RuntimeLogger","qualname":"::debug::RuntimeLogger","value":"","parent":null,"children":[],"decl_id":null,"docs":" Runtime logger implementation - `log` crate backend.","sig":null,"attributes":[{"value":"/ Runtime logger implementation - `log` crate backend.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23525,"byte_end":23581,"line_start":165,"line_end":165,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23582,"byte_end":23585,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ The logger should be initialized if you want to display","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23586,"byte_end":23645,"line_start":167,"line_end":167,"column_start":1,"column_end":60}},{"value":"/ logs inside the runtime that is not necessarily running natively.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23646,"byte_end":23715,"line_start":168,"line_end":168,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23716,"byte_end":23719,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ When runtime is executed natively any log statements are displayed","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23720,"byte_end":23790,"line_start":170,"line_end":170,"column_start":1,"column_end":71}},{"value":"/ even if this logger is NOT initialized.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23791,"byte_end":23834,"line_start":171,"line_end":171,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23835,"byte_end":23838,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ Note that even though the logs are not displayed in WASM, they","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23839,"byte_end":23905,"line_start":173,"line_end":173,"column_start":1,"column_end":67}},{"value":"/ may still affect the size and performance of the generated runtime.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23906,"byte_end":23977,"line_start":174,"line_end":174,"column_start":1,"column_end":72}},{"value":"/ To lower the footprint make sure to only use macros from `native`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23978,"byte_end":24047,"line_start":175,"line_end":175,"column_start":1,"column_end":70}},{"value":"/ sub-module.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":24048,"byte_end":24063,"line_start":176,"line_end":176,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":24230,"byte_end":24234,"line_start":184,"line_end":184,"column_start":9,"column_end":13},"name":"init","qualname":"<RuntimeLogger>::init","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Initialize the logger.","sig":null,"attributes":[{"value":"/ Initialize the logger.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":24113,"byte_end":24139,"line_start":180,"line_end":180,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":24141,"byte_end":24144,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ This is a no-op when running natively (`std`).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":24146,"byte_end":24196,"line_start":182,"line_end":182,"column_start":2,"column_end":52}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":24198,"byte_end":24221,"line_start":183,"line_end":183,"column_start":2,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":53},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dispatch","qualname":"::dispatch","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":63},{"krate":0,"index":72},{"krate":0,"index":82},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122}],"decl_id":null,"docs":" Dispatch system. Contains a macro for defining runtime modules and\n generating values representing lazy module function calls.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1374,"byte_end":1386,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"! Dispatch system. Contains a macro for defining runtime modules and","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25691,"byte_end":25761,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"! generating values representing lazy module function calls.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":25762,"byte_end":25824,"line_start":19,"line_end":19,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":99},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26710,"byte_end":26736,"line_start":37,"line_end":37,"column_start":10,"column_end":36},"name":"DispatchResultWithPostInfo","qualname":"::dispatch::DispatchResultWithPostInfo","value":"sp_runtime::DispatchResultWithInfo<crate::weights::PostDispatchInfo>","parent":null,"children":[],"decl_id":null,"docs":" The return typ of a `Dispatchable` in frame. When returned explicitly from\n a dispatchable function it allows overriding the default `PostDispatchInfo`\n returned from a dispatch.\n","sig":null,"attributes":[{"value":"/ The return typ of a `Dispatchable` in frame. When returned explicitly from","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26512,"byte_end":26590,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ a dispatchable function it allows overriding the default `PostDispatchInfo`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26591,"byte_end":26670,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ returned from a dispatch.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26671,"byte_end":26700,"line_start":36,"line_end":36,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":100},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27160,"byte_end":27174,"line_start":44,"line_end":44,"column_start":10,"column_end":24},"name":"DispatchResult","qualname":"::dispatch::DispatchResult","value":"Result<(), sp_runtime::DispatchError>","parent":null,"children":[],"decl_id":null,"docs":" Unaugmented version of `DispatchResultWithPostInfo` that can be returned from\n dispatchable functions and is automatically converted to the augmented type. Should be\n used whenever the `PostDispatchInfo` does not need to be overwritten. As this should\n be the common case it is the implicit return type when none is specified.\n","sig":null,"attributes":[{"value":"/ Unaugmented version of `DispatchResultWithPostInfo` that can be returned from","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26811,"byte_end":26892,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"/ dispatchable functions and is automatically converted to the augmented type. Should be","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26893,"byte_end":26983,"line_start":41,"line_end":41,"column_start":1,"column_end":91}},{"value":"/ used whenever the `PostDispatchInfo` does not need to be overwritten. As this should","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":26984,"byte_end":27072,"line_start":42,"line_end":42,"column_start":1,"column_end":89}},{"value":"/ be the common case it is the implicit return type when none is specified.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27073,"byte_end":27150,"line_start":43,"line_end":43,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":101},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27290,"byte_end":27315,"line_start":47,"line_end":47,"column_start":10,"column_end":35},"name":"DispatchErrorWithPostInfo","qualname":"::dispatch::DispatchErrorWithPostInfo","value":"sp_runtime::DispatchErrorWithPostInfo<crate::weights::PostDispatchInfo>","parent":null,"children":[],"decl_id":null,"docs":" The error type contained in a `DispatchResultWithPostInfo`.\n","sig":null,"attributes":[{"value":"/ The error type contained in a `DispatchResultWithPostInfo`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27217,"byte_end":27280,"line_start":46,"line_end":46,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":102},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27505,"byte_end":27513,"line_start":52,"line_end":52,"column_start":11,"column_end":19},"name":"Callable","qualname":"::dispatch::Callable","value":"Callable<T>","parent":null,"children":[{"krate":0,"index":104}],"decl_id":null,"docs":" Serializable version of Dispatchable.\n This value can be used as a \"function\" in an extrinsic.\n","sig":null,"attributes":[{"value":"/ Serializable version of Dispatchable.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27393,"byte_end":27434,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/ This value can be used as a \"function\" in an extrinsic.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27435,"byte_end":27494,"line_start":51,"line_end":51,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":104},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27525,"byte_end":27529,"line_start":53,"line_end":53,"column_start":7,"column_end":11},"name":"Call","qualname":"::dispatch::Callable::Call","value":"type Call: Dispatchable<Info=DispatchInfo, PostInfo=PostDispatchInfo> + Codec + Clone + PartialEq + Eq;","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":105},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27734,"byte_end":27749,"line_start":58,"line_end":58,"column_start":10,"column_end":25},"name":"CallableCallFor","qualname":"::dispatch::CallableCallFor","value":"<A as Callable<T>>::Call","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":108},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27959,"byte_end":27968,"line_start":63,"line_end":63,"column_start":11,"column_end":20},"name":"Parameter","qualname":"::dispatch::Parameter","value":"Parameter: Codec + EncodeLike + Clone + Eq + fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" A type that can be used as a parameter in a dispatchable function.","sig":null,"attributes":[{"value":"/ A type that can be used as a parameter in a dispatchable function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27785,"byte_end":27855,"line_start":60,"line_end":60,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27856,"byte_end":27859,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ When using `decl_module` all arguments for call functions must implement this trait.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27860,"byte_end":27948,"line_start":62,"line_end":62,"column_start":1,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":112},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":79244,"byte_end":79253,"line_start":1615,"line_end":1615,"column_start":11,"column_end":20},"name":"IsSubType","qualname":"::dispatch::IsSubType","value":"IsSubType<T: Callable<R>, R>","parent":null,"children":[{"krate":0,"index":115}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":79279,"byte_end":79290,"line_start":1616,"line_end":1616,"column_start":5,"column_end":16},"name":"is_sub_type","qualname":"::dispatch::IsSubType::is_sub_type","value":"fn (&self) -> Option<&CallableCallFor<T, R>>","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":123},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"storage","qualname":"::storage","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":173},{"krate":0,"index":229},{"krate":0,"index":268},{"krate":0,"index":555},{"krate":0,"index":614},{"krate":0,"index":641},{"krate":0,"index":690},{"krate":0,"index":699},{"krate":0,"index":714},{"krate":0,"index":771},{"krate":0,"index":776},{"krate":0,"index":781},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":799},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":810}],"decl_id":null,"docs":" Stuff to do with the runtime's storage.\n","sig":null,"attributes":[{"value":"! Stuff to do with the runtime's storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98200,"byte_end":98243,"line_start":18,"line_end":18,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":139},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unhashed","qualname":"::storage::unhashed","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172}],"decl_id":null,"docs":" Operation on unhashed runtime storage.\n","sig":null,"attributes":[{"value":"! Operation on unhashed runtime storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":121200,"byte_end":121242,"line_start":18,"line_end":18,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":144},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":121403,"byte_end":121406,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::unhashed::get","value":"fn <T> (key: &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":121298,"byte_end":121395,"line_start":23,"line_end":23,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":148},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":121804,"byte_end":121818,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::unhashed::get_or_default","value":"fn <T> (key: &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":121683,"byte_end":121776,"line_start":34,"line_end":34,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":121777,"byte_end":121796,"line_start":35,"line_end":35,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":150},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122031,"byte_end":122037,"line_start":42,"line_end":42,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::unhashed::get_or","value":"fn <T> (key: &[u8], default_value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":121913,"byte_end":122003,"line_start":40,"line_end":40,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122004,"byte_end":122023,"line_start":41,"line_end":41,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":152},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122252,"byte_end":122263,"line_start":48,"line_end":48,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::unhashed::get_or_else","value":"fn <T, F> (key: &[u8], default_value: F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122132,"byte_end":122224,"line_start":46,"line_end":46,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122225,"byte_end":122244,"line_start":47,"line_end":47,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":155},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122428,"byte_end":122431,"line_start":53,"line_end":53,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::unhashed::put","value":"fn <T> (key: &[u8], value: &T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122381,"byte_end":122420,"line_start":52,"line_end":52,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":158},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122650,"byte_end":122654,"line_start":58,"line_end":58,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::unhashed::take","value":"fn <T> (key: &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122543,"byte_end":122642,"line_start":57,"line_end":57,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":160},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122896,"byte_end":122911,"line_start":68,"line_end":68,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::unhashed::take_or_default","value":"fn <T> (key: &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122760,"byte_end":122858,"line_start":66,"line_end":66,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":122859,"byte_end":122888,"line_start":67,"line_end":67,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":162},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123170,"byte_end":123177,"line_start":74,"line_end":74,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::unhashed::take_or","value":"fn <T> (key: &[u8], default_value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123007,"byte_end":123097,"line_start":72,"line_end":72,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123098,"byte_end":123162,"line_start":73,"line_end":73,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":164},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123438,"byte_end":123450,"line_start":80,"line_end":80,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::unhashed::take_or_else","value":"fn <T, F> (key: &[u8], default_value: F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123273,"byte_end":123365,"line_start":78,"line_end":78,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123366,"byte_end":123430,"line_start":79,"line_end":79,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":167},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123636,"byte_end":123642,"line_start":85,"line_end":85,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::unhashed::exists","value":"fn (key: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123569,"byte_end":123628,"line_start":84,"line_end":84,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":169},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123782,"byte_end":123786,"line_start":90,"line_end":90,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::unhashed::kill","value":"fn (key: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123724,"byte_end":123774,"line_start":89,"line_end":89,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":170},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123908,"byte_end":123919,"line_start":95,"line_end":95,"column_start":8,"column_end":19},"name":"kill_prefix","qualname":"::storage::unhashed::kill_prefix","value":"fn (prefix: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensure keys with the given `prefix` have no entries in storage.\n","sig":null,"attributes":[{"value":"/ Ensure keys with the given `prefix` have no entries in storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123833,"byte_end":123900,"line_start":94,"line_end":94,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":124023,"byte_end":124030,"line_start":100,"line_end":100,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::unhashed::get_raw","value":"fn (key: &[u8]) -> Option<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":123979,"byte_end":124015,"line_start":99,"line_end":99,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":172},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":124347,"byte_end":124354,"line_start":109,"line_end":109,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::unhashed::put_raw","value":"fn (key: &[u8], value: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":124093,"byte_end":124131,"line_start":104,"line_end":104,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":124132,"byte_end":124135,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ **WARNING**: If you set the storage of the Substrate Wasm (`well_known_keys::CODE`),","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":124136,"byte_end":124224,"line_start":106,"line_end":106,"column_start":1,"column_end":89}},{"value":"/ you should also call `frame_system::RuntimeUpgraded::put(true)` to trigger the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":124225,"byte_end":124307,"line_start":107,"line_end":107,"column_start":1,"column_end":83}},{"value":"/ `on_runtime_upgrade` logic.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/unhashed.rs","byte_start":124308,"byte_end":124339,"line_start":108,"line_end":108,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":173},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hashed","qualname":"::storage::hashed","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":183},{"krate":0,"index":187},{"krate":0,"index":191},{"krate":0,"index":196},{"krate":0,"index":200},{"krate":0,"index":204},{"krate":0,"index":208},{"krate":0,"index":212},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226}],"decl_id":null,"docs":" Operation on runtime storage using hashed keys.\n","sig":null,"attributes":[{"value":"! Operation on runtime storage using hashed keys.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":125105,"byte_end":125156,"line_start":18,"line_end":18,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":179},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":125338,"byte_end":125341,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::hashed::get","value":"fn <T, HashFn, R> (hash: &HashFn, key: &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":125233,"byte_end":125330,"line_start":24,"line_end":24,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":183},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":125626,"byte_end":125640,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::hashed::get_or_default","value":"fn <T, HashFn, R> (hash: &HashFn, key: &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":125505,"byte_end":125598,"line_start":34,"line_end":34,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":125599,"byte_end":125618,"line_start":35,"line_end":35,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":187},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":125935,"byte_end":125941,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::hashed::get_or","value":"fn <T, HashFn, R> (hash: &HashFn, key: &[u8], default_value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":125817,"byte_end":125907,"line_start":45,"line_end":45,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":125908,"byte_end":125927,"line_start":46,"line_end":46,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":191},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":126253,"byte_end":126264,"line_start":58,"line_end":58,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::hashed::get_or_else","value":"fn <T, F, HashFn, R> (hash: &HashFn, key: &[u8], default_value: F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":126133,"byte_end":126225,"line_start":56,"line_end":56,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":126226,"byte_end":126245,"line_start":57,"line_end":57,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":196},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":126530,"byte_end":126533,"line_start":69,"line_end":69,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::hashed::put","value":"fn <T, HashFn, R> (hash: &HashFn, key: &[u8], value: &T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":126483,"byte_end":126522,"line_start":68,"line_end":68,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":200},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":126801,"byte_end":126805,"line_start":79,"line_end":79,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::hashed::take","value":"fn <T, HashFn, R> (hash: &HashFn, key: &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":126694,"byte_end":126793,"line_start":78,"line_end":78,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":204},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":127106,"byte_end":127121,"line_start":90,"line_end":90,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::hashed::take_or_default","value":"fn <T, HashFn, R> (hash: &HashFn, key: &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":126970,"byte_end":127068,"line_start":88,"line_end":88,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":127069,"byte_end":127098,"line_start":89,"line_end":89,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":208},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":127462,"byte_end":127469,"line_start":101,"line_end":101,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::hashed::take_or","value":"fn <T, HashFn, R> (hash: &HashFn, key: &[u8], default_value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":127299,"byte_end":127389,"line_start":99,"line_end":99,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":127390,"byte_end":127454,"line_start":100,"line_end":100,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":212},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":127827,"byte_end":127839,"line_start":112,"line_end":112,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::hashed::take_or_else","value":"fn <T, F, HashFn, R> (hash: &HashFn, key: &[u8], default_value: F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":127662,"byte_end":127754,"line_start":110,"line_end":110,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":127755,"byte_end":127819,"line_start":111,"line_end":111,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":217},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":128126,"byte_end":128132,"line_start":123,"line_end":123,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::hashed::exists","value":"fn <HashFn, R> (hash: &HashFn, key: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":128059,"byte_end":128118,"line_start":122,"line_end":122,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":220},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":128329,"byte_end":128333,"line_start":132,"line_end":132,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::hashed::kill","value":"fn <HashFn, R> (hash: &HashFn, key: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":128271,"byte_end":128321,"line_start":131,"line_end":131,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":223},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":128506,"byte_end":128513,"line_start":141,"line_end":141,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::hashed::get_raw","value":"fn <HashFn, R> (hash: &HashFn, key: &[u8]) -> Option<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":128462,"byte_end":128498,"line_start":140,"line_end":140,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":226},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":128710,"byte_end":128717,"line_start":150,"line_end":150,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::hashed::put_raw","value":"fn <HashFn, R> (hash: &HashFn, key: &[u8], value: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.\n","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/hashed.rs","byte_start":128664,"byte_end":128702,"line_start":149,"line_end":149,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":229},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"child","qualname":"::storage::child","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267}],"decl_id":null,"docs":" Operation on runtime child storages.","sig":null,"attributes":[{"value":"! Operation on runtime child storages.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":129556,"byte_end":129596,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":129597,"byte_end":129600,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! This module is a currently only a variant of unhashed with additional `child_info`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":129601,"byte_end":129688,"line_start":20,"line_end":20,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":130050,"byte_end":130053,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"get","qualname":"::storage::child::get","value":"fn <T> (child_info: &ChildInfo, key: &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `None` if there is no explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `None` if there is no explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":129945,"byte_end":130042,"line_start":28,"line_end":28,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":242},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":130681,"byte_end":130695,"line_start":52,"line_end":52,"column_start":8,"column_end":22},"name":"get_or_default","qualname":"::storage::child::get_or_default","value":"fn <T> (child_info: &ChildInfo, key: &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or the type's default if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or the type's default if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":130560,"byte_end":130653,"line_start":50,"line_end":50,"column_start":1,"column_end":94}},{"value":"/ explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":130654,"byte_end":130673,"line_start":51,"line_end":51,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":244},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":130949,"byte_end":130955,"line_start":61,"line_end":61,"column_start":8,"column_end":14},"name":"get_or","qualname":"::storage::child::get_or","value":"fn <T> (child_info: &ChildInfo, key: &[u8], default_value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":130831,"byte_end":130921,"line_start":59,"line_end":59,"column_start":1,"column_end":91}},{"value":"/ explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":130922,"byte_end":130941,"line_start":60,"line_end":60,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":131212,"byte_end":131223,"line_start":71,"line_end":71,"column_start":8,"column_end":19},"name":"get_or_else","qualname":"::storage::child::get_or_else","value":"fn <T, F> (child_info: &ChildInfo, key: &[u8], default_value: F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":131092,"byte_end":131184,"line_start":69,"line_end":69,"column_start":1,"column_end":93}},{"value":"/ explicit entry.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":131185,"byte_end":131204,"line_start":70,"line_end":70,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":131430,"byte_end":131433,"line_start":80,"line_end":80,"column_start":8,"column_end":11},"name":"put","qualname":"::storage::child::put","value":"fn <T> (child_info: &ChildInfo, key: &[u8], value: &T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put `value` in storage under `key`.\n","sig":null,"attributes":[{"value":"/ Put `value` in storage under `key`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":131383,"byte_end":131422,"line_start":79,"line_end":79,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":131800,"byte_end":131804,"line_start":97,"line_end":97,"column_start":8,"column_end":12},"name":"take","qualname":"::storage::child::take","value":"fn <T> (child_info: &ChildInfo, key: &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value if it had an explicit entry or `None` otherwise.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":131693,"byte_end":131792,"line_start":96,"line_end":96,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":254},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":132099,"byte_end":132114,"line_start":110,"line_end":110,"column_start":8,"column_end":23},"name":"take_or_default","qualname":"::storage::child::take_or_default","value":"fn <T> (child_info: &ChildInfo, key: &[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,\n the default for its type.\n","sig":null,"attributes":[{"value":"/ Remove `key` from storage, returning its value, or, if there was no explicit entry in storage,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":131963,"byte_end":132061,"line_start":108,"line_end":108,"column_start":1,"column_end":99}},{"value":"/ the default for its type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":132062,"byte_end":132091,"line_start":109,"line_end":109,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":132413,"byte_end":132420,"line_start":119,"line_end":119,"column_start":8,"column_end":15},"name":"take_or","qualname":"::storage::child::take_or","value":"fn <T> (child_info: &ChildInfo, key: &[u8], default_value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":132250,"byte_end":132340,"line_start":117,"line_end":117,"column_start":1,"column_end":91}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":132341,"byte_end":132405,"line_start":118,"line_end":118,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":258},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":132722,"byte_end":132734,"line_start":129,"line_end":129,"column_start":8,"column_end":20},"name":"take_or_else","qualname":"::storage::child::take_or_else","value":"fn <T, F> (child_info: &ChildInfo, key: &[u8], default_value: F) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value of the item in storage under `key`, or `default_value()` if there is no\n explicit entry. Ensure there is no explicit entry on return.\n","sig":null,"attributes":[{"value":"/ Return the value of the item in storage under `key`, or `default_value()` if there is no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":132557,"byte_end":132649,"line_start":127,"line_end":127,"column_start":1,"column_end":93}},{"value":"/ explicit entry. Ensure there is no explicit entry on return.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":132650,"byte_end":132714,"line_start":128,"line_end":128,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":132961,"byte_end":132967,"line_start":138,"line_end":138,"column_start":8,"column_end":14},"name":"exists","qualname":"::storage::child::exists","value":"fn (child_info: &ChildInfo, key: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if `key` has an explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Check to see if `key` has an explicit entry in storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":132894,"byte_end":132953,"line_start":137,"line_end":137,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":263},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":133240,"byte_end":133252,"line_start":151,"line_end":151,"column_start":8,"column_end":20},"name":"kill_storage","qualname":"::storage::child::kill_storage","value":"fn (child_info: &ChildInfo) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all `storage_key` key/values\n","sig":null,"attributes":[{"value":"/ Remove all `storage_key` key/values","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":133193,"byte_end":133232,"line_start":150,"line_end":150,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":264},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":133486,"byte_end":133490,"line_start":162,"line_end":162,"column_start":8,"column_end":12},"name":"kill","qualname":"::storage::child::kill","value":"fn (child_info: &ChildInfo, key: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensure `key` has no explicit entry in storage.\n","sig":null,"attributes":[{"value":"/ Ensure `key` has no explicit entry in storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":133428,"byte_end":133478,"line_start":161,"line_end":161,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":265},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":133737,"byte_end":133744,"line_start":177,"line_end":177,"column_start":8,"column_end":15},"name":"get_raw","qualname":"::storage::child::get_raw","value":"fn (child_info: &ChildInfo, key: &[u8]) -> Option<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get a Vec of bytes from storage.\n","sig":null,"attributes":[{"value":"/ Get a Vec of bytes from storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":133693,"byte_end":133729,"line_start":176,"line_end":176,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":266},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":133997,"byte_end":134004,"line_start":190,"line_end":190,"column_start":8,"column_end":15},"name":"put_raw","qualname":"::storage::child::put_raw","value":"fn (child_info: &ChildInfo, key: &[u8], value: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put a raw byte slice into storage.\n","sig":null,"attributes":[{"value":"/ Put a raw byte slice into storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":133951,"byte_end":133989,"line_start":189,"line_end":189,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":267},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":134264,"byte_end":134268,"line_start":205,"line_end":205,"column_start":8,"column_end":12},"name":"root","qualname":"::storage::child::root","value":"fn (child_info: &ChildInfo) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Calculate current child root value.\n","sig":null,"attributes":[{"value":"/ Calculate current child root value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/child.rs","byte_start":134217,"byte_end":134256,"line_start":204,"line_end":204,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":268},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"generator","qualname":"::storage::generator","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":374},{"krate":0,"index":497},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554}],"decl_id":null,"docs":" Generators are a set of trait on which storage traits are implemented.","sig":null,"attributes":[{"value":"! Generators are a set of trait on which storage traits are implemented.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":135133,"byte_end":135207,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":135208,"byte_end":135211,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! (i.e. implementing the generator for StorageValue on a type will automatically derive the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":135212,"byte_end":135305,"line_start":20,"line_end":20,"column_start":1,"column_end":94}},{"value":"! implementation of StorageValue for this type).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":135306,"byte_end":135356,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":135357,"byte_end":135360,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! They are used by `decl_storage`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":135361,"byte_end":135397,"line_start":23,"line_end":23,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":135398,"byte_end":135401,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! This is internal api and is subject to change.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/mod.rs","byte_start":135402,"byte_end":135452,"line_start":25,"line_end":25,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":287},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140333,"byte_end":140343,"line_start":38,"line_end":38,"column_start":11,"column_end":21},"name":"StorageMap","qualname":"::storage::generator::map::StorageMap","value":"StorageMap<K: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297}],"decl_id":null,"docs":" Generator for `StorageMap` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageMap` used by `decl_storage`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":139915,"byte_end":139969,"line_start":27,"line_end":27,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":139970,"byte_end":139973,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ By default each key value is stored at:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":139974,"byte_end":140017,"line_start":29,"line_end":29,"column_start":1,"column_end":44}},{"value":"/ ```nocompile","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140018,"byte_end":140034,"line_start":30,"line_end":30,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix) ++ Hasher(encode(key))","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140035,"byte_end":140111,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140112,"byte_end":140119,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140120,"byte_end":140123,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140124,"byte_end":140137,"line_start":34,"line_end":34,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140138,"byte_end":140141,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ If the keys are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140142,"byte_end":140235,"line_start":36,"line_end":36,"column_start":1,"column_end":94}},{"value":"/ `blake2_256` must be used.  Otherwise, other values in storage can be compromised.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140236,"byte_end":140322,"line_start":37,"line_end":37,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":290},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140418,"byte_end":140423,"line_start":40,"line_end":40,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::map::StorageMap::Query","value":"type Query;","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140376,"byte_end":140411,"line_start":39,"line_end":39,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":291},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140476,"byte_end":140482,"line_start":43,"line_end":43,"column_start":7,"column_end":13},"name":"Hasher","qualname":"::storage::generator::map::StorageMap::Hasher","value":"type Hasher: StorageHasher;","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Hasher. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Hasher. Used for generating final key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140427,"byte_end":140469,"line_start":42,"line_end":42,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140555,"byte_end":140568,"line_start":46,"line_end":46,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::map::StorageMap::module_prefix","value":"fn () -> &'static [u8]","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140501,"byte_end":140550,"line_start":45,"line_end":45,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140646,"byte_end":140660,"line_start":49,"line_end":49,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::map::StorageMap::storage_prefix","value":"fn () -> &'static [u8]","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140591,"byte_end":140641,"line_start":48,"line_end":48,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140792,"byte_end":140803,"line_start":53,"line_end":53,"column_start":5,"column_end":16},"name":"prefix_hash","qualname":"::storage::generator::map::StorageMap::prefix_hash","value":"fn () -> Vec<u8>","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" The full prefix; just the hash of `module_prefix` concatenated to the hash of\n `storage_prefix`.\n","sig":null,"attributes":[{"value":"/ The full prefix; just the hash of `module_prefix` concatenated to the hash of","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140683,"byte_end":140764,"line_start":51,"line_end":51,"column_start":2,"column_end":83}},{"value":"/ `storage_prefix`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":140766,"byte_end":140787,"line_start":52,"line_end":52,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":141265,"byte_end":141293,"line_start":68,"line_end":68,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::map::StorageMap::from_optional_value_to_query","value":"fn (v: Option<V>) -> Self::Query","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":141187,"byte_end":141260,"line_start":67,"line_end":67,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":141385,"byte_end":141413,"line_start":71,"line_end":71,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::map::StorageMap::from_query_to_optional_value","value":"fn (v: Self::Query) -> Option<V>","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":141326,"byte_end":141380,"line_start":70,"line_end":70,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":141497,"byte_end":141518,"line_start":74,"line_end":74,"column_start":5,"column_end":26},"name":"storage_map_final_key","qualname":"::storage::generator::map::StorageMap::storage_map_final_key","value":"fn <KeyArg> (key: KeyArg) -> Vec<u8>","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":141446,"byte_end":141492,"line_start":73,"line_end":73,"column_start":2,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":299},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":142179,"byte_end":142197,"line_start":94,"line_end":94,"column_start":12,"column_end":30},"name":"StorageMapIterator","qualname":"::storage::generator::map::StorageMapIterator","value":"StorageMapIterator {  }","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306}],"decl_id":null,"docs":" Utility to iterate through items in a storage map.\n","sig":null,"attributes":[{"value":"/ Utility to iterate through items in a storage map.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":142113,"byte_end":142167,"line_start":93,"line_end":93,"column_start":1,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":393},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150391,"byte_end":150407,"line_start":44,"line_end":44,"column_start":11,"column_end":27},"name":"StorageDoubleMap","qualname":"::storage::generator::double_map::StorageDoubleMap","value":"StorageDoubleMap<K1: FullEncode, K2: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":407}],"decl_id":null,"docs":" Generator for `StorageDoubleMap` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageDoubleMap` used by `decl_storage`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149429,"byte_end":149489,"line_start":24,"line_end":24,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149490,"byte_end":149493,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Mapping of keys to a storage path","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149494,"byte_end":149533,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149534,"byte_end":149537,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The storage key (i.e. the key under which the `Value` will be stored) is created from two parts.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149538,"byte_end":149638,"line_start":28,"line_end":28,"column_start":1,"column_end":101}},{"value":"/ The first part is a hash of a concatenation of the `key1_prefix` and `Key1`. And the second part","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149639,"byte_end":149739,"line_start":29,"line_end":29,"column_start":1,"column_end":101}},{"value":"/ is a hash of a `Key2`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149740,"byte_end":149766,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149767,"byte_end":149770,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Thus value for (key1, key2) is stored at:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149771,"byte_end":149816,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/ ```nocompile","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149817,"byte_end":149833,"line_start":33,"line_end":33,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix) ++ Hasher1(encode(key1)) ++ Hasher2(encode(key2))","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149834,"byte_end":149937,"line_start":34,"line_end":34,"column_start":1,"column_end":104}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149938,"byte_end":149945,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149946,"byte_end":149949,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Warning","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149950,"byte_end":149963,"line_start":37,"line_end":37,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149964,"byte_end":149967,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ If the key1s are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":149968,"byte_end":150062,"line_start":39,"line_end":39,"column_start":1,"column_end":95}},{"value":"/ `blake2_256` must be used for Hasher1. Otherwise, other values in storage can be compromised.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150063,"byte_end":150160,"line_start":40,"line_end":40,"column_start":1,"column_end":98}},{"value":"/ If the key2s are not trusted (e.g. can be set by a user), a cryptographic `hasher` such as","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150161,"byte_end":150255,"line_start":41,"line_end":41,"column_start":1,"column_end":95}},{"value":"/ `blake2_256` must be used for Hasher2. Otherwise, other items in storage with the same first","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150256,"byte_end":150352,"line_start":42,"line_end":42,"column_start":1,"column_end":97}},{"value":"/ key can be compromised.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150353,"byte_end":150380,"line_start":43,"line_end":43,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":397},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150499,"byte_end":150504,"line_start":46,"line_end":46,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::double_map::StorageDoubleMap::Query","value":"type Query;","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150457,"byte_end":150492,"line_start":45,"line_end":45,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":398},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150544,"byte_end":150551,"line_start":49,"line_end":49,"column_start":7,"column_end":14},"name":"Hasher1","qualname":"::storage::generator::double_map::StorageDoubleMap::Hasher1","value":"type Hasher1: StorageHasher;","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Hasher for the first key.\n","sig":null,"attributes":[{"value":"/ Hasher for the first key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150508,"byte_end":150537,"line_start":48,"line_end":48,"column_start":2,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":399},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150607,"byte_end":150614,"line_start":52,"line_end":52,"column_start":7,"column_end":14},"name":"Hasher2","qualname":"::storage::generator::double_map::StorageDoubleMap::Hasher2","value":"type Hasher2: StorageHasher;","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Hasher for the second key.\n","sig":null,"attributes":[{"value":"/ Hasher for the second key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150570,"byte_end":150600,"line_start":51,"line_end":51,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150687,"byte_end":150700,"line_start":55,"line_end":55,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::double_map::StorageDoubleMap::module_prefix","value":"fn () -> &'static [u8]","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150633,"byte_end":150682,"line_start":54,"line_end":54,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150778,"byte_end":150792,"line_start":58,"line_end":58,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_prefix","value":"fn () -> &'static [u8]","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150723,"byte_end":150773,"line_start":57,"line_end":57,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150924,"byte_end":150935,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"prefix_hash","qualname":"::storage::generator::double_map::StorageDoubleMap::prefix_hash","value":"fn () -> Vec<u8>","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" The full prefix; just the hash of `module_prefix` concatenated to the hash of\n `storage_prefix`.\n","sig":null,"attributes":[{"value":"/ The full prefix; just the hash of `module_prefix` concatenated to the hash of","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150815,"byte_end":150896,"line_start":60,"line_end":60,"column_start":2,"column_end":83}},{"value":"/ `storage_prefix`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":150898,"byte_end":150919,"line_start":61,"line_end":61,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":151397,"byte_end":151425,"line_start":77,"line_end":77,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::double_map::StorageDoubleMap::from_optional_value_to_query","value":"fn (v: Option<V>) -> Self::Query","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":151319,"byte_end":151392,"line_start":76,"line_end":76,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":151517,"byte_end":151545,"line_start":80,"line_end":80,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::double_map::StorageDoubleMap::from_query_to_optional_value","value":"fn (v: Self::Query) -> Option<V>","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":151458,"byte_end":151512,"line_start":79,"line_end":79,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":151642,"byte_end":151671,"line_start":83,"line_end":83,"column_start":5,"column_end":34},"name":"storage_double_map_final_key1","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_double_map_final_key1","value":"fn <KArg1> (k1: KArg1) -> Vec<u8>","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Generate the first part of the key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the first part of the key used in top storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":151578,"byte_end":151637,"line_start":82,"line_end":82,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":152313,"byte_end":152341,"line_start":102,"line_end":102,"column_start":5,"column_end":33},"name":"storage_double_map_final_key","qualname":"::storage::generator::double_map::StorageDoubleMap::storage_double_map_final_key","value":"fn <KArg1, KArg2> (k1: KArg1, k2: KArg2) -> Vec<u8>","parent":{"krate":0,"index":393},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":152262,"byte_end":152308,"line_start":101,"line_end":101,"column_start":2,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":467},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":157977,"byte_end":157988,"line_start":298,"line_end":298,"column_start":12,"column_end":23},"name":"MapIterator","qualname":"::storage::generator::double_map::MapIterator","value":"MapIterator {  }","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472}],"decl_id":null,"docs":" Iterate over a prefix and decode raw_key and raw_value into `T`.\n","sig":null,"attributes":[{"value":"/ Iterate over a prefix and decode raw_key and raw_value into `T`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":157897,"byte_end":157965,"line_start":297,"line_end":297,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":512},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165297,"byte_end":165309,"line_start":31,"line_end":31,"column_start":11,"column_end":23},"name":"StorageValue","qualname":"::storage::generator::value::StorageValue","value":"StorageValue<T: FullCodec>","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519}],"decl_id":null,"docs":" Generator for `StorageValue` used by `decl_storage`.","sig":null,"attributes":[{"value":"/ Generator for `StorageValue` used by `decl_storage`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165112,"byte_end":165168,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165169,"byte_end":165172,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ By default value is stored at:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165173,"byte_end":165207,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/ ```nocompile","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165208,"byte_end":165224,"line_start":28,"line_end":28,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix)","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165225,"byte_end":165278,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165279,"byte_end":165286,"line_start":30,"line_end":30,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":514},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165369,"byte_end":165374,"line_start":33,"line_end":33,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::generator::value::StorageValue::Query","value":"type Query;","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165327,"byte_end":165362,"line_start":32,"line_end":32,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165432,"byte_end":165445,"line_start":36,"line_end":36,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::generator::value::StorageValue::module_prefix","value":"fn () -> &'static [u8]","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165378,"byte_end":165427,"line_start":35,"line_end":35,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165523,"byte_end":165537,"line_start":39,"line_end":39,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::generator::value::StorageValue::storage_prefix","value":"fn () -> &'static [u8]","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165468,"byte_end":165518,"line_start":38,"line_end":38,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165638,"byte_end":165666,"line_start":42,"line_end":42,"column_start":5,"column_end":33},"name":"from_optional_value_to_query","qualname":"::storage::generator::value::StorageValue::from_optional_value_to_query","value":"fn (v: Option<T>) -> Self::Query","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Convert an optional value retrieved from storage to the type queried.\n","sig":null,"attributes":[{"value":"/ Convert an optional value retrieved from storage to the type queried.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165560,"byte_end":165633,"line_start":41,"line_end":41,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165758,"byte_end":165786,"line_start":45,"line_end":45,"column_start":5,"column_end":33},"name":"from_query_to_optional_value","qualname":"::storage::generator::value::StorageValue::from_query_to_optional_value","value":"fn (v: Self::Query) -> Option<T>","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Convert a query to an optional value into storage.\n","sig":null,"attributes":[{"value":"/ Convert a query to an optional value into storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165699,"byte_end":165753,"line_start":44,"line_end":44,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165870,"byte_end":165893,"line_start":48,"line_end":48,"column_start":5,"column_end":28},"name":"storage_value_final_key","qualname":"::storage::generator::value::StorageValue::storage_value_final_key","value":"fn () -> [u8; 32]","parent":{"krate":0,"index":512},"children":[],"decl_id":null,"docs":" Generate the full key used in top storage.\n","sig":null,"attributes":[{"value":"/ Generate the full key used in top storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":165819,"byte_end":165865,"line_start":47,"line_end":47,"column_start":2,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":555},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"migration","qualname":"::storage::migration","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":570},{"krate":0,"index":575},{"krate":0,"index":580},{"krate":0,"index":588},{"krate":0,"index":595},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":609},{"krate":0,"index":610}],"decl_id":null,"docs":" Some utilities for helping access storage with arbitrary key types.\n","sig":null,"attributes":[{"value":"! Some utilities for helping access storage with arbitrary key types.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":169065,"byte_end":169136,"line_start":18,"line_end":18,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":564},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":169335,"byte_end":169350,"line_start":26,"line_end":26,"column_start":12,"column_end":27},"name":"StorageIterator","qualname":"::storage::migration::StorageIterator","value":"StorageIterator {  }","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569}],"decl_id":null,"docs":" Utility to iterate through raw items in storage.\n","sig":null,"attributes":[{"value":"/ Utility to iterate through raw items in storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":169271,"byte_end":169323,"line_start":25,"line_end":25,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":169586,"byte_end":169589,"line_start":35,"line_end":35,"column_start":9,"column_end":12},"name":"new","qualname":"<StorageIterator<T>>::new","value":"fn (module: &[u8], item: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":169490,"byte_end":169577,"line_start":34,"line_end":34,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":169772,"byte_end":169783,"line_start":40,"line_end":40,"column_start":9,"column_end":20},"name":"with_suffix","qualname":"<StorageIterator<T>>::with_suffix","value":"fn (module: &[u8], item: &[u8], suffix: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":169676,"byte_end":169763,"line_start":39,"line_end":39,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":170224,"byte_end":170229,"line_start":50,"line_end":50,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageIterator<T>>::drain","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mutate this iterator into a draining iterator; items iterated are removed from storage.\n","sig":null,"attributes":[{"value":"/ Mutate this iterator into a draining iterator; items iterated are removed from storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":170124,"byte_end":170215,"line_start":49,"line_end":49,"column_start":2,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":580},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":171044,"byte_end":171062,"line_start":84,"line_end":84,"column_start":12,"column_end":30},"name":"StorageKeyIterator","qualname":"::storage::migration::StorageKeyIterator","value":"StorageKeyIterator {  }","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587}],"decl_id":null,"docs":" Utility to iterate through raw items in storage.\n","sig":null,"attributes":[{"value":"/ Utility to iterate through raw items in storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":170980,"byte_end":171032,"line_start":83,"line_end":83,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":171377,"byte_end":171380,"line_start":93,"line_end":93,"column_start":9,"column_end":12},"name":"new","qualname":"<StorageKeyIterator<K, T, H>>::new","value":"fn (module: &[u8], item: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":171281,"byte_end":171368,"line_start":92,"line_end":92,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":171563,"byte_end":171574,"line_start":98,"line_end":98,"column_start":9,"column_end":20},"name":"with_suffix","qualname":"<StorageKeyIterator<K, T, H>>::with_suffix","value":"fn (module: &[u8], item: &[u8], suffix: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct iterator to iterate over map items in `module` for the map called `item`.\n","sig":null,"attributes":[{"value":"/ Construct iterator to iterate over map items in `module` for the map called `item`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":171467,"byte_end":171554,"line_start":97,"line_end":97,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":172015,"byte_end":172020,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"drain","qualname":"<StorageKeyIterator<K, T, H>>::drain","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Mutate this iterator into a draining iterator; items iterated are removed from storage.\n","sig":null,"attributes":[{"value":"/ Mutate this iterator into a draining iterator; items iterated are removed from storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":171915,"byte_end":172006,"line_start":107,"line_end":107,"column_start":2,"column_end":93}}]},{"kind":"Function","id":{"krate":0,"index":602},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":173066,"byte_end":173084,"line_start":150,"line_end":150,"column_start":8,"column_end":26},"name":"have_storage_value","qualname":"::storage::migration::have_storage_value","value":"fn (module: &[u8], item: &[u8], hash: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":172962,"byte_end":173058,"line_start":149,"line_end":149,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":603},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":173298,"byte_end":173315,"line_start":155,"line_end":155,"column_start":8,"column_end":25},"name":"get_storage_value","qualname":"::storage::migration::get_storage_value","value":"fn <T> (module: &[u8], item: &[u8], hash: &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":173194,"byte_end":173290,"line_start":154,"line_end":154,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":605},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":173731,"byte_end":173749,"line_start":164,"line_end":164,"column_start":8,"column_end":26},"name":"take_storage_value","qualname":"::storage::migration::take_storage_value","value":"fn <T> (module: &[u8], item: &[u8], hash: &[u8]) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Take a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Take a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":173626,"byte_end":173723,"line_start":163,"line_end":163,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":607},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":174167,"byte_end":174184,"line_start":173,"line_end":173,"column_start":8,"column_end":25},"name":"put_storage_value","qualname":"::storage::migration::put_storage_value","value":"fn <T> (module: &[u8], item: &[u8], hash: &[u8], value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put a particular value into storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Put a particular value into storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":174061,"byte_end":174159,"line_start":172,"line_end":172,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":609},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":174592,"byte_end":174613,"line_start":182,"line_end":182,"column_start":8,"column_end":29},"name":"remove_storage_prefix","qualname":"::storage::migration::remove_storage_prefix","value":"fn (module: &[u8], item: &[u8], hash: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":174488,"byte_end":174584,"line_start":181,"line_end":181,"column_start":1,"column_end":97}}]},{"kind":"Function","id":{"krate":0,"index":610},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":174999,"byte_end":175016,"line_start":191,"line_end":191,"column_start":8,"column_end":25},"name":"take_storage_item","qualname":"::storage::migration::take_storage_item","value":"fn <K, T, H> (module: &[u8], item: &[u8], key: K) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.\n","sig":null,"attributes":[{"value":"/ Get a particular value in storage by the `module`, the map's `item` name and the key `hash`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":174895,"byte_end":174991,"line_start":190,"line_end":190,"column_start":1,"column_end":97}}]},{"kind":"Trait","id":{"krate":0,"index":614},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98735,"byte_end":98747,"line_start":36,"line_end":36,"column_start":11,"column_end":23},"name":"StorageValue","qualname":"::storage::StorageValue","value":"StorageValue<T: FullCodec>","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":640}],"decl_id":null,"docs":" A trait for working with macro-generated storage values under the substrate storage API.","sig":null,"attributes":[{"value":"/ A trait for working with macro-generated storage values under the substrate storage API.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98550,"byte_end":98642,"line_start":32,"line_end":32,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98643,"byte_end":98646,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98647,"byte_end":98692,"line_start":34,"line_end":34,"column_start":1,"column_end":46}},{"value":"/ [`generator::StorageValue`]","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98693,"byte_end":98724,"line_start":35,"line_end":35,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":616},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98806,"byte_end":98811,"line_start":38,"line_end":38,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageValue::Query","value":"type Query;","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" The type that get/take return.\n","sig":null,"attributes":[{"value":"/ The type that get/take return.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98765,"byte_end":98799,"line_start":37,"line_end":37,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98844,"byte_end":98854,"line_start":41,"line_end":41,"column_start":5,"column_end":15},"name":"hashed_key","qualname":"::storage::StorageValue::hashed_key","value":"fn () -> [u8; 32]","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Get the storage key.\n","sig":null,"attributes":[{"value":"/ Get the storage key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98815,"byte_end":98839,"line_start":40,"line_end":40,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98926,"byte_end":98932,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"exists","qualname":"::storage::StorageValue::exists","value":"fn () -> bool","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98872,"byte_end":98921,"line_start":43,"line_end":43,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99005,"byte_end":99008,"line_start":47,"line_end":47,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageValue::get","value":"fn () -> Self::Query","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Load the value from the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Load the value from the provided storage instance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98946,"byte_end":99000,"line_start":46,"line_end":46,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99143,"byte_end":99150,"line_start":51,"line_end":51,"column_start":5,"column_end":12},"name":"try_get","qualname":"::storage::StorageValue::try_get","value":"fn () -> Result<T, ()>","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Try to get the underlying value from the provided storage instance; `Ok` if it exists,\n `Err` if not.\n","sig":null,"attributes":[{"value":"/ Try to get the underlying value from the provided storage instance; `Ok` if it exists,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99029,"byte_end":99119,"line_start":49,"line_end":49,"column_start":2,"column_end":92}},{"value":"/ `Err` if not.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99121,"byte_end":99138,"line_start":50,"line_end":50,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100058,"byte_end":100067,"line_start":73,"line_end":73,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::StorageValue::translate","value":"fn <O, F> (f: F) -> Result<Option<T>, ()>","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Translate a value from some previous type (`O`) to the current type.","sig":null,"attributes":[{"value":"/ Translate a value from some previous type (`O`) to the current type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99173,"byte_end":99245,"line_start":53,"line_end":53,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99247,"byte_end":99250,"line_start":54,"line_end":54,"column_start":2,"column_end":5}},{"value":"/ `f: F` is the translation function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99252,"byte_end":99291,"line_start":55,"line_end":55,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99293,"byte_end":99296,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ Returns `Err` if the storage item could not be interpreted as the old type, and Ok, along","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99298,"byte_end":99391,"line_start":57,"line_end":57,"column_start":2,"column_end":95}},{"value":"/ with the new value if it could.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99393,"byte_end":99428,"line_start":58,"line_end":58,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99430,"byte_end":99433,"line_start":59,"line_end":59,"column_start":2,"column_end":5}},{"value":"/ NOTE: This operates from and to `Option<_>` types; no effort is made to respect the default","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99435,"byte_end":99530,"line_start":60,"line_end":60,"column_start":2,"column_end":97}},{"value":"/ value of the original type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99532,"byte_end":99563,"line_start":61,"line_end":61,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99565,"byte_end":99568,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99570,"byte_end":99583,"line_start":63,"line_end":63,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99585,"byte_end":99588,"line_start":64,"line_end":64,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99590,"byte_end":99683,"line_start":65,"line_end":65,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99685,"byte_end":99757,"line_start":66,"line_end":66,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99759,"byte_end":99762,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99764,"byte_end":99775,"line_start":68,"line_end":68,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99777,"byte_end":99780,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade, while","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99782,"byte_end":99878,"line_start":70,"line_end":70,"column_start":2,"column_end":98}},{"value":"/ ensuring **no usage of this storage are made before the call to `on_runtime_upgrade`**. (More","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99880,"byte_end":99977,"line_start":71,"line_end":71,"column_start":2,"column_end":99}},{"value":"/ precisely prior initialized modules doesn't make use of this storage).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":99979,"byte_end":100053,"line_start":72,"line_end":72,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100221,"byte_end":100224,"line_start":76,"line_end":76,"column_start":5,"column_end":8},"name":"put","qualname":"::storage::StorageValue::put","value":"fn <Arg> (val: Arg) -> ()","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance.\n","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100148,"byte_end":100216,"line_start":75,"line_end":75,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100395,"byte_end":100398,"line_start":80,"line_end":80,"column_start":5,"column_end":8},"name":"set","qualname":"::storage::StorageValue::set","value":"fn (val: Self::Query) -> ()","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Store a value under this key into the provided storage instance; this uses the query\n type rather than the underlying value.\n","sig":null,"attributes":[{"value":"/ Store a value under this key into the provided storage instance; this uses the query","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100258,"byte_end":100346,"line_start":78,"line_end":78,"column_start":2,"column_end":90}},{"value":"/ type rather than the underlying value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100348,"byte_end":100390,"line_start":79,"line_end":79,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100445,"byte_end":100451,"line_start":83,"line_end":83,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageValue::mutate","value":"fn <R, F> (f: F) -> R","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Mutate the value\n","sig":null,"attributes":[{"value":"/ Mutate the value","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100420,"byte_end":100440,"line_start":82,"line_end":82,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100552,"byte_end":100562,"line_start":86,"line_end":86,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageValue::try_mutate","value":"fn <R, E, F> (f: F) -> Result<R, E>","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Mutate the value if closure returns `Ok`\n","sig":null,"attributes":[{"value":"/ Mutate the value if closure returns `Ok`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100503,"byte_end":100547,"line_start":85,"line_end":85,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100672,"byte_end":100676,"line_start":89,"line_end":89,"column_start":5,"column_end":9},"name":"kill","qualname":"::storage::StorageValue::kill","value":"fn () -> ()","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Clear the storage value.\n","sig":null,"attributes":[{"value":"/ Clear the storage value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100639,"byte_end":100667,"line_start":88,"line_end":88,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100741,"byte_end":100745,"line_start":92,"line_end":92,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageValue::take","value":"fn () -> Self::Query","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100682,"byte_end":100736,"line_start":91,"line_end":91,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101099,"byte_end":101105,"line_start":103,"line_end":103,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageValue::append","value":"fn <Item, EncodeLikeItem> (item: EncodeLikeItem) -> ()","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100766,"byte_end":100820,"line_start":94,"line_end":94,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100822,"byte_end":100825,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ `T` is required to implement [`StorageAppend`].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100827,"byte_end":100878,"line_start":96,"line_end":96,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100880,"byte_end":100883,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100885,"byte_end":100898,"line_start":98,"line_end":98,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100900,"byte_end":100903,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage item will be overwritten","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100905,"byte_end":100990,"line_start":100,"line_end":100,"column_start":2,"column_end":87}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":100992,"byte_end":101075,"line_start":101,"line_end":101,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101077,"byte_end":101094,"line_start":102,"line_end":102,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101665,"byte_end":101675,"line_start":120,"line_end":120,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageValue::decode_len","value":"fn () -> Option<usize>","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101237,"byte_end":101312,"line_start":109,"line_end":109,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101314,"byte_end":101317,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ `T` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101319,"byte_end":101376,"line_start":111,"line_end":111,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101378,"byte_end":101381,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101383,"byte_end":101469,"line_start":113,"line_end":113,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101471,"byte_end":101509,"line_start":114,"line_end":114,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101511,"byte_end":101514,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101516,"byte_end":101529,"line_start":116,"line_end":116,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101531,"byte_end":101534,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101536,"byte_end":101629,"line_start":118,"line_end":118,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101631,"byte_end":101660,"line_start":119,"line_end":119,"column_start":2,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":641},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101896,"byte_end":101906,"line_start":129,"line_end":129,"column_start":11,"column_end":21},"name":"StorageMap","qualname":"::storage::StorageMap","value":"StorageMap<K: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":649},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":659},{"krate":0,"index":663},{"krate":0,"index":668},{"krate":0,"index":672},{"krate":0,"index":677},{"krate":0,"index":679},{"krate":0,"index":683},{"krate":0,"index":685},{"krate":0,"index":688}],"decl_id":null,"docs":" A strongly-typed map in storage.","sig":null,"attributes":[{"value":"/ A strongly-typed map in storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101769,"byte_end":101805,"line_start":125,"line_end":125,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101806,"byte_end":101809,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101810,"byte_end":101855,"line_start":127,"line_end":127,"column_start":1,"column_end":46}},{"value":"/ [`generator::StorageMap`]","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101856,"byte_end":101885,"line_start":128,"line_end":128,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":644},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101980,"byte_end":101985,"line_start":131,"line_end":131,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageMap::Query","value":"type Query;","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" The type that get/take return.\n","sig":null,"attributes":[{"value":"/ The type that get/take return.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101939,"byte_end":101973,"line_start":130,"line_end":130,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102072,"byte_end":102086,"line_start":134,"line_end":134,"column_start":5,"column_end":19},"name":"hashed_key_for","qualname":"::storage::StorageMap::hashed_key_for","value":"fn <KeyArg> (key: KeyArg) -> Vec<u8>","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":101989,"byte_end":102067,"line_start":133,"line_end":133,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102191,"byte_end":102203,"line_start":137,"line_end":137,"column_start":5,"column_end":17},"name":"contains_key","qualname":"::storage::StorageMap::contains_key","value":"fn <KeyArg> (key: KeyArg) -> bool","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102137,"byte_end":102186,"line_start":136,"line_end":136,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102318,"byte_end":102321,"line_start":140,"line_end":140,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageMap::get","value":"fn <KeyArg> (key: KeyArg) -> Self::Query","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the map.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102251,"byte_end":102313,"line_start":139,"line_end":139,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102413,"byte_end":102417,"line_start":143,"line_end":143,"column_start":5,"column_end":9},"name":"swap","qualname":"::storage::StorageMap::swap","value":"fn <KeyArg1, KeyArg2> (key1: KeyArg1, key2: KeyArg2) -> ()","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Swap the values of two keys.\n","sig":null,"attributes":[{"value":"/ Swap the values of two keys.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102376,"byte_end":102408,"line_start":142,"line_end":142,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102571,"byte_end":102577,"line_start":146,"line_end":146,"column_start":5,"column_end":11},"name":"insert","qualname":"::storage::StorageMap::insert","value":"fn <KeyArg, ValArg> (key: KeyArg, val: ValArg) -> ()","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Store a value to be associated with the given key from the map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given key from the map.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102499,"byte_end":102566,"line_start":145,"line_end":145,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102691,"byte_end":102697,"line_start":149,"line_end":149,"column_start":5,"column_end":11},"name":"remove","qualname":"::storage::StorageMap::remove","value":"fn <KeyArg> (key: KeyArg) -> ()","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Remove the value under a key.\n","sig":null,"attributes":[{"value":"/ Remove the value under a key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102653,"byte_end":102686,"line_start":148,"line_end":148,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102775,"byte_end":102781,"line_start":152,"line_end":152,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageMap::mutate","value":"fn <KeyArg, R, F> (key: KeyArg, f: F) -> R","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Mutate the value under a key.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102737,"byte_end":102770,"line_start":151,"line_end":151,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102929,"byte_end":102939,"line_start":155,"line_end":155,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageMap::try_mutate","value":"fn <KeyArg, R, E, F> (key: KeyArg, f: F) -> Result<R, E>","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":102869,"byte_end":102924,"line_start":154,"line_end":154,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103139,"byte_end":103152,"line_start":161,"line_end":161,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::storage::StorageMap::mutate_exists","value":"fn <KeyArg, R, F> (key: KeyArg, f: F) -> R","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Mutate the value under a key. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under a key. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103060,"byte_end":103134,"line_start":160,"line_end":160,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103339,"byte_end":103356,"line_start":164,"line_end":164,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::storage::StorageMap::try_mutate_exists","value":"fn <KeyArg, R, E, F> (key: KeyArg, f: F) -> Result<R, E>","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, only if an `Ok` value is returned. Deletes the item if mutated to a `None`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103238,"byte_end":103334,"line_start":163,"line_end":163,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103511,"byte_end":103515,"line_start":170,"line_end":170,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageMap::take","value":"fn <KeyArg> (key: KeyArg) -> Self::Query","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Take the value under a key.\n","sig":null,"attributes":[{"value":"/ Take the value under a key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103475,"byte_end":103506,"line_start":169,"line_end":169,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103903,"byte_end":103909,"line_start":181,"line_end":181,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageMap::append","value":"fn <Item, EncodeLikeItem, EncodeLikeKey> (key: EncodeLikeKey, item: EncodeLikeItem) -> ()","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Append the given items to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given items to the value in the storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103570,"byte_end":103625,"line_start":172,"line_end":172,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103627,"byte_end":103630,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement `codec::EncodeAppend`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103632,"byte_end":103687,"line_start":174,"line_end":174,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103689,"byte_end":103692,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103694,"byte_end":103707,"line_start":176,"line_end":176,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103709,"byte_end":103712,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103714,"byte_end":103794,"line_start":178,"line_end":178,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103796,"byte_end":103879,"line_start":179,"line_end":179,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":103881,"byte_end":103898,"line_start":180,"line_end":180,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104563,"byte_end":104573,"line_start":200,"line_end":200,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageMap::decode_len","value":"fn <KeyArg> (key: KeyArg) -> Option<usize>","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104108,"byte_end":104192,"line_start":188,"line_end":188,"column_start":2,"column_end":86}},{"value":"/ given `key`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104194,"byte_end":104210,"line_start":189,"line_end":189,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104212,"byte_end":104215,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104217,"byte_end":104274,"line_start":191,"line_end":191,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104276,"byte_end":104279,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104281,"byte_end":104367,"line_start":193,"line_end":193,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104369,"byte_end":104407,"line_start":194,"line_end":194,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104409,"byte_end":104412,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104414,"byte_end":104427,"line_start":196,"line_end":196,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104429,"byte_end":104432,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104434,"byte_end":104527,"line_start":198,"line_end":198,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104529,"byte_end":104558,"line_start":199,"line_end":199,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104900,"byte_end":104911,"line_start":209,"line_end":209,"column_start":5,"column_end":16},"name":"migrate_key","qualname":"::storage::StorageMap::migrate_key","value":"fn <OldHasher, KeyArg> (key: KeyArg) -> Option<V>","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from a defunct `OldHasher` to the current hasher.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104711,"byte_end":104801,"line_start":206,"line_end":206,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104803,"byte_end":104806,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104808,"byte_end":104895,"line_start":208,"line_end":208,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105179,"byte_end":105201,"line_start":214,"line_end":214,"column_start":5,"column_end":27},"name":"migrate_key_from_blake","qualname":"::storage::StorageMap::migrate_key_from_blake","value":"fn <KeyArg> (key: KeyArg) -> Option<V>","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key` from a `blake2_256` hasher to the current hasher.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key` from a `blake2_256` hasher to the current hasher.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":104990,"byte_end":105080,"line_start":211,"line_end":211,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105082,"byte_end":105085,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105087,"byte_end":105174,"line_start":213,"line_end":213,"column_start":2,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":690},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105409,"byte_end":105427,"line_start":220,"line_end":220,"column_start":11,"column_end":29},"name":"IterableStorageMap","qualname":"::storage::IterableStorageMap","value":"IterableStorageMap<K: FullEncode, V: FullCodec>: StorageMap<K, V>","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696}],"decl_id":null,"docs":" A strongly-typed map in storage whose keys and values can be iterated over.\n","sig":null,"attributes":[{"value":"/ A strongly-typed map in storage whose keys and values can be iterated over.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105319,"byte_end":105398,"line_start":219,"line_end":219,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":693},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105536,"byte_end":105544,"line_start":222,"line_end":222,"column_start":7,"column_end":15},"name":"Iterator","qualname":"::storage::IterableStorageMap::Iterator","value":"type Iterator: Iterator<Item = (K, V)>;","parent":{"krate":0,"index":690},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key, value)`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105478,"byte_end":105529,"line_start":221,"line_end":221,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105713,"byte_end":105717,"line_start":226,"line_end":226,"column_start":5,"column_end":9},"name":"iter","qualname":"::storage::IterableStorageMap::iter","value":"fn () -> Self::Iterator","parent":{"krate":0,"index":690},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order. If you alter the map while doing\n this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order. If you alter the map while doing","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105573,"byte_end":105667,"line_start":224,"line_end":224,"column_start":2,"column_end":96}},{"value":"/ this, you'll get undefined results.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105669,"byte_end":105708,"line_start":225,"line_end":225,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105915,"byte_end":105920,"line_start":230,"line_end":230,"column_start":5,"column_end":10},"name":"drain","qualname":"::storage::IterableStorageMap::drain","value":"fn () -> Self::Iterator","parent":{"krate":0,"index":690},"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order. If you\n add elements to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order. If you","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105741,"byte_end":105833,"line_start":228,"line_end":228,"column_start":2,"column_end":94}},{"value":"/ add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105835,"byte_end":105910,"line_start":229,"line_end":229,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106124,"byte_end":106133,"line_start":234,"line_end":234,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::IterableStorageMap::translate","value":"fn <O, F> (f: F) -> ()","parent":{"krate":0,"index":690},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.\n","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105944,"byte_end":106038,"line_start":232,"line_end":232,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106040,"byte_end":106119,"line_start":233,"line_end":233,"column_start":2,"column_end":81}}]},{"kind":"Trait","id":{"krate":0,"index":699},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106288,"byte_end":106312,"line_start":238,"line_end":238,"column_start":11,"column_end":35},"name":"IterableStorageDoubleMap","qualname":"::storage::IterableStorageDoubleMap","value":"IterableStorageDoubleMap<K1: FullCodec, K2: FullCodec, V: FullCodec>: StorageDoubleMap<K1, K2, V>","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711}],"decl_id":null,"docs":" A strongly-typed double map in storage whose secondary keys and values can be iterated over.\n","sig":null,"attributes":[{"value":"/ A strongly-typed double map in storage whose secondary keys and values can be iterated over.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106181,"byte_end":106277,"line_start":237,"line_end":237,"column_start":1,"column_end":97}}]},{"kind":"Type","id":{"krate":0,"index":703},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106453,"byte_end":106467,"line_start":244,"line_end":244,"column_start":7,"column_end":21},"name":"PrefixIterator","qualname":"::storage::IterableStorageDoubleMap::PrefixIterator","value":"type PrefixIterator: Iterator<Item = (K2, V)>;","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key2, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key2, value)`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106394,"byte_end":106446,"line_start":243,"line_end":243,"column_start":2,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":704},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106562,"byte_end":106570,"line_start":247,"line_end":247,"column_start":7,"column_end":15},"name":"Iterator","qualname":"::storage::IterableStorageDoubleMap::Iterator","value":"type Iterator: Iterator<Item = (K1, K2, V)>;","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" The type that iterates over all `(key1, key2, value)`.\n","sig":null,"attributes":[{"value":"/ The type that iterates over all `(key1, key2, value)`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106497,"byte_end":106555,"line_start":246,"line_end":246,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106811,"byte_end":106822,"line_start":252,"line_end":252,"column_start":5,"column_end":16},"name":"iter_prefix","qualname":"::storage::IterableStorageDoubleMap::iter_prefix","value":"fn (k1: impl EncodeLike<K1>) -> Self::PrefixIterator","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map with first key `k1` in no particular order. If you add or\n remove values whose first key is `k1` to the map while doing this, you'll get undefined\n results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map with first key `k1` in no particular order. If you add or","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106604,"byte_end":106699,"line_start":249,"line_end":249,"column_start":2,"column_end":97}},{"value":"/ remove values whose first key is `k1` to the map while doing this, you'll get undefined","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106701,"byte_end":106792,"line_start":250,"line_end":250,"column_start":2,"column_end":93}},{"value":"/ results.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106794,"byte_end":106806,"line_start":251,"line_end":251,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107094,"byte_end":107106,"line_start":257,"line_end":257,"column_start":5,"column_end":17},"name":"drain_prefix","qualname":"::storage::IterableStorageDoubleMap::drain_prefix","value":"fn (k1: impl EncodeLike<K1>) -> Self::PrefixIterator","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" Remove all elements from the map with first key `k1` and iterate through them in no\n particular order. If you add elements with first key `k1` to the map while doing this,\n you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map with first key `k1` and iterate through them in no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106875,"byte_end":106962,"line_start":254,"line_end":254,"column_start":2,"column_end":89}},{"value":"/ particular order. If you add elements with first key `k1` to the map while doing this,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106964,"byte_end":107054,"line_start":255,"line_end":255,"column_start":2,"column_end":92}},{"value":"/ you'll get undefined results.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107056,"byte_end":107089,"line_start":256,"line_end":256,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107317,"byte_end":107321,"line_start":261,"line_end":261,"column_start":5,"column_end":9},"name":"iter","qualname":"::storage::IterableStorageDoubleMap::iter","value":"fn () -> Self::Iterator","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" Enumerate all elements in the map in no particular order. If you add or remove values to\n the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Enumerate all elements in the map in no particular order. If you add or remove values to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107159,"byte_end":107251,"line_start":259,"line_end":259,"column_start":2,"column_end":94}},{"value":"/ the map while doing this, you'll get undefined results.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107253,"byte_end":107312,"line_start":260,"line_end":260,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107519,"byte_end":107524,"line_start":265,"line_end":265,"column_start":5,"column_end":10},"name":"drain","qualname":"::storage::IterableStorageDoubleMap::drain","value":"fn () -> Self::Iterator","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" Remove all elements from the map and iterate through them in no particular order. If you\n add elements to the map while doing this, you'll get undefined results.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the map and iterate through them in no particular order. If you","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107345,"byte_end":107437,"line_start":263,"line_end":263,"column_start":2,"column_end":94}},{"value":"/ add elements to the map while doing this, you'll get undefined results.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107439,"byte_end":107514,"line_start":264,"line_end":264,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107728,"byte_end":107737,"line_start":269,"line_end":269,"column_start":5,"column_end":14},"name":"translate","qualname":"::storage::IterableStorageDoubleMap::translate","value":"fn <O, F> (f: F) -> ()","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" Translate the values of all elements by a function `f`, in the map in no particular order.\n By returning `None` from `f` for an element, you'll remove it from the map.\n","sig":null,"attributes":[{"value":"/ Translate the values of all elements by a function `f`, in the map in no particular order.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107548,"byte_end":107642,"line_start":267,"line_end":267,"column_start":2,"column_end":96}},{"value":"/ By returning `None` from `f` for an element, you'll remove it from the map.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107644,"byte_end":107723,"line_start":268,"line_end":268,"column_start":2,"column_end":81}}]},{"kind":"Trait","id":{"krate":0,"index":714},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108035,"byte_end":108051,"line_start":279,"line_end":279,"column_start":11,"column_end":27},"name":"StorageDoubleMap","qualname":"::storage::StorageDoubleMap","value":"StorageDoubleMap<K1: FullEncode, K2: FullEncode, V: FullCodec>","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":728},{"krate":0,"index":731},{"krate":0,"index":736},{"krate":0,"index":740},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":752},{"krate":0,"index":758},{"krate":0,"index":763},{"krate":0,"index":766}],"decl_id":null,"docs":" An implementation of a map with a two keys.","sig":null,"attributes":[{"value":"/ An implementation of a map with a two keys.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107782,"byte_end":107829,"line_start":272,"line_end":272,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107830,"byte_end":107833,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ It provides an important ability to efficiently remove all entries","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107834,"byte_end":107904,"line_start":274,"line_end":274,"column_start":1,"column_end":71}},{"value":"/ that have a common first key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107905,"byte_end":107938,"line_start":275,"line_end":275,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107939,"byte_end":107942,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ Details on implementation can be found at","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107943,"byte_end":107988,"line_start":277,"line_end":277,"column_start":1,"column_end":46}},{"value":"/ [`generator::StorageDoubleMap`]","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":107989,"byte_end":108024,"line_start":278,"line_end":278,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":718},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108143,"byte_end":108148,"line_start":281,"line_end":281,"column_start":7,"column_end":12},"name":"Query","qualname":"::storage::StorageDoubleMap::Query","value":"type Query;","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" The type that get/take returns.\n","sig":null,"attributes":[{"value":"/ The type that get/take returns.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108101,"byte_end":108136,"line_start":280,"line_end":280,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108235,"byte_end":108249,"line_start":284,"line_end":284,"column_start":5,"column_end":19},"name":"hashed_key_for","qualname":"::storage::StorageDoubleMap::hashed_key_for","value":"fn <KArg1, KArg2> (k1: KArg1, k2: KArg2) -> Vec<u8>","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Get the storage key used to fetch a value corresponding to a specific key.\n","sig":null,"attributes":[{"value":"/ Get the storage key used to fetch a value corresponding to a specific key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108152,"byte_end":108230,"line_start":283,"line_end":283,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108410,"byte_end":108422,"line_start":290,"line_end":290,"column_start":5,"column_end":17},"name":"contains_key","qualname":"::storage::StorageDoubleMap::contains_key","value":"fn <KArg1, KArg2> (k1: KArg1, k2: KArg2) -> bool","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Does the value (explicitly) exist in storage?\n","sig":null,"attributes":[{"value":"/ Does the value (explicitly) exist in storage?","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108356,"byte_end":108405,"line_start":289,"line_end":289,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108600,"byte_end":108603,"line_start":296,"line_end":296,"column_start":5,"column_end":8},"name":"get","qualname":"::storage::StorageDoubleMap::get","value":"fn <KArg1, KArg2> (k1: KArg1, k2: KArg2) -> Self::Query","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Load the value associated with the given key from the double map.\n","sig":null,"attributes":[{"value":"/ Load the value associated with the given key from the double map.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108526,"byte_end":108595,"line_start":295,"line_end":295,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108773,"byte_end":108777,"line_start":302,"line_end":302,"column_start":5,"column_end":9},"name":"take","qualname":"::storage::StorageDoubleMap::take","value":"fn <KArg1, KArg2> (k1: KArg1, k2: KArg2) -> Self::Query","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Take a value from storage, removing it afterwards.\n","sig":null,"attributes":[{"value":"/ Take a value from storage, removing it afterwards.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108714,"byte_end":108768,"line_start":301,"line_end":301,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108930,"byte_end":108934,"line_start":308,"line_end":308,"column_start":5,"column_end":9},"name":"swap","qualname":"::storage::StorageDoubleMap::swap","value":"fn <XKArg1, XKArg2, YKArg1, YKArg2> (x_k1: XKArg1, x_k2: XKArg2, y_k1: YKArg1, y_k2: YKArg2) -> ()","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Swap the values of two key-pairs.\n","sig":null,"attributes":[{"value":"/ Swap the values of two key-pairs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":108888,"byte_end":108925,"line_start":307,"line_end":307,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":109216,"byte_end":109222,"line_start":316,"line_end":316,"column_start":5,"column_end":11},"name":"insert","qualname":"::storage::StorageDoubleMap::insert","value":"fn <KArg1, KArg2, VArg> (k1: KArg1, k2: KArg2, val: VArg) -> ()","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Store a value to be associated with the given keys from the double map.\n","sig":null,"attributes":[{"value":"/ Store a value to be associated with the given keys from the double map.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":109136,"byte_end":109211,"line_start":315,"line_end":315,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":109405,"byte_end":109411,"line_start":323,"line_end":323,"column_start":5,"column_end":11},"name":"remove","qualname":"::storage::StorageDoubleMap::remove","value":"fn <KArg1, KArg2> (k1: KArg1, k2: KArg2) -> ()","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Remove the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Remove the value under the given keys.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":109358,"byte_end":109400,"line_start":322,"line_end":322,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":109554,"byte_end":109567,"line_start":329,"line_end":329,"column_start":5,"column_end":18},"name":"remove_prefix","qualname":"::storage::StorageDoubleMap::remove_prefix","value":"fn <KArg1> (k1: KArg1) -> ()","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Remove all values under the first key.\n","sig":null,"attributes":[{"value":"/ Remove all values under the first key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":109507,"byte_end":109549,"line_start":328,"line_end":328,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":109680,"byte_end":109698,"line_start":332,"line_end":332,"column_start":5,"column_end":23},"name":"iter_prefix_values","qualname":"::storage::StorageDoubleMap::iter_prefix_values","value":"fn <KArg1> (k1: KArg1) -> PrefixIterator<V>","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Iterate over values that share the first key.\n","sig":null,"attributes":[{"value":"/ Iterate over values that share the first key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":109626,"byte_end":109675,"line_start":331,"line_end":331,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":109827,"byte_end":109833,"line_start":336,"line_end":336,"column_start":5,"column_end":11},"name":"mutate","qualname":"::storage::StorageDoubleMap::mutate","value":"fn <KArg1, KArg2, R, F> (k1: KArg1, k2: KArg2, f: F) -> R","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Mutate the value under the given keys.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":109780,"byte_end":109822,"line_start":335,"line_end":335,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110059,"byte_end":110069,"line_start":343,"line_end":343,"column_start":5,"column_end":15},"name":"try_mutate","qualname":"::storage::StorageDoubleMap::try_mutate","value":"fn <KArg1, KArg2, R, E, F> (k1: KArg1, k2: KArg2, f: F) -> Result<R, E>","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Mutate the value under the given keys when the closure returns `Ok`.\n","sig":null,"attributes":[{"value":"/ Mutate the value under the given keys when the closure returns `Ok`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":109982,"byte_end":110054,"line_start":342,"line_end":342,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110571,"byte_end":110577,"line_start":358,"line_end":358,"column_start":5,"column_end":11},"name":"append","qualname":"::storage::StorageDoubleMap::append","value":"fn <Item, EncodeLikeItem, KArg1, KArg2> (k1: KArg1, k2: KArg2, item: EncodeLikeItem) -> ()","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Append the given item to the value in the storage.","sig":null,"attributes":[{"value":"/ Append the given item to the value in the storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110243,"byte_end":110297,"line_start":349,"line_end":349,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110299,"byte_end":110302,"line_start":350,"line_end":350,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageAppend`].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110304,"byte_end":110355,"line_start":351,"line_end":351,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110357,"byte_end":110360,"line_start":352,"line_end":352,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110362,"byte_end":110375,"line_start":353,"line_end":353,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110377,"byte_end":110380,"line_start":354,"line_end":354,"column_start":2,"column_end":5}},{"value":"/ If the storage item is not encoded properly, the storage will be overwritten","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110382,"byte_end":110462,"line_start":355,"line_end":355,"column_start":2,"column_end":82}},{"value":"/ and set to `[item]`. Any default value set for the storage item will be ignored","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110464,"byte_end":110547,"line_start":356,"line_end":356,"column_start":2,"column_end":85}},{"value":"/ on overwrite.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110549,"byte_end":110566,"line_start":357,"line_end":357,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111271,"byte_end":111281,"line_start":381,"line_end":381,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageDoubleMap::decode_len","value":"fn <KArg1, KArg2> (key1: KArg1, key2: KArg2) -> Option<usize>","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Read the length of the storage value without decoding the entire value under the\n given `key1` and `key2`.","sig":null,"attributes":[{"value":"/ Read the length of the storage value without decoding the entire value under the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110804,"byte_end":110888,"line_start":369,"line_end":369,"column_start":2,"column_end":86}},{"value":"/ given `key1` and `key2`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110890,"byte_end":110918,"line_start":370,"line_end":370,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110920,"byte_end":110923,"line_start":371,"line_end":371,"column_start":2,"column_end":5}},{"value":"/ `V` is required to implement [`StorageDecodeLength`].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110925,"byte_end":110982,"line_start":372,"line_end":372,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110984,"byte_end":110987,"line_start":373,"line_end":373,"column_start":2,"column_end":5}},{"value":"/ If the value does not exists or it fails to decode the length, `None` is returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":110989,"byte_end":111075,"line_start":374,"line_end":374,"column_start":2,"column_end":88}},{"value":"/ Otherwise `Some(len)` is returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111077,"byte_end":111115,"line_start":375,"line_end":375,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111117,"byte_end":111120,"line_start":376,"line_end":376,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111122,"byte_end":111135,"line_start":377,"line_end":377,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111137,"byte_end":111140,"line_start":378,"line_end":378,"column_start":2,"column_end":5}},{"value":"/ `None` does not mean that `get()` does not return a value. The default value is completly","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111142,"byte_end":111235,"line_start":379,"line_end":379,"column_start":2,"column_end":95}},{"value":"/ ignored by this function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111237,"byte_end":111266,"line_start":380,"line_end":380,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111708,"byte_end":111720,"line_start":394,"line_end":394,"column_start":5,"column_end":17},"name":"migrate_keys","qualname":"::storage::StorageDoubleMap::migrate_keys","value":"fn <OldHasher1, OldHasher2, KeyArg1, KeyArg2> (key1: KeyArg1, key2: KeyArg2) -> Option<V>","parent":{"krate":0,"index":714},"children":[],"decl_id":null,"docs":" Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and\n `OldHasher2` to the current hashers.","sig":null,"attributes":[{"value":"/ Migrate an item with the given `key1` and `key2` from defunct `OldHasher1` and","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111485,"byte_end":111567,"line_start":390,"line_end":390,"column_start":2,"column_end":84}},{"value":"/ `OldHasher2` to the current hashers.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111569,"byte_end":111609,"line_start":391,"line_end":391,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111611,"byte_end":111614,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ If the key doesn't exist, then it's a no-op. If it does, then it returns its value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111616,"byte_end":111703,"line_start":393,"line_end":393,"column_start":2,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":771},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111926,"byte_end":111940,"line_start":403,"line_end":403,"column_start":12,"column_end":26},"name":"PrefixIterator","qualname":"::storage::PrefixIterator","value":"PrefixIterator {  }","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775}],"decl_id":null,"docs":" Iterator for prefixed map.\n","sig":null,"attributes":[{"value":"/ Iterator for prefixed map.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":111884,"byte_end":111914,"line_start":402,"line_end":402,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":781},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112771,"byte_end":112789,"line_start":441,"line_end":441,"column_start":11,"column_end":29},"name":"StoragePrefixedMap","qualname":"::storage::StoragePrefixedMap","value":"StoragePrefixedMap<Value: FullCodec>","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790}],"decl_id":null,"docs":" Trait for maps that store all its value after a unique prefix.","sig":null,"attributes":[{"value":"/ Trait for maps that store all its value after a unique prefix.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112575,"byte_end":112641,"line_start":435,"line_end":435,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112642,"byte_end":112645,"line_start":436,"line_end":436,"column_start":1,"column_end":4}},{"value":"/ By default the final prefix is:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112646,"byte_end":112681,"line_start":437,"line_end":437,"column_start":1,"column_end":36}},{"value":"/ ```nocompile","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112682,"byte_end":112698,"line_start":438,"line_end":438,"column_start":1,"column_end":17}},{"value":"/ Twox128(module_prefix) ++ Twox128(storage_prefix)","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112699,"byte_end":112752,"line_start":439,"line_end":439,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112753,"byte_end":112760,"line_start":440,"line_end":440,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112865,"byte_end":112878,"line_start":443,"line_end":443,"column_start":5,"column_end":18},"name":"module_prefix","qualname":"::storage::StoragePrefixedMap::module_prefix","value":"fn () -> &'static [u8]","parent":{"krate":0,"index":781},"children":[],"decl_id":null,"docs":" Module prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Module prefix. Used for generating final key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112811,"byte_end":112860,"line_start":442,"line_end":442,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112956,"byte_end":112970,"line_start":446,"line_end":446,"column_start":5,"column_end":19},"name":"storage_prefix","qualname":"::storage::StoragePrefixedMap::storage_prefix","value":"fn () -> &'static [u8]","parent":{"krate":0,"index":781},"children":[],"decl_id":null,"docs":" Storage prefix. Used for generating final key.\n","sig":null,"attributes":[{"value":"/ Storage prefix. Used for generating final key.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112901,"byte_end":112951,"line_start":445,"line_end":445,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113043,"byte_end":113055,"line_start":449,"line_end":449,"column_start":5,"column_end":17},"name":"final_prefix","qualname":"::storage::StoragePrefixedMap::final_prefix","value":"fn () -> [u8; 32]","parent":{"krate":0,"index":781},"children":[],"decl_id":null,"docs":" Final full prefix that prefixes all keys.\n","sig":null,"attributes":[{"value":"/ Final full prefix that prefixes all keys.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112993,"byte_end":113038,"line_start":448,"line_end":448,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113315,"byte_end":113325,"line_start":457,"line_end":457,"column_start":5,"column_end":15},"name":"remove_all","qualname":"::storage::StoragePrefixedMap::remove_all","value":"fn () -> ()","parent":{"krate":0,"index":781},"children":[],"decl_id":null,"docs":" Remove all value of the storage.\n","sig":null,"attributes":[{"value":"/ Remove all value of the storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113274,"byte_end":113310,"line_start":456,"line_end":456,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113433,"byte_end":113444,"line_start":462,"line_end":462,"column_start":5,"column_end":16},"name":"iter_values","qualname":"::storage::StoragePrefixedMap::iter_values","value":"fn () -> PrefixIterator<Value>","parent":{"krate":0,"index":781},"children":[],"decl_id":null,"docs":" Iter over all value of the storage.\n","sig":null,"attributes":[{"value":"/ Iter over all value of the storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113389,"byte_end":113428,"line_start":461,"line_end":461,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":114456,"byte_end":114472,"line_start":489,"line_end":489,"column_start":5,"column_end":21},"name":"translate_values","qualname":"::storage::StoragePrefixedMap::translate_values","value":"fn <OldValue, TV> (translate_val: TV) -> Result<(), u32>","parent":{"krate":0,"index":781},"children":[],"decl_id":null,"docs":" Translate the values from some previous `OldValue` to the current type.","sig":null,"attributes":[{"value":"/ Translate the values from some previous `OldValue` to the current type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113638,"byte_end":113713,"line_start":471,"line_end":471,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113715,"byte_end":113718,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ `TV` translates values.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113720,"byte_end":113747,"line_start":473,"line_end":473,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113749,"byte_end":113752,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ Returns `Err` if the map could not be interpreted as the old type, and Ok if it could.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113754,"byte_end":113844,"line_start":475,"line_end":475,"column_start":2,"column_end":92}},{"value":"/ The `Err` contains the number of value that couldn't be interpreted, those value are","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113846,"byte_end":113934,"line_start":476,"line_end":476,"column_start":2,"column_end":90}},{"value":"/ removed from the map.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113936,"byte_end":113961,"line_start":477,"line_end":477,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113963,"byte_end":113966,"line_start":478,"line_end":478,"column_start":2,"column_end":5}},{"value":"/ # Warning","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113968,"byte_end":113981,"line_start":479,"line_end":479,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113983,"byte_end":113986,"line_start":480,"line_end":480,"column_start":2,"column_end":5}},{"value":"/ This function must be used with care, before being updated the storage still contains the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":113988,"byte_end":114081,"line_start":481,"line_end":481,"column_start":2,"column_end":95}},{"value":"/ old type, thus other calls (such as `get`) will fail at decoding it.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":114083,"byte_end":114155,"line_start":482,"line_end":482,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":114157,"byte_end":114160,"line_start":483,"line_end":483,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":114162,"byte_end":114173,"line_start":484,"line_end":484,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":114175,"byte_end":114178,"line_start":485,"line_end":485,"column_start":2,"column_end":5}},{"value":"/ This would typically be called inside the module implementation of on_runtime_upgrade, while","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":114180,"byte_end":114276,"line_start":486,"line_end":486,"column_start":2,"column_end":98}},{"value":"/ ensuring **no usage of this storage are made before the call to `on_runtime_upgrade`**. (More","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":114278,"byte_end":114375,"line_start":487,"line_end":487,"column_start":2,"column_end":99}},{"value":"/ precisely prior initialized modules doesn't make use of this storage).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":114377,"byte_end":114451,"line_start":488,"line_end":488,"column_start":2,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":794},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115278,"byte_end":115291,"line_start":520,"line_end":520,"column_start":11,"column_end":24},"name":"StorageAppend","qualname":"::storage::StorageAppend","value":"StorageAppend<Item: Encode>: private::Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait that will be implemented for types that support the `storage::append` api.","sig":null,"attributes":[{"value":"/ Marker trait that will be implemented for types that support the `storage::append` api.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115146,"byte_end":115237,"line_start":517,"line_end":517,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115238,"byte_end":115241,"line_start":518,"line_end":518,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115242,"byte_end":115267,"line_start":519,"line_end":519,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":796},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115599,"byte_end":115618,"line_start":527,"line_end":527,"column_start":11,"column_end":30},"name":"StorageDecodeLength","qualname":"::storage::StorageDecodeLength","value":"StorageDecodeLength: private::Sealed + codec::DecodeLength","parent":null,"children":[{"krate":0,"index":797}],"decl_id":null,"docs":" Marker trait that will be implemented for types that support to decode their length in an\n effificent way. It is expected that the length is at the beginning of the encoded object\n and that the length is a `Compact<u32>`.","sig":null,"attributes":[{"value":"/ Marker trait that will be implemented for types that support to decode their length in an","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115327,"byte_end":115420,"line_start":522,"line_end":522,"column_start":1,"column_end":94}},{"value":"/ effificent way. It is expected that the length is at the beginning of the encoded object","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115421,"byte_end":115513,"line_start":523,"line_end":523,"column_start":1,"column_end":93}},{"value":"/ and that the length is a `Compact<u32>`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115514,"byte_end":115558,"line_start":524,"line_end":524,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115559,"byte_end":115562,"line_start":525,"line_end":525,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115563,"byte_end":115588,"line_start":526,"line_end":526,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115923,"byte_end":115933,"line_start":534,"line_end":534,"column_start":5,"column_end":15},"name":"decode_len","qualname":"::storage::StorageDecodeLength::decode_len","value":"fn (key: &[u8]) -> Option<usize>","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" Decode the length of the storage value at `key`.","sig":null,"attributes":[{"value":"/ Decode the length of the storage value at `key`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115661,"byte_end":115713,"line_start":528,"line_end":528,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115715,"byte_end":115718,"line_start":529,"line_end":529,"column_start":2,"column_end":5}},{"value":"/ This function assumes that the length is at the beginning of the encoded object","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115720,"byte_end":115803,"line_start":530,"line_end":530,"column_start":2,"column_end":85}},{"value":"/ and is a `Compact<u32>`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115805,"byte_end":115833,"line_start":531,"line_end":531,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115835,"byte_end":115838,"line_start":532,"line_end":532,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the storage value does not exist or the decoding failed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115840,"byte_end":115918,"line_start":533,"line_end":533,"column_start":2,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":801},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":116359,"byte_end":116365,"line_start":548,"line_end":548,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::storage::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":821},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176124,"byte_end":176132,"line_start":25,"line_end":25,"column_start":11,"column_end":19},"name":"Hashable","qualname":"::hash::Hashable","value":"Hashable: Sized","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":829},{"krate":0,"index":831},{"krate":0,"index":832}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176146,"byte_end":176156,"line_start":26,"line_end":26,"column_start":5,"column_end":15},"name":"blake2_128","qualname":"::hash::Hashable::blake2_128","value":"fn (&self) -> [u8; 16]","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176181,"byte_end":176191,"line_start":27,"line_end":27,"column_start":5,"column_end":15},"name":"blake2_256","qualname":"::hash::Hashable::blake2_256","value":"fn (&self) -> [u8; 32]","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176216,"byte_end":176233,"line_start":28,"line_end":28,"column_start":5,"column_end":22},"name":"blake2_128_concat","qualname":"::hash::Hashable::blake2_128_concat","value":"fn (&self) -> Vec<u8>","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176257,"byte_end":176265,"line_start":29,"line_end":29,"column_start":5,"column_end":13},"name":"twox_128","qualname":"::hash::Hashable::twox_128","value":"fn (&self) -> [u8; 16]","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176290,"byte_end":176298,"line_start":30,"line_end":30,"column_start":5,"column_end":13},"name":"twox_256","qualname":"::hash::Hashable::twox_256","value":"fn (&self) -> [u8; 32]","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176323,"byte_end":176337,"line_start":31,"line_end":31,"column_start":5,"column_end":19},"name":"twox_64_concat","qualname":"::hash::Hashable::twox_64_concat","value":"fn (&self) -> Vec<u8>","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176361,"byte_end":176369,"line_start":32,"line_end":32,"column_start":5,"column_end":13},"name":"identity","qualname":"::hash::Hashable::identity","value":"fn (&self) -> Vec<u8>","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":846},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176992,"byte_end":177005,"line_start":58,"line_end":58,"column_start":11,"column_end":24},"name":"StorageHasher","qualname":"::hash::StorageHasher","value":"StorageHasher: 'static","parent":null,"children":[{"krate":0,"index":847},{"krate":0,"index":848}],"decl_id":null,"docs":" Hasher to use to hash keys to insert to storage.\n","sig":null,"attributes":[{"value":"/ Hasher to use to hash keys to insert to storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176929,"byte_end":176981,"line_start":57,"line_end":57,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":847},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177023,"byte_end":177029,"line_start":59,"line_end":59,"column_start":7,"column_end":13},"name":"Output","qualname":"::hash::StorageHasher::Output","value":"type Output: AsRef<[u8]>;","parent":{"krate":0,"index":846},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177048,"byte_end":177052,"line_start":60,"line_end":60,"column_start":5,"column_end":9},"name":"hash","qualname":"::hash::StorageHasher::hash","value":"fn (x: &[u8]) -> Self::Output","parent":{"krate":0,"index":846},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":849},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177215,"byte_end":177238,"line_start":66,"line_end":66,"column_start":11,"column_end":34},"name":"ReversibleStorageHasher","qualname":"::hash::ReversibleStorageHasher","value":"ReversibleStorageHasher: StorageHasher","parent":null,"children":[{"krate":0,"index":850}],"decl_id":null,"docs":" Hasher to use to hash keys to insert to storage.","sig":null,"attributes":[{"value":"/ Hasher to use to hash keys to insert to storage.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177083,"byte_end":177135,"line_start":63,"line_end":63,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177136,"byte_end":177139,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ Reversible hasher store the encoded key after the hash part.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177140,"byte_end":177204,"line_start":65,"line_end":65,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177378,"byte_end":177385,"line_start":70,"line_end":70,"column_start":5,"column_end":12},"name":"reverse","qualname":"::hash::ReversibleStorageHasher::reverse","value":"fn (x: &[u8]) -> &[u8]","parent":{"krate":0,"index":849},"children":[],"decl_id":null,"docs":" Split the hash part out of the input.","sig":null,"attributes":[{"value":"/ Split the hash part out of the input.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177257,"byte_end":177298,"line_start":67,"line_end":67,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177300,"byte_end":177303,"line_start":68,"line_end":68,"column_start":2,"column_end":5}},{"value":"/ I.e. for input `&[hash ++ key ++ some]` returns `&[key ++ some]`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177305,"byte_end":177373,"line_start":69,"line_end":69,"column_start":2,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":851},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177448,"byte_end":177456,"line_start":74,"line_end":74,"column_start":12,"column_end":20},"name":"Identity","qualname":"::hash::Identity","value":"","parent":null,"children":[],"decl_id":null,"docs":" Store the key directly.\n","sig":null,"attributes":[{"value":"/ Store the key directly.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177409,"byte_end":177436,"line_start":73,"line_end":73,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":858},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177718,"byte_end":177730,"line_start":88,"line_end":88,"column_start":12,"column_end":24},"name":"Twox64Concat","qualname":"::hash::Twox64Concat","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with `concat(twox64(key), key)`\n","sig":null,"attributes":[{"value":"/ Hash storage keys with `concat(twox64(key), key)`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177653,"byte_end":177706,"line_start":87,"line_end":87,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":865},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178187,"byte_end":178203,"line_start":110,"line_end":110,"column_start":12,"column_end":28},"name":"Blake2_128Concat","qualname":"::hash::Blake2_128Concat","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with `concat(blake2_128(key), key)`\n","sig":null,"attributes":[{"value":"/ Hash storage keys with `concat(blake2_128(key), key)`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178118,"byte_end":178175,"line_start":109,"line_end":109,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":872},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178653,"byte_end":178663,"line_start":132,"line_end":132,"column_start":12,"column_end":22},"name":"Blake2_128","qualname":"::hash::Blake2_128","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with blake2 128\n","sig":null,"attributes":[{"value":"/ Hash storage keys with blake2 128","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178604,"byte_end":178641,"line_start":131,"line_end":131,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":879},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178830,"byte_end":178840,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"Blake2_256","qualname":"::hash::Blake2_256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with blake2 256\n","sig":null,"attributes":[{"value":"/ Hash storage keys with blake2 256","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178781,"byte_end":178818,"line_start":140,"line_end":140,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":886},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":179005,"byte_end":179012,"line_start":150,"line_end":150,"column_start":12,"column_end":19},"name":"Twox128","qualname":"::hash::Twox128","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with twox 128\n","sig":null,"attributes":[{"value":"/ Hash storage keys with twox 128","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178958,"byte_end":178993,"line_start":149,"line_end":149,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":893},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":179172,"byte_end":179179,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"name":"Twox256","qualname":"::hash::Twox256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Hash storage keys with twox 256\n","sig":null,"attributes":[{"value":"/ Hash storage keys with twox 256","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":179125,"byte_end":179160,"line_start":158,"line_end":158,"column_start":1,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":900},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/event.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"event","qualname":"::event","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/event.rs","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910}],"decl_id":null,"docs":" Macros that define an Event types. Events can be used to easily report changes or conditions\n in your runtime to external entities like users, chain explorers, or dApps.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1432,"byte_end":1444,"line_start":57,"line_end":57,"column_start":1,"column_end":13}},{"value":"! Macros that define an Event types. Events can be used to easily report changes or conditions","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/event.rs","byte_start":180219,"byte_end":180315,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"! in your runtime to external entities like users, chain explorers, or dApps.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/event.rs","byte_start":180316,"byte_end":180395,"line_start":15,"line_end":15,"column_start":1,"column_end":80}}]},{"kind":"Mod","id":{"krate":0,"index":913},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"metadata","qualname":"::metadata","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/metadata.rs","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1485,"byte_end":1497,"line_start":61,"line_end":61,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":935},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/inherent.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inherent","qualname":"::inherent","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/inherent.rs","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":945}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1516,"byte_end":1528,"line_start":63,"line_end":63,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":946},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/unsigned.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unsigned","qualname":"::unsigned","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/unsigned.rs","parent":null,"children":[{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":953}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1547,"byte_end":1559,"line_start":65,"line_end":65,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":954},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/error.rs","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":962}],"decl_id":null,"docs":" Macro for declaring a module error.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1578,"byte_end":1590,"line_start":67,"line_end":67,"column_start":1,"column_end":13}},{"value":"! Macro for declaring a module error.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/error.rs","byte_start":231672,"byte_end":231711,"line_start":18,"line_end":18,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":963},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"traits","qualname":"::traits","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":970},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1018},{"krate":0,"index":1021},{"krate":0,"index":1029},{"krate":0,"index":1053},{"krate":0,"index":1057},{"krate":0,"index":1061},{"krate":0,"index":1065},{"krate":0,"index":1069},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":1080},{"krate":0,"index":1085},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1550},{"krate":0,"index":1553},{"krate":0,"index":1556},{"krate":0,"index":1560},{"krate":0,"index":1565},{"krate":0,"index":1571},{"krate":0,"index":1578},{"krate":0,"index":1586},{"krate":0,"index":1595},{"krate":0,"index":1605},{"krate":0,"index":1616},{"krate":0,"index":1628},{"krate":0,"index":1641},{"krate":0,"index":1655},{"krate":0,"index":1670},{"krate":0,"index":1686},{"krate":0,"index":1703},{"krate":0,"index":1721},{"krate":0,"index":1740},{"krate":0,"index":1760},{"krate":0,"index":1781},{"krate":0,"index":1803},{"krate":0,"index":1826},{"krate":0,"index":1850},{"krate":0,"index":1875},{"krate":0,"index":1901},{"krate":0,"index":1928},{"krate":0,"index":1956},{"krate":0,"index":1985},{"krate":0,"index":2015},{"krate":0,"index":2046},{"krate":0,"index":2078},{"krate":0,"index":2111},{"krate":0,"index":2114},{"krate":0,"index":2117},{"krate":0,"index":2121},{"krate":0,"index":2126},{"krate":0,"index":2132},{"krate":0,"index":2139},{"krate":0,"index":2147},{"krate":0,"index":2156},{"krate":0,"index":2166},{"krate":0,"index":2177},{"krate":0,"index":2189},{"krate":0,"index":2202},{"krate":0,"index":2216},{"krate":0,"index":2231},{"krate":0,"index":2247},{"krate":0,"index":2264},{"krate":0,"index":2282},{"krate":0,"index":2301},{"krate":0,"index":2321},{"krate":0,"index":2342},{"krate":0,"index":2364},{"krate":0,"index":2387},{"krate":0,"index":2411},{"krate":0,"index":2436},{"krate":0,"index":2462},{"krate":0,"index":2489},{"krate":0,"index":2517},{"krate":0,"index":2546},{"krate":0,"index":2576},{"krate":0,"index":2607},{"krate":0,"index":2639},{"krate":0,"index":1094},{"krate":0,"index":1099},{"krate":0,"index":1104},{"krate":0,"index":1108},{"krate":0,"index":1114},{"krate":0,"index":1120},{"krate":0,"index":1128},{"krate":0,"index":2672},{"krate":0,"index":2685},{"krate":0,"index":2683},{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1150},{"krate":0,"index":1159},{"krate":0,"index":1166},{"krate":0,"index":1175},{"krate":0,"index":1183},{"krate":0,"index":1205},{"krate":0,"index":1210},{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1226},{"krate":0,"index":2686},{"krate":0,"index":2730},{"krate":0,"index":2728},{"krate":0,"index":2725},{"krate":0,"index":2726},{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2720},{"krate":0,"index":2718},{"krate":0,"index":2716},{"krate":0,"index":2713},{"krate":0,"index":2707},{"krate":0,"index":2702},{"krate":0,"index":2731},{"krate":0,"index":2770},{"krate":0,"index":2768},{"krate":0,"index":2765},{"krate":0,"index":2766},{"krate":0,"index":2761},{"krate":0,"index":2762},{"krate":0,"index":2759},{"krate":0,"index":2753},{"krate":0,"index":2751},{"krate":0,"index":2748},{"krate":0,"index":2738},{"krate":0,"index":2733},{"krate":0,"index":2771},{"krate":0,"index":2786},{"krate":0,"index":2788},{"krate":0,"index":2791},{"krate":0,"index":2794},{"krate":0,"index":2797},{"krate":0,"index":2800},{"krate":0,"index":2803},{"krate":0,"index":2806},{"krate":0,"index":2809},{"krate":0,"index":2812},{"krate":0,"index":2815},{"krate":0,"index":2818},{"krate":0,"index":2821},{"krate":0,"index":2824},{"krate":0,"index":2827},{"krate":0,"index":2830},{"krate":0,"index":2832},{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":2838},{"krate":0,"index":2840},{"krate":0,"index":2842},{"krate":0,"index":2845},{"krate":0,"index":1233},{"krate":0,"index":1236},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1247},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1263},{"krate":0,"index":1266},{"krate":0,"index":1269},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":2848},{"krate":0,"index":2862},{"krate":0,"index":2859},{"krate":0,"index":2860},{"krate":0,"index":2855},{"krate":0,"index":2856},{"krate":0,"index":2853},{"krate":0,"index":2851},{"krate":0,"index":1281},{"krate":0,"index":1284},{"krate":0,"index":2864},{"krate":0,"index":2867},{"krate":0,"index":2870},{"krate":0,"index":2874},{"krate":0,"index":2879},{"krate":0,"index":2885},{"krate":0,"index":2892},{"krate":0,"index":2900},{"krate":0,"index":2909},{"krate":0,"index":2919},{"krate":0,"index":2930},{"krate":0,"index":2942},{"krate":0,"index":2955},{"krate":0,"index":2969},{"krate":0,"index":2984},{"krate":0,"index":3000},{"krate":0,"index":3017},{"krate":0,"index":3035},{"krate":0,"index":3054},{"krate":0,"index":3074},{"krate":0,"index":3095},{"krate":0,"index":3117},{"krate":0,"index":3140},{"krate":0,"index":3164},{"krate":0,"index":3189},{"krate":0,"index":3215},{"krate":0,"index":3242},{"krate":0,"index":3270},{"krate":0,"index":3299},{"krate":0,"index":3329},{"krate":0,"index":3360},{"krate":0,"index":3392},{"krate":0,"index":1288},{"krate":0,"index":3425},{"krate":0,"index":3428},{"krate":0,"index":3432},{"krate":0,"index":3437},{"krate":0,"index":3443},{"krate":0,"index":3450},{"krate":0,"index":3458},{"krate":0,"index":3467},{"krate":0,"index":3477},{"krate":0,"index":3488},{"krate":0,"index":3500},{"krate":0,"index":3513},{"krate":0,"index":3527},{"krate":0,"index":3542},{"krate":0,"index":3558},{"krate":0,"index":3575},{"krate":0,"index":3593},{"krate":0,"index":3612},{"krate":0,"index":3632},{"krate":0,"index":3653},{"krate":0,"index":3675},{"krate":0,"index":3698},{"krate":0,"index":3722},{"krate":0,"index":3747},{"krate":0,"index":3773},{"krate":0,"index":3800},{"krate":0,"index":3828},{"krate":0,"index":3857},{"krate":0,"index":3887},{"krate":0,"index":3918},{"krate":0,"index":3950},{"krate":0,"index":1291},{"krate":0,"index":3983},{"krate":0,"index":3985},{"krate":0,"index":3988},{"krate":0,"index":3992},{"krate":0,"index":3997},{"krate":0,"index":4003},{"krate":0,"index":4010},{"krate":0,"index":4018},{"krate":0,"index":4027},{"krate":0,"index":4037},{"krate":0,"index":4048},{"krate":0,"index":4060},{"krate":0,"index":4073},{"krate":0,"index":4087},{"krate":0,"index":4102},{"krate":0,"index":4118},{"krate":0,"index":4135},{"krate":0,"index":4153},{"krate":0,"index":4172},{"krate":0,"index":4192},{"krate":0,"index":4213},{"krate":0,"index":4235},{"krate":0,"index":4258},{"krate":0,"index":4282},{"krate":0,"index":4307},{"krate":0,"index":4333},{"krate":0,"index":4360},{"krate":0,"index":4388},{"krate":0,"index":4417},{"krate":0,"index":4447},{"krate":0,"index":4478},{"krate":0,"index":4510},{"krate":0,"index":4513},{"krate":0,"index":4516},{"krate":0,"index":4520},{"krate":0,"index":4525},{"krate":0,"index":4531},{"krate":0,"index":4538},{"krate":0,"index":4546},{"krate":0,"index":4555},{"krate":0,"index":4565},{"krate":0,"index":4576},{"krate":0,"index":4588},{"krate":0,"index":4601},{"krate":0,"index":4615},{"krate":0,"index":4630},{"krate":0,"index":4646},{"krate":0,"index":4663},{"krate":0,"index":4681},{"krate":0,"index":4700},{"krate":0,"index":4720},{"krate":0,"index":4741},{"krate":0,"index":4763},{"krate":0,"index":4786},{"krate":0,"index":4810},{"krate":0,"index":4835},{"krate":0,"index":4861},{"krate":0,"index":4888},{"krate":0,"index":4916},{"krate":0,"index":4945},{"krate":0,"index":4975},{"krate":0,"index":5006},{"krate":0,"index":5038},{"krate":0,"index":1293},{"krate":0,"index":1313}],"decl_id":null,"docs":" Traits for FRAME.","sig":null,"attributes":[{"value":"! Traits for FRAME.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":237132,"byte_end":237153,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":237154,"byte_end":237157,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! NOTE: If you're looking for `parameter_types`, it has moved in to the top-level module.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":237158,"byte_end":237249,"line_start":20,"line_end":20,"column_start":1,"column_end":92}}]},{"kind":"Trait","id":{"krate":0,"index":994},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":237844,"byte_end":237850,"line_start":37,"line_end":37,"column_start":11,"column_end":17},"name":"Filter","qualname":"::traits::Filter","value":"Filter<T>","parent":null,"children":[{"krate":0,"index":996}],"decl_id":null,"docs":" Simple trait for providing a filter over a reference to some type.\n","sig":null,"attributes":[{"value":"/ Simple trait for providing a filter over a reference to some type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":237763,"byte_end":237833,"line_start":36,"line_end":36,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":237954,"byte_end":237960,"line_start":39,"line_end":39,"column_start":5,"column_end":11},"name":"filter","qualname":"::traits::Filter::filter","value":"fn (_: &T) -> bool","parent":{"krate":0,"index":994},"children":[],"decl_id":null,"docs":" Determine if a given value should be allowed through the filter (returns `true`) or not.\n","sig":null,"attributes":[{"value":"/ Determine if a given value should be allowed through the filter (returns `true`) or not.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":237857,"byte_end":237949,"line_start":38,"line_end":38,"column_start":2,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":1000},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238161,"byte_end":238170,"line_start":48,"line_end":48,"column_start":11,"column_end":20},"name":"StoredMap","qualname":"::traits::StoredMap","value":"StoredMap<K, T>","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1011},{"krate":0,"index":1015},{"krate":0,"index":1017}],"decl_id":null,"docs":" An abstraction of a value stored within storage, but possibly as part of a larger composite\n item.\n","sig":null,"attributes":[{"value":"/ An abstraction of a value stored within storage, but possibly as part of a larger composite","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238045,"byte_end":238140,"line_start":46,"line_end":46,"column_start":1,"column_end":96}},{"value":"/ item.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238141,"byte_end":238150,"line_start":47,"line_end":47,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238287,"byte_end":238290,"line_start":51,"line_end":51,"column_start":5,"column_end":8},"name":"get","qualname":"::traits::StoredMap::get","value":"fn (k: &K) -> T","parent":{"krate":0,"index":1000},"children":[],"decl_id":null,"docs":" Get the item, or its default if it doesn't yet exist; we make no distinction between the\n two.\n","sig":null,"attributes":[{"value":"/ Get the item, or its default if it doesn't yet exist; we make no distinction between the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238180,"byte_end":238272,"line_start":49,"line_end":49,"column_start":2,"column_end":94}},{"value":"/ two.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238274,"byte_end":238282,"line_start":50,"line_end":50,"column_start":2,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238846,"byte_end":238857,"line_start":60,"line_end":60,"column_start":5,"column_end":16},"name":"is_explicit","qualname":"::traits::StoredMap::is_explicit","value":"fn (k: &K) -> bool","parent":{"krate":0,"index":1000},"children":[],"decl_id":null,"docs":" Get whether the item takes up any storage. If this is `false`, then `get` will certainly\n return the `T::default()`. If `true`, then there is no implication for `get` (i.e. it\n may return any value, including the default).","sig":null,"attributes":[{"value":"/ Get whether the item takes up any storage. If this is `false`, then `get` will certainly","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238305,"byte_end":238397,"line_start":52,"line_end":52,"column_start":2,"column_end":94}},{"value":"/ return the `T::default()`. If `true`, then there is no implication for `get` (i.e. it","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238399,"byte_end":238488,"line_start":53,"line_end":53,"column_start":2,"column_end":91}},{"value":"/ may return any value, including the default).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238490,"byte_end":238539,"line_start":54,"line_end":54,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238541,"byte_end":238544,"line_start":55,"line_end":55,"column_start":2,"column_end":5}},{"value":"/ NOTE: This may still be `true`, even after `remove` is called. This is the case where","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238546,"byte_end":238635,"line_start":56,"line_end":56,"column_start":2,"column_end":91}},{"value":"/ a single storage entry is shared between multiple `StoredMap` items single, without","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238637,"byte_end":238724,"line_start":57,"line_end":57,"column_start":2,"column_end":89}},{"value":"/ additional logic to enforce it, deletion of any one them doesn't automatically imply","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238726,"byte_end":238814,"line_start":58,"line_end":58,"column_start":2,"column_end":90}},{"value":"/ deletion of them all.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238816,"byte_end":238841,"line_start":59,"line_end":59,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238900,"byte_end":238906,"line_start":62,"line_end":62,"column_start":5,"column_end":11},"name":"mutate","qualname":"::traits::StoredMap::mutate","value":"fn <R> (k: &K, f: impl FnOnce(&mut T) -> R) -> R","parent":{"krate":0,"index":1000},"children":[],"decl_id":null,"docs":" Mutate the item.\n","sig":null,"attributes":[{"value":"/ Mutate the item.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238875,"byte_end":238895,"line_start":61,"line_end":61,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239051,"byte_end":239064,"line_start":64,"line_end":64,"column_start":5,"column_end":18},"name":"mutate_exists","qualname":"::traits::StoredMap::mutate_exists","value":"fn <R> (k: &K, f: impl FnOnce(&mut Option<T>) -> R) -> R","parent":{"krate":0,"index":1000},"children":[],"decl_id":null,"docs":" Mutate the item, removing or resetting to default value if it has been mutated to `None`.\n","sig":null,"attributes":[{"value":"/ Mutate the item, removing or resetting to default value if it has been mutated to `None`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":238953,"byte_end":239046,"line_start":63,"line_end":63,"column_start":2,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239307,"byte_end":239324,"line_start":67,"line_end":67,"column_start":5,"column_end":22},"name":"try_mutate_exists","qualname":"::traits::StoredMap::try_mutate_exists","value":"fn <R, E> (k: &K, f: impl FnOnce(&mut Option<T>) -> Result<R, E>) -> Result<R, E>","parent":{"krate":0,"index":1000},"children":[],"decl_id":null,"docs":" Maybe mutate the item only if an `Ok` value is returned from `f`. Do nothing if an `Err` is\n returned. It is removed or reset to default value if it has been mutated to `None`\n","sig":null,"attributes":[{"value":"/ Maybe mutate the item only if an `Ok` value is returned from `f`. Do nothing if an `Err` is","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239119,"byte_end":239214,"line_start":65,"line_end":65,"column_start":2,"column_end":97}},{"value":"/ returned. It is removed or reset to default value if it has been mutated to `None`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239216,"byte_end":239302,"line_start":66,"line_end":66,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239443,"byte_end":239449,"line_start":69,"line_end":69,"column_start":5,"column_end":11},"name":"insert","qualname":"::traits::StoredMap::insert","value":"fn (k: &K, t: T) -> ()","parent":{"krate":0,"index":1000},"children":[],"decl_id":null,"docs":" Set the item to something new.\n","sig":null,"attributes":[{"value":"/ Set the item to something new.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239404,"byte_end":239438,"line_start":68,"line_end":68,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239590,"byte_end":239596,"line_start":71,"line_end":71,"column_start":5,"column_end":11},"name":"remove","qualname":"::traits::StoredMap::remove","value":"fn (k: &K) -> ()","parent":{"krate":0,"index":1000},"children":[],"decl_id":null,"docs":" Remove the item or otherwise replace it with its default value; we don't care which.\n","sig":null,"attributes":[{"value":"/ Remove the item or otherwise replace it with its default value; we don't care which.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239497,"byte_end":239585,"line_start":70,"line_end":70,"column_start":2,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":1018},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239678,"byte_end":239686,"line_start":75,"line_end":75,"column_start":11,"column_end":19},"name":"Happened","qualname":"::traits::Happened","value":"Happened<T>","parent":null,"children":[{"krate":0,"index":1020}],"decl_id":null,"docs":" A simple, generic one-parameter event notifier/handler.\n","sig":null,"attributes":[{"value":"/ A simple, generic one-parameter event notifier/handler.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239608,"byte_end":239667,"line_start":74,"line_end":74,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239721,"byte_end":239729,"line_start":77,"line_end":77,"column_start":5,"column_end":13},"name":"happened","qualname":"::traits::Happened::happened","value":"fn (t: &T) -> ()","parent":{"krate":0,"index":1018},"children":[],"decl_id":null,"docs":" The thing happened.\n","sig":null,"attributes":[{"value":"/ The thing happened.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239693,"byte_end":239716,"line_start":76,"line_end":76,"column_start":2,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1021},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":240644,"byte_end":240658,"line_start":91,"line_end":91,"column_start":12,"column_end":26},"name":"StorageMapShim","qualname":"::traits::StorageMapShim","value":"","parent":null,"children":[],"decl_id":null,"docs":" A shim for placing around a storage item in order to use it as a `StoredValue`. Ideally this\n wouldn't be needed as `StorageValue`s should blanket implement `StoredValue`s, however this\n would break the ability to have custom impls of `StoredValue`. The other workaround is to\n implement it directly in the macro.","sig":null,"attributes":[{"value":"/ A shim for placing around a storage item in order to use it as a `StoredValue`. Ideally this","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239741,"byte_end":239837,"line_start":80,"line_end":80,"column_start":1,"column_end":97}},{"value":"/ wouldn't be needed as `StorageValue`s should blanket implement `StoredValue`s, however this","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239838,"byte_end":239933,"line_start":81,"line_end":81,"column_start":1,"column_end":96}},{"value":"/ would break the ability to have custom impls of `StoredValue`. The other workaround is to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":239934,"byte_end":240027,"line_start":82,"line_end":82,"column_start":1,"column_end":94}},{"value":"/ implement it directly in the macro.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":240028,"byte_end":240067,"line_start":83,"line_end":83,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":240068,"byte_end":240071,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ This form has the advantage that two additional types are provides, `Created` and `Removed`,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":240072,"byte_end":240168,"line_start":85,"line_end":85,"column_start":1,"column_end":97}},{"value":"/ which are both generic events that can be tied to handlers to do something in the case of being","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":240169,"byte_end":240268,"line_start":86,"line_end":86,"column_start":1,"column_end":100}},{"value":"/ about to create an account where one didn't previously exist (at all; not just where it used to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":240269,"byte_end":240368,"line_start":87,"line_end":87,"column_start":1,"column_end":100}},{"value":"/ be the default value), or where the account is being removed or reset back to the default value","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":240369,"byte_end":240468,"line_start":88,"line_end":88,"column_start":1,"column_end":100}},{"value":"/ where previously it did exist (though may have been in a default state). This works well with","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":240469,"byte_end":240566,"line_start":89,"line_end":89,"column_start":1,"column_end":98}},{"value":"/ system module's `CallOnCreatedAccount` and `CallKillAccount`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":240567,"byte_end":240632,"line_start":90,"line_end":90,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1053},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":242410,"byte_end":242437,"line_start":157,"line_end":157,"column_start":11,"column_end":38},"name":"EstimateNextSessionRotation","qualname":"::traits::EstimateNextSessionRotation","value":"EstimateNextSessionRotation<BlockNumber>","parent":null,"children":[{"krate":0,"index":1055},{"krate":0,"index":1056}],"decl_id":null,"docs":" Something that can estimate at which block the next session rotation will happen. This should\n be the same logical unit that dictates `ShouldEndSession` to the session module. No Assumptions\n are made about the scheduling of the sessions.\n","sig":null,"attributes":[{"value":"/ Something that can estimate at which block the next session rotation will happen. This should","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":242151,"byte_end":242248,"line_start":154,"line_end":154,"column_start":1,"column_end":98}},{"value":"/ be the same logical unit that dictates `ShouldEndSession` to the session module. No Assumptions","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":242249,"byte_end":242348,"line_start":155,"line_end":155,"column_start":1,"column_end":100}},{"value":"/ are made about the scheduling of the sessions.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":242349,"byte_end":242399,"line_start":156,"line_end":156,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":242624,"byte_end":242654,"line_start":161,"line_end":161,"column_start":5,"column_end":35},"name":"estimate_next_session_rotation","qualname":"::traits::EstimateNextSessionRotation::estimate_next_session_rotation","value":"fn (now: BlockNumber) -> Option<BlockNumber>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" Return the block number at which the next session rotation is estimated to happen.","sig":null,"attributes":[{"value":"/ Return the block number at which the next session rotation is estimated to happen.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":242454,"byte_end":242540,"line_start":158,"line_end":158,"column_start":2,"column_end":88}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":242542,"byte_end":242545,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ None should be returned if the estimation fails to come to an answer","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":242547,"byte_end":242619,"line_start":160,"line_end":160,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":242769,"byte_end":242775,"line_start":164,"line_end":164,"column_start":5,"column_end":11},"name":"weight","qualname":"::traits::EstimateNextSessionRotation::weight","value":"fn (now: BlockNumber) -> Weight","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":" Return the weight of calling `estimate_next_session_rotation`\n","sig":null,"attributes":[{"value":"/ Return the weight of calling `estimate_next_session_rotation`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":242699,"byte_end":242764,"line_start":163,"line_end":163,"column_start":2,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":1061},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243193,"byte_end":243215,"line_start":179,"line_end":179,"column_start":11,"column_end":33},"name":"EstimateNextNewSession","qualname":"::traits::EstimateNextNewSession","value":"EstimateNextNewSession<BlockNumber>","parent":null,"children":[{"krate":0,"index":1063},{"krate":0,"index":1064}],"decl_id":null,"docs":" Something that can estimate at which block the next `new_session` will be triggered. This must\n always be implemented by the session module.\n","sig":null,"attributes":[{"value":"/ Something that can estimate at which block the next `new_session` will be triggered. This must","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243035,"byte_end":243133,"line_start":177,"line_end":177,"column_start":1,"column_end":99}},{"value":"/ always be implemented by the session module.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243134,"byte_end":243182,"line_start":178,"line_end":178,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243318,"byte_end":243343,"line_start":181,"line_end":181,"column_start":5,"column_end":30},"name":"estimate_next_new_session","qualname":"::traits::EstimateNextNewSession::estimate_next_new_session","value":"fn (now: BlockNumber) -> Option<BlockNumber>","parent":{"krate":0,"index":1061},"children":[],"decl_id":null,"docs":" Return the block number at which the next new session is estimated to happen.\n","sig":null,"attributes":[{"value":"/ Return the block number at which the next new session is estimated to happen.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243232,"byte_end":243313,"line_start":180,"line_end":180,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243453,"byte_end":243459,"line_start":184,"line_end":184,"column_start":5,"column_end":11},"name":"weight","qualname":"::traits::EstimateNextNewSession::weight","value":"fn (now: BlockNumber) -> Weight","parent":{"krate":0,"index":1061},"children":[],"decl_id":null,"docs":" Return the weight of calling `estimate_next_new_session`\n","sig":null,"attributes":[{"value":"/ Return the weight of calling `estimate_next_new_session`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243388,"byte_end":243448,"line_start":183,"line_end":183,"column_start":2,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":1069},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243766,"byte_end":243769,"line_start":198,"line_end":198,"column_start":11,"column_end":14},"name":"Len","qualname":"::traits::Len","value":"Len","parent":null,"children":[{"krate":0,"index":1070}],"decl_id":null,"docs":" Anything that can have a `::len()` method.\n","sig":null,"attributes":[{"value":"/ Anything that can have a `::len()` method.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243709,"byte_end":243755,"line_start":197,"line_end":197,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243813,"byte_end":243816,"line_start":200,"line_end":200,"column_start":5,"column_end":8},"name":"len","qualname":"::traits::Len::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":" Return the length of data type.\n","sig":null,"attributes":[{"value":"/ Return the length of data type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243773,"byte_end":243808,"line_start":199,"line_end":199,"column_start":2,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":1074},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244069,"byte_end":244072,"line_start":210,"line_end":210,"column_start":11,"column_end":14},"name":"Get","qualname":"::traits::Get","value":"Get<T>","parent":null,"children":[{"krate":0,"index":1076}],"decl_id":null,"docs":" A trait for querying a single fixed value from a type.\n","sig":null,"attributes":[{"value":"/ A trait for querying a single fixed value from a type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244000,"byte_end":244058,"line_start":209,"line_end":209,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244112,"byte_end":244115,"line_start":212,"line_end":212,"column_start":5,"column_end":8},"name":"get","qualname":"::traits::Get::get","value":"fn () -> T","parent":{"krate":0,"index":1074},"children":[],"decl_id":null,"docs":" Return a constant value.\n","sig":null,"attributes":[{"value":"/ Return a constant value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244079,"byte_end":244107,"line_start":211,"line_end":211,"column_start":2,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":1080},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244279,"byte_end":244287,"line_start":220,"line_end":220,"column_start":11,"column_end":19},"name":"Contains","qualname":"::traits::Contains","value":"Contains<T: Ord>","parent":null,"children":[{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084}],"decl_id":null,"docs":" A trait for querying whether a type can be said to \"contain\" a value.\n","sig":null,"attributes":[{"value":"/ A trait for querying whether a type can be said to \"contain\" a value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244195,"byte_end":244268,"line_start":219,"line_end":219,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244361,"byte_end":244369,"line_start":222,"line_end":222,"column_start":5,"column_end":13},"name":"contains","qualname":"::traits::Contains::contains","value":"fn (t: &T) -> bool","parent":{"krate":0,"index":1080},"children":[],"decl_id":null,"docs":" Return `true` if this \"contains\" the given value `t`.\n","sig":null,"attributes":[{"value":"/ Return `true` if this \"contains\" the given value `t`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244299,"byte_end":244356,"line_start":221,"line_end":221,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244496,"byte_end":244510,"line_start":225,"line_end":225,"column_start":5,"column_end":19},"name":"sorted_members","qualname":"::traits::Contains::sorted_members","value":"fn () -> Vec<T>","parent":{"krate":0,"index":1080},"children":[],"decl_id":null,"docs":" Get a vector of all members in the set, ordered.\n","sig":null,"attributes":[{"value":"/ Get a vector of all members in the set, ordered.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244439,"byte_end":244491,"line_start":224,"line_end":224,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244570,"byte_end":244575,"line_start":228,"line_end":228,"column_start":5,"column_end":10},"name":"count","qualname":"::traits::Contains::count","value":"fn () -> usize","parent":{"krate":0,"index":1080},"children":[],"decl_id":null,"docs":" Get the number of items in the set.\n","sig":null,"attributes":[{"value":"/ Get the number of items in the set.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244526,"byte_end":244565,"line_start":227,"line_end":227,"column_start":2,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":1085},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244975,"byte_end":244994,"line_start":239,"line_end":239,"column_start":11,"column_end":30},"name":"ContainsLengthBound","qualname":"::traits::ContainsLengthBound","value":"ContainsLengthBound","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1087}],"decl_id":null,"docs":" A trait for querying bound for the length of an implementation of `Contains`\n","sig":null,"attributes":[{"value":"/ A trait for querying bound for the length of an implementation of `Contains`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244884,"byte_end":244964,"line_start":238,"line_end":238,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245043,"byte_end":245050,"line_start":241,"line_end":241,"column_start":5,"column_end":12},"name":"min_len","qualname":"::traits::ContainsLengthBound::min_len","value":"fn () -> usize","parent":{"krate":0,"index":1085},"children":[],"decl_id":null,"docs":" Minimum number of elements contained\n","sig":null,"attributes":[{"value":"/ Minimum number of elements contained","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":244998,"byte_end":245038,"line_start":240,"line_end":240,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1087},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245109,"byte_end":245116,"line_start":243,"line_end":243,"column_start":5,"column_end":12},"name":"max_len","qualname":"::traits::ContainsLengthBound::max_len","value":"fn () -> usize","parent":{"krate":0,"index":1085},"children":[],"decl_id":null,"docs":" Maximum number of elements contained\n","sig":null,"attributes":[{"value":"/ Maximum number of elements contained","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245064,"byte_end":245104,"line_start":242,"line_end":242,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":1088},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245199,"byte_end":245212,"line_start":247,"line_end":247,"column_start":11,"column_end":24},"name":"IsDeadAccount","qualname":"::traits::IsDeadAccount","value":"IsDeadAccount<AccountId>","parent":null,"children":[{"krate":0,"index":1090}],"decl_id":null,"docs":" Determiner to say whether a given account is unused.\n","sig":null,"attributes":[{"value":"/ Determiner to say whether a given account is unused.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245132,"byte_end":245188,"line_start":246,"line_end":246,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245262,"byte_end":245277,"line_start":249,"line_end":249,"column_start":5,"column_end":20},"name":"is_dead_account","qualname":"::traits::IsDeadAccount::is_dead_account","value":"fn (who: &AccountId) -> bool","parent":{"krate":0,"index":1088},"children":[],"decl_id":null,"docs":" Is the given account dead?\n","sig":null,"attributes":[{"value":"/ Is the given account dead?","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245227,"byte_end":245257,"line_start":248,"line_end":248,"column_start":2,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":1550},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245504,"byte_end":245516,"line_start":260,"line_end":260,"column_start":11,"column_end":23},"name":"OnNewAccount","qualname":"::traits::OnNewAccount","value":"OnNewAccount<AccountId>","parent":null,"children":[{"krate":0,"index":1552}],"decl_id":null,"docs":" Handler for when a new account has been created.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245580,"byte_end":245594,"line_start":262,"line_end":262,"column_start":5,"column_end":19},"name":"on_new_account","qualname":"::traits::OnNewAccount::on_new_account","value":"fn (who: &AccountId) -> ()","parent":{"krate":0,"index":1550},"children":[],"decl_id":null,"docs":" A new account `who` has been registered.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2111},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245695,"byte_end":245710,"line_start":267,"line_end":267,"column_start":11,"column_end":26},"name":"OnKilledAccount","qualname":"::traits::OnKilledAccount","value":"OnKilledAccount<AccountId>","parent":null,"children":[{"krate":0,"index":2113}],"decl_id":null,"docs":" The account with the given id was reaped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245775,"byte_end":245792,"line_start":269,"line_end":269,"column_start":5,"column_end":22},"name":"on_killed_account","qualname":"::traits::OnKilledAccount::on_killed_account","value":"fn (who: &AccountId) -> ()","parent":{"krate":0,"index":2111},"children":[],"decl_id":null,"docs":" The account with the given id was reaped.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1094},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245936,"byte_end":245946,"line_start":274,"line_end":274,"column_start":11,"column_end":21},"name":"FindAuthor","qualname":"::traits::FindAuthor","value":"FindAuthor<Author>","parent":null,"children":[{"krate":0,"index":1096}],"decl_id":null,"docs":" A trait for finding the author of a block header based on the `PreRuntime` digests contained\n within it.\n","sig":null,"attributes":[{"value":"/ A trait for finding the author of a block header based on the `PreRuntime` digests contained","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245814,"byte_end":245910,"line_start":272,"line_end":272,"column_start":1,"column_end":97}},{"value":"/ within it.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245911,"byte_end":245925,"line_start":273,"line_end":273,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246027,"byte_end":246038,"line_start":276,"line_end":276,"column_start":5,"column_end":16},"name":"find_author","qualname":"::traits::FindAuthor::find_author","value":"fn <'a, I> (digests: I) -> Option<Author>","parent":{"krate":0,"index":1094},"children":[],"decl_id":null,"docs":" Find the author of a block based on the pre-runtime digests.\n","sig":null,"attributes":[{"value":"/ Find the author of a block based on the pre-runtime digests.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":245958,"byte_end":246022,"line_start":275,"line_end":275,"column_start":2,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1104},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246382,"byte_end":246392,"line_start":289,"line_end":289,"column_start":11,"column_end":21},"name":"VerifySeal","qualname":"::traits::VerifySeal","value":"VerifySeal<Header, Author>","parent":null,"children":[{"krate":0,"index":1107}],"decl_id":null,"docs":" A trait for verifying the seal of a header and returning the author.\n","sig":null,"attributes":[{"value":"/ A trait for verifying the seal of a header and returning the author.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246299,"byte_end":246371,"line_start":288,"line_end":288,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246467,"byte_end":246478,"line_start":291,"line_end":291,"column_start":5,"column_end":16},"name":"verify_seal","qualname":"::traits::VerifySeal::verify_seal","value":"fn (header: &Header) -> Result<Option<Author>, &'static str>","parent":{"krate":0,"index":1104},"children":[],"decl_id":null,"docs":" Verify a header and return the author, if any.\n","sig":null,"attributes":[{"value":"/ Verify a header and return the author, if any.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246412,"byte_end":246462,"line_start":290,"line_end":290,"column_start":2,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1108},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246688,"byte_end":246707,"line_start":297,"line_end":297,"column_start":11,"column_end":30},"name":"KeyOwnerProofSystem","qualname":"::traits::KeyOwnerProofSystem","value":"KeyOwnerProofSystem<Key>","parent":null,"children":[{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113}],"decl_id":null,"docs":" Something which can compute and check proofs of\n a historical key owner and return full identification data of that\n key owner.\n","sig":null,"attributes":[{"value":"/ Something which can compute and check proofs of","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246540,"byte_end":246591,"line_start":294,"line_end":294,"column_start":1,"column_end":52}},{"value":"/ a historical key owner and return full identification data of that","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246592,"byte_end":246662,"line_start":295,"line_end":295,"column_start":1,"column_end":71}},{"value":"/ key owner.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246663,"byte_end":246677,"line_start":296,"line_end":296,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":1110},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246758,"byte_end":246763,"line_start":299,"line_end":299,"column_start":7,"column_end":12},"name":"Proof","qualname":"::traits::KeyOwnerProofSystem::Proof","value":"type Proof: Codec;","parent":{"krate":0,"index":1108},"children":[],"decl_id":null,"docs":" The proof of membership itself.\n","sig":null,"attributes":[{"value":"/ The proof of membership itself.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246716,"byte_end":246751,"line_start":298,"line_end":298,"column_start":2,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":1111},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246845,"byte_end":246864,"line_start":301,"line_end":301,"column_start":7,"column_end":26},"name":"IdentificationTuple","qualname":"::traits::KeyOwnerProofSystem::IdentificationTuple","value":"type IdentificationTuple: Codec;","parent":{"krate":0,"index":1108},"children":[],"decl_id":null,"docs":" The full identification of a key owner and the stash account.\n","sig":null,"attributes":[{"value":"/ The full identification of a key owner and the stash account.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246773,"byte_end":246838,"line_start":300,"line_end":300,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247156,"byte_end":247161,"line_start":310,"line_end":310,"column_start":5,"column_end":10},"name":"prove","qualname":"::traits::KeyOwnerProofSystem::prove","value":"fn (key: Key) -> Option<Self::Proof>","parent":{"krate":0,"index":1108},"children":[],"decl_id":null,"docs":" Prove membership of a key owner in the current block-state.","sig":null,"attributes":[{"value":"/ Prove membership of a key owner in the current block-state.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246875,"byte_end":246938,"line_start":303,"line_end":303,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246940,"byte_end":246943,"line_start":304,"line_end":304,"column_start":2,"column_end":5}},{"value":"/ This should typically only be called off-chain, since it may be","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":246945,"byte_end":247012,"line_start":305,"line_end":305,"column_start":2,"column_end":69}},{"value":"/ computationally heavy.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247014,"byte_end":247040,"line_start":306,"line_end":306,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247042,"byte_end":247045,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ Returns `Some` iff the key owner referred to by the given `key` is a","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247047,"byte_end":247119,"line_start":308,"line_end":308,"column_start":2,"column_end":74}},{"value":"/ member of the current set.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247121,"byte_end":247151,"line_start":309,"line_end":309,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247314,"byte_end":247325,"line_start":314,"line_end":314,"column_start":5,"column_end":16},"name":"check_proof","qualname":"::traits::KeyOwnerProofSystem::check_proof","value":"fn (key: Key, proof: Self::Proof) -> Option<Self::IdentificationTuple>","parent":{"krate":0,"index":1108},"children":[],"decl_id":null,"docs":" Check a proof of membership on-chain. Return `Some` iff the proof is\n valid and recent enough to check.\n","sig":null,"attributes":[{"value":"/ Check a proof of membership on-chain. Return `Some` iff the proof is","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247198,"byte_end":247270,"line_start":312,"line_end":312,"column_start":2,"column_end":74}},{"value":"/ valid and recent enough to check.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247272,"byte_end":247309,"line_start":313,"line_end":313,"column_start":2,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":1120},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248214,"byte_end":248226,"line_start":342,"line_end":342,"column_start":11,"column_end":23},"name":"OnUnbalanced","qualname":"::traits::OnUnbalanced","value":"OnUnbalanced<Imbalance: TryDrop>","parent":null,"children":[{"krate":0,"index":1122},{"krate":0,"index":1126},{"krate":0,"index":1127}],"decl_id":null,"docs":" Handler for when some currency \"account\" decreased in balance for\n some reason.","sig":null,"attributes":[{"value":"/ Handler for when some currency \"account\" decreased in balance for","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247841,"byte_end":247910,"line_start":332,"line_end":332,"column_start":1,"column_end":70}},{"value":"/ some reason.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247911,"byte_end":247927,"line_start":333,"line_end":333,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247928,"byte_end":247931,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/ The only reason at present for an increase would be for validator rewards, but","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":247932,"byte_end":248014,"line_start":335,"line_end":335,"column_start":1,"column_end":83}},{"value":"/ there may be other reasons in the future or for other chains.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248015,"byte_end":248080,"line_start":336,"line_end":336,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248081,"byte_end":248084,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ Reasons for decreases include:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248085,"byte_end":248119,"line_start":338,"line_end":338,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248120,"byte_end":248123,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ - Someone got slashed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248124,"byte_end":248150,"line_start":340,"line_end":340,"column_start":1,"column_end":27}},{"value":"/ - Someone paid for a transaction to be included.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248151,"byte_end":248203,"line_start":341,"line_end":341,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248464,"byte_end":248478,"line_start":346,"line_end":346,"column_start":5,"column_end":19},"name":"on_unbalanceds","qualname":"::traits::OnUnbalanced::on_unbalanceds","value":"fn <B> (amounts: impl Iterator<Item = Imbalance>) -> ()","parent":{"krate":0,"index":1120},"children":[],"decl_id":null,"docs":" Handler for some imbalances. The different imbalances might have different origins or\n meanings, dependent on the context. Will default to simply calling on_unbalanced for all\n of them. Infallible.\n","sig":null,"attributes":[{"value":"/ Handler for some imbalances. The different imbalances might have different origins or","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248250,"byte_end":248339,"line_start":343,"line_end":343,"column_start":2,"column_end":91}},{"value":"/ meanings, dependent on the context. Will default to simply calling on_unbalanced for all","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248341,"byte_end":248433,"line_start":344,"line_end":344,"column_start":2,"column_end":94}},{"value":"/ of them. Infallible.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248435,"byte_end":248459,"line_start":345,"line_end":345,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248696,"byte_end":248709,"line_start":351,"line_end":351,"column_start":5,"column_end":18},"name":"on_unbalanced","qualname":"::traits::OnUnbalanced::on_unbalanced","value":"fn (amount: Imbalance) -> ()","parent":{"krate":0,"index":1120},"children":[],"decl_id":null,"docs":" Handler for some imbalance. Infallible.\n","sig":null,"attributes":[{"value":"/ Handler for some imbalance. Infallible.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248648,"byte_end":248691,"line_start":350,"line_end":350,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248916,"byte_end":248937,"line_start":357,"line_end":357,"column_start":5,"column_end":26},"name":"on_nonzero_unbalanced","qualname":"::traits::OnUnbalanced::on_nonzero_unbalanced","value":"fn (amount: Imbalance) -> ()","parent":{"krate":0,"index":1120},"children":[],"decl_id":null,"docs":" Actually handle a non-zero imbalance. You probably want to implement this rather than\n `on_unbalanced`.\n","sig":null,"attributes":[{"value":"/ Actually handle a non-zero imbalance. You probably want to implement this rather than","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248800,"byte_end":248889,"line_start":355,"line_end":355,"column_start":2,"column_end":91}},{"value":"/ `on_unbalanced`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":248891,"byte_end":248911,"line_start":356,"line_end":356,"column_start":2,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2673},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249427,"byte_end":249436,"line_start":369,"line_end":369,"column_start":2,"column_end":11},"name":"KeepAlive","qualname":"::traits::ExistenceRequirement::KeepAlive","value":"ExistenceRequirement::KeepAlive","parent":{"krate":0,"index":2672},"children":[],"decl_id":null,"docs":" Operation must not result in the account going out of existence.","sig":null,"attributes":[{"value":"/ Operation must not result in the account going out of existence.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249182,"byte_end":249250,"line_start":365,"line_end":365,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249252,"byte_end":249255,"line_start":366,"line_end":366,"column_start":2,"column_end":5}},{"value":"/ Note this implies that if the account never existed in the first place, then the operation","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249257,"byte_end":249351,"line_start":367,"line_end":367,"column_start":2,"column_end":96}},{"value":"/ may legitimately leave the account unchanged and still non-existent.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249353,"byte_end":249425,"line_start":368,"line_end":368,"column_start":2,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2675},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249500,"byte_end":249510,"line_start":371,"line_end":371,"column_start":2,"column_end":12},"name":"AllowDeath","qualname":"::traits::ExistenceRequirement::AllowDeath","value":"ExistenceRequirement::AllowDeath","parent":{"krate":0,"index":2672},"children":[],"decl_id":null,"docs":" Operation may result in account going out of existence.\n","sig":null,"attributes":[{"value":"/ Operation may result in account going out of existence.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249439,"byte_end":249498,"line_start":370,"line_end":370,"column_start":2,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":2672},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249158,"byte_end":249178,"line_start":364,"line_end":364,"column_start":10,"column_end":30},"name":"ExistenceRequirement","qualname":"::traits::ExistenceRequirement","value":"ExistenceRequirement::{KeepAlive, AllowDeath}","parent":null,"children":[{"krate":0,"index":2673},{"krate":0,"index":2675}],"decl_id":null,"docs":" Simple boolean for whether an account needs to be kept in existence.\n","sig":null,"attributes":[{"value":"/ Simple boolean for whether an account needs to be kept in existence.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249038,"byte_end":249110,"line_start":362,"line_end":362,"column_start":1,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":1130},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249619,"byte_end":249626,"line_start":375,"line_end":375,"column_start":11,"column_end":18},"name":"TryDrop","qualname":"::traits::TryDrop","value":"TryDrop: Sized","parent":null,"children":[{"krate":0,"index":1131}],"decl_id":null,"docs":" A type for which some values make sense to be able to drop without further consideration.\n","sig":null,"attributes":[{"value":"/ A type for which some values make sense to be able to drop without further consideration.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249515,"byte_end":249608,"line_start":374,"line_end":374,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249722,"byte_end":249730,"line_start":377,"line_end":377,"column_start":5,"column_end":13},"name":"try_drop","qualname":"::traits::TryDrop::try_drop","value":"fn (self) -> Result<(), Self>","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Drop an instance cleanly. Only works if its value represents \"no-operation\".\n","sig":null,"attributes":[{"value":"/ Drop an instance cleanly. Only works if its value represents \"no-operation\".","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249637,"byte_end":249717,"line_start":376,"line_end":376,"column_start":2,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":1132},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251261,"byte_end":251270,"line_start":409,"line_end":409,"column_start":11,"column_end":20},"name":"Imbalance","qualname":"::traits::Imbalance","value":"Imbalance<Balance>: Sized + TryDrop","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149}],"decl_id":null,"docs":" A trait for a not-quite Linear Type that tracks an imbalance.","sig":null,"attributes":[{"value":"/ A trait for a not-quite Linear Type that tracks an imbalance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249761,"byte_end":249826,"line_start":380,"line_end":380,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249827,"byte_end":249830,"line_start":381,"line_end":381,"column_start":1,"column_end":4}},{"value":"/ Functions that alter account balances return an object of this trait to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249831,"byte_end":249906,"line_start":382,"line_end":382,"column_start":1,"column_end":76}},{"value":"/ express how much account balances have been altered in aggregate. If","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249907,"byte_end":249979,"line_start":383,"line_end":383,"column_start":1,"column_end":73}},{"value":"/ dropped, the currency system will take some default steps to deal with","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249980,"byte_end":250054,"line_start":384,"line_end":384,"column_start":1,"column_end":75}},{"value":"/ the imbalance (`balances` module simply reduces or increases its","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250055,"byte_end":250123,"line_start":385,"line_end":385,"column_start":1,"column_end":69}},{"value":"/ total issuance). Your module should generally handle it in some way,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250124,"byte_end":250196,"line_start":386,"line_end":386,"column_start":1,"column_end":73}},{"value":"/ good practice is to do so in a configurable manner using an","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250197,"byte_end":250260,"line_start":387,"line_end":387,"column_start":1,"column_end":64}},{"value":"/ `OnUnbalanced` type for each situation in which your module needs to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250261,"byte_end":250333,"line_start":388,"line_end":388,"column_start":1,"column_end":73}},{"value":"/ handle an imbalance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250334,"byte_end":250358,"line_start":389,"line_end":389,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250359,"byte_end":250362,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ Imbalances can either be Positive (funds were added somewhere without","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250363,"byte_end":250436,"line_start":391,"line_end":391,"column_start":1,"column_end":74}},{"value":"/ being subtracted elsewhere - e.g. a reward) or Negative (funds deducted","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250437,"byte_end":250512,"line_start":392,"line_end":392,"column_start":1,"column_end":76}},{"value":"/ somewhere without an equal and opposite addition - e.g. a slash or","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250513,"byte_end":250583,"line_start":393,"line_end":393,"column_start":1,"column_end":71}},{"value":"/ system fee payment).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250584,"byte_end":250608,"line_start":394,"line_end":394,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250609,"byte_end":250612,"line_start":395,"line_end":395,"column_start":1,"column_end":4}},{"value":"/ Since they are unsigned, the actual type is always Positive or Negative.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250613,"byte_end":250689,"line_start":396,"line_end":396,"column_start":1,"column_end":77}},{"value":"/ The trait makes no distinction except to define the `Opposite` type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250690,"byte_end":250762,"line_start":397,"line_end":397,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250763,"byte_end":250766,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ New instances of zero value can be created (`zero`) and destroyed","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250767,"byte_end":250836,"line_start":399,"line_end":399,"column_start":1,"column_end":70}},{"value":"/ (`drop_zero`).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250837,"byte_end":250855,"line_start":400,"line_end":400,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250856,"byte_end":250859,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ Existing instances can be `split` and merged either consuming `self` with","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250860,"byte_end":250937,"line_start":402,"line_end":402,"column_start":1,"column_end":78}},{"value":"/ `merge` or mutating `self` with `subsume`. If the target is an `Option`,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":250938,"byte_end":251014,"line_start":403,"line_end":403,"column_start":1,"column_end":77}},{"value":"/ then `maybe_merge` and `maybe_subsume` might work better. Instances can","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251015,"byte_end":251090,"line_start":404,"line_end":404,"column_start":1,"column_end":76}},{"value":"/ also be `offset` with an `Opposite` that is less than or equal to in value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251091,"byte_end":251170,"line_start":405,"line_end":405,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251171,"byte_end":251174,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ You can always retrieve the raw balance value using `peek`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251175,"byte_end":251238,"line_start":407,"line_end":407,"column_start":1,"column_end":64}},{"value":"must_use","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251239,"byte_end":251250,"line_start":408,"line_end":408,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":1134},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251362,"byte_end":251370,"line_start":411,"line_end":411,"column_start":7,"column_end":15},"name":"Opposite","qualname":"::traits::Imbalance::Opposite","value":"type Opposite: Imbalance<Balance>;","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" The oppositely imbalanced type. They come in pairs.\n","sig":null,"attributes":[{"value":"/ The oppositely imbalanced type. They come in pairs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251300,"byte_end":251355,"line_start":410,"line_end":410,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251457,"byte_end":251461,"line_start":414,"line_end":414,"column_start":5,"column_end":9},"name":"zero","qualname":"::traits::Imbalance::zero","value":"fn () -> Self","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" The zero imbalance. Can be destroyed with `drop_zero`.\n","sig":null,"attributes":[{"value":"/ The zero imbalance. Can be destroyed with `drop_zero`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251394,"byte_end":251452,"line_start":413,"line_end":413,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251551,"byte_end":251560,"line_start":417,"line_end":417,"column_start":5,"column_end":14},"name":"drop_zero","qualname":"::traits::Imbalance::drop_zero","value":"fn (self) -> Result<(), Self>","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Drop an instance cleanly. Only works if its `self.value()` is zero.\n","sig":null,"attributes":[{"value":"/ Drop an instance cleanly. Only works if its `self.value()` is zero.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251475,"byte_end":251546,"line_start":416,"line_end":416,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251741,"byte_end":251746,"line_start":421,"line_end":421,"column_start":5,"column_end":10},"name":"split","qualname":"::traits::Imbalance::split","value":"fn (self, amount: Balance) -> (Self, Self)","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Consume `self` and return two independent instances; the first\n is guaranteed to be at most `amount` and the second will be the remainder.\n","sig":null,"attributes":[{"value":"/ Consume `self` and return two independent instances; the first","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251590,"byte_end":251656,"line_start":419,"line_end":419,"column_start":2,"column_end":68}},{"value":"/ is guaranteed to be at most `amount` and the second will be the remainder.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251658,"byte_end":251736,"line_start":420,"line_end":420,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252107,"byte_end":252113,"line_start":428,"line_end":428,"column_start":5,"column_end":11},"name":"ration","qualname":"::traits::Imbalance::ration","value":"fn (self, first: u32, second: u32) -> (Self, Self)","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Consume `self` and return two independent instances; the amounts returned will be in\n approximately the same ratio as `first`:`second`.","sig":null,"attributes":[{"value":"/ Consume `self` and return two independent instances; the amounts returned will be in","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251789,"byte_end":251877,"line_start":423,"line_end":423,"column_start":2,"column_end":90}},{"value":"/ approximately the same ratio as `first`:`second`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251879,"byte_end":251932,"line_start":424,"line_end":424,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251934,"byte_end":251937,"line_start":425,"line_end":425,"column_start":2,"column_end":5}},{"value":"/ NOTE: This requires up to `first + second` room for a multiply, and `first + second` should","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251939,"byte_end":252034,"line_start":426,"line_end":426,"column_start":2,"column_end":97}},{"value":"/ fit into a `u32`. Overflow will safely saturate in both cases.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252036,"byte_end":252102,"line_start":427,"line_end":427,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252576,"byte_end":252587,"line_start":440,"line_end":440,"column_start":5,"column_end":16},"name":"split_merge","qualname":"::traits::Imbalance::split_merge","value":"fn (self, amount: Balance, others: (Self, Self)) -> (Self, Self)","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the first component's balance,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the first component's balance,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252375,"byte_end":252461,"line_start":436,"line_end":436,"column_start":2,"column_end":88}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252463,"byte_end":252511,"line_start":437,"line_end":437,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252513,"byte_end":252516,"line_start":438,"line_end":438,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252518,"byte_end":252571,"line_start":439,"line_end":439,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252930,"byte_end":252942,"line_start":449,"line_end":449,"column_start":5,"column_end":17},"name":"ration_merge","qualname":"::traits::Imbalance::ration_merge","value":"fn (self, first: u32, second: u32, others: (Self, Self)) -> (Self, Self)","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the ratio `first`:`second`,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the ratio `first`:`second`,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252732,"byte_end":252815,"line_start":445,"line_end":445,"column_start":2,"column_end":85}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252817,"byte_end":252865,"line_start":446,"line_end":446,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252867,"byte_end":252870,"line_start":447,"line_end":447,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":252872,"byte_end":252925,"line_start":448,"line_end":448,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1141},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":253375,"byte_end":253391,"line_start":460,"line_end":460,"column_start":5,"column_end":21},"name":"split_merge_into","qualname":"::traits::Imbalance::split_merge_into","value":"fn (self, amount: Balance, others: &mut (Self, Self)) -> ()","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the first component's balance,\n element-wise into two pre-existing Imbalance refs.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the first component's balance,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":253166,"byte_end":253252,"line_start":456,"line_end":456,"column_start":2,"column_end":88}},{"value":"/ element-wise into two pre-existing Imbalance refs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":253254,"byte_end":253308,"line_start":457,"line_end":457,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":253310,"byte_end":253313,"line_start":458,"line_end":458,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `subsume`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":253315,"byte_end":253370,"line_start":459,"line_end":459,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1142},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":253728,"byte_end":253745,"line_start":470,"line_end":470,"column_start":5,"column_end":22},"name":"ration_merge_into","qualname":"::traits::Imbalance::ration_merge_into","value":"fn (self, first: u32, second: u32, others: &mut (Self, Self)) -> ()","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Consume self and add its two components, defined by the ratio `first`:`second`,\n element-wise to two pre-existing Imbalances.","sig":null,"attributes":[{"value":"/ Consume self and add its two components, defined by the ratio `first`:`second`,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":253530,"byte_end":253613,"line_start":466,"line_end":466,"column_start":2,"column_end":85}},{"value":"/ element-wise to two pre-existing Imbalances.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":253615,"byte_end":253663,"line_start":467,"line_end":467,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":253665,"byte_end":253668,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ A convenient replacement for `split` and `merge`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":253670,"byte_end":253723,"line_start":469,"line_end":469,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254051,"byte_end":254056,"line_start":480,"line_end":480,"column_start":5,"column_end":10},"name":"merge","qualname":"::traits::Imbalance::merge","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Consume `self` and an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and an `other` to return a new instance that combines","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":253963,"byte_end":254035,"line_start":478,"line_end":478,"column_start":2,"column_end":74}},{"value":"/ both.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254037,"byte_end":254046,"line_start":479,"line_end":479,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254208,"byte_end":254218,"line_start":484,"line_end":484,"column_start":5,"column_end":15},"name":"merge_into","qualname":"::traits::Imbalance::merge_into","value":"fn (self, other: &mut Self) -> ()","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Consume self to mutate `other` so that it combines both. Just like `subsume`, only with\n reversed arguments.\n","sig":null,"attributes":[{"value":"/ Consume self to mutate `other` so that it combines both. Just like `subsume`, only with","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254087,"byte_end":254178,"line_start":482,"line_end":482,"column_start":2,"column_end":93}},{"value":"/ reversed arguments.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254180,"byte_end":254203,"line_start":483,"line_end":483,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1145},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254366,"byte_end":254377,"line_start":490,"line_end":490,"column_start":5,"column_end":16},"name":"maybe_merge","qualname":"::traits::Imbalance::maybe_merge","value":"fn (self, other: Option<Self>) -> Self","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Consume `self` and maybe an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and maybe an `other` to return a new instance that combines","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254272,"byte_end":254350,"line_start":488,"line_end":488,"column_start":2,"column_end":80}},{"value":"/ both.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254352,"byte_end":254361,"line_start":489,"line_end":489,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254576,"byte_end":254583,"line_start":500,"line_end":500,"column_start":5,"column_end":12},"name":"subsume","qualname":"::traits::Imbalance::subsume","value":"fn (&mut self, other: Self) -> ()","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Consume an `other` to mutate `self` into a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume an `other` to mutate `self` into a new instance that combines","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254487,"byte_end":254560,"line_start":498,"line_end":498,"column_start":2,"column_end":75}},{"value":"/ both.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254562,"byte_end":254571,"line_start":499,"line_end":499,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254706,"byte_end":254719,"line_start":504,"line_end":504,"column_start":5,"column_end":18},"name":"maybe_subsume","qualname":"::traits::Imbalance::maybe_subsume","value":"fn (&mut self, other: Option<Self>) -> ()","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Maybe consume an `other` to mutate `self` into a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Maybe consume an `other` to mutate `self` into a new instance that combines","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254611,"byte_end":254690,"line_start":502,"line_end":502,"column_start":2,"column_end":81}},{"value":"/ both.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254692,"byte_end":254701,"line_start":503,"line_end":503,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255166,"byte_end":255172,"line_start":517,"line_end":517,"column_start":5,"column_end":11},"name":"offset","qualname":"::traits::Imbalance::offset","value":"fn (self, other: Self::Opposite) -> Result<Self, Self::Opposite>","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" Consume self and along with an opposite counterpart to return\n a combined result.","sig":null,"attributes":[{"value":"/ Consume self and along with an opposite counterpart to return","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254809,"byte_end":254874,"line_start":510,"line_end":510,"column_start":2,"column_end":67}},{"value":"/ a combined result.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254876,"byte_end":254898,"line_start":511,"line_end":511,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254900,"byte_end":254903,"line_start":512,"line_end":512,"column_start":2,"column_end":5}},{"value":"/ Returns `Ok` along with a new instance of `Self` if this instance has a","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254905,"byte_end":254980,"line_start":513,"line_end":513,"column_start":2,"column_end":77}},{"value":"/ greater value than the `other`. Otherwise returns `Err` with an instance of","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":254982,"byte_end":255061,"line_start":514,"line_end":514,"column_start":2,"column_end":81}},{"value":"/ the `Opposite`. In both cases the value represents the combination of `self`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255063,"byte_end":255143,"line_start":515,"line_end":515,"column_start":2,"column_end":82}},{"value":"/ and `other`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255145,"byte_end":255161,"line_start":516,"line_end":516,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255268,"byte_end":255272,"line_start":520,"line_end":520,"column_start":5,"column_end":9},"name":"peek","qualname":"::traits::Imbalance::peek","value":"fn (&self) -> Balance","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":" The raw value of self.\n","sig":null,"attributes":[{"value":"/ The raw value of self.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255237,"byte_end":255263,"line_start":519,"line_end":519,"column_start":2,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1153},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255461,"byte_end":255469,"line_start":526,"line_end":526,"column_start":2,"column_end":10},"name":"Positive","qualname":"::traits::SignedImbalance::Positive","value":"SignedImbalance::Positive(P)","parent":{"krate":0,"index":1150},"children":[],"decl_id":null,"docs":" A positive imbalance (funds have been created but none destroyed).\n","sig":null,"attributes":[{"value":"/ A positive imbalance (funds have been created but none destroyed).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255389,"byte_end":255459,"line_start":525,"line_end":525,"column_start":2,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1156},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255547,"byte_end":255555,"line_start":528,"line_end":528,"column_start":2,"column_end":10},"name":"Negative","qualname":"::traits::SignedImbalance::Negative","value":"SignedImbalance::Negative(P::Opposite)","parent":{"krate":0,"index":1150},"children":[],"decl_id":null,"docs":" A negative imbalance (funds have been destroyed but none created).\n","sig":null,"attributes":[{"value":"/ A negative imbalance (funds have been destroyed but none created).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255475,"byte_end":255545,"line_start":527,"line_end":527,"column_start":2,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":1150},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255351,"byte_end":255366,"line_start":524,"line_end":524,"column_start":10,"column_end":25},"name":"SignedImbalance","qualname":"::traits::SignedImbalance","value":"SignedImbalance::{Positive, Negative}","parent":null,"children":[{"krate":0,"index":1153},{"krate":0,"index":1156}],"decl_id":null,"docs":" Either a positive or a negative imbalance.\n","sig":null,"attributes":[{"value":"/ Either a positive or a negative imbalance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255295,"byte_end":255341,"line_start":523,"line_end":523,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255756,"byte_end":255760,"line_start":536,"line_end":536,"column_start":9,"column_end":13},"name":"zero","qualname":"<SignedImbalance<B, P>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255824,"byte_end":255833,"line_start":540,"line_end":540,"column_start":9,"column_end":18},"name":"drop_zero","qualname":"<SignedImbalance<B, P>>::drop_zero","value":"fn (self) -> Result<(), Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":256148,"byte_end":256153,"line_start":549,"line_end":549,"column_start":9,"column_end":14},"name":"merge","qualname":"<SignedImbalance<B, P>>::merge","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Consume `self` and an `other` to return a new instance that combines\n both.\n","sig":null,"attributes":[{"value":"/ Consume `self` and an `other` to return a new instance that combines","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":256056,"byte_end":256128,"line_start":547,"line_end":547,"column_start":2,"column_end":74}},{"value":"/ both.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":256130,"byte_end":256139,"line_start":548,"line_end":548,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1166},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":256861,"byte_end":256873,"line_start":567,"line_end":567,"column_start":12,"column_end":24},"name":"SplitTwoWays","qualname":"::traits::SplitTwoWays","value":"","parent":null,"children":[],"decl_id":null,"docs":" Split an unbalanced amount two ways between a common divisor.\n","sig":null,"attributes":[{"value":"/ Split an unbalanced amount two ways between a common divisor.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":256784,"byte_end":256849,"line_start":566,"line_end":566,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1183},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":257591,"byte_end":257599,"line_start":595,"line_end":595,"column_start":11,"column_end":19},"name":"Currency","qualname":"::traits::Currency","value":"Currency<AccountId>","parent":null,"children":[{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204}],"decl_id":null,"docs":" Abstraction over a fungible assets system.\n","sig":null,"attributes":[{"value":"/ Abstraction over a fungible assets system.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":257534,"byte_end":257580,"line_start":594,"line_end":594,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":1185},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":257651,"byte_end":257658,"line_start":597,"line_end":597,"column_start":7,"column_end":14},"name":"Balance","qualname":"::traits::Currency::Balance","value":"type Balance: AtLeast32Bit + FullCodec + Copy + MaybeSerializeDeserialize + Debug + Default;","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" The balance of an account.\n","sig":null,"attributes":[{"value":"/ The balance of an account.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":257614,"byte_end":257644,"line_start":596,"line_end":596,"column_start":2,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":1186},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":257902,"byte_end":257919,"line_start":601,"line_end":601,"column_start":7,"column_end":24},"name":"PositiveImbalance","qualname":"::traits::Currency::PositiveImbalance","value":"type PositiveImbalance: Imbalance<Self::Balance, Opposite=Self::NegativeImbalance>;","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" The opaque token type for an imbalance. This is returned by unbalanced operations\n and must be dealt with. It may be dropped but cannot be cloned.\n","sig":null,"attributes":[{"value":"/ The opaque token type for an imbalance. This is returned by unbalanced operations","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":257741,"byte_end":257826,"line_start":599,"line_end":599,"column_start":2,"column_end":87}},{"value":"/ and must be dealt with. It may be dropped but cannot be cloned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":257828,"byte_end":257895,"line_start":600,"line_end":600,"column_start":2,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1187},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258144,"byte_end":258161,"line_start":605,"line_end":605,"column_start":7,"column_end":24},"name":"NegativeImbalance","qualname":"::traits::Currency::NegativeImbalance","value":"type NegativeImbalance: Imbalance<Self::Balance, Opposite=Self::PositiveImbalance>;","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" The opaque token type for an imbalance. This is returned by unbalanced operations\n and must be dealt with. It may be dropped but cannot be cloned.\n","sig":null,"attributes":[{"value":"/ The opaque token type for an imbalance. This is returned by unbalanced operations","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":257983,"byte_end":258068,"line_start":603,"line_end":603,"column_start":2,"column_end":87}},{"value":"/ and must be dealt with. It may be dropped but cannot be cloned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258070,"byte_end":258137,"line_start":604,"line_end":604,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258287,"byte_end":258300,"line_start":610,"line_end":610,"column_start":5,"column_end":18},"name":"total_balance","qualname":"::traits::Currency::total_balance","value":"fn (who: &AccountId) -> Self::Balance","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" The combined balance of `who`.\n","sig":null,"attributes":[{"value":"/ The combined balance of `who`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258248,"byte_end":258282,"line_start":609,"line_end":609,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258528,"byte_end":258537,"line_start":614,"line_end":614,"column_start":5,"column_end":14},"name":"can_slash","qualname":"::traits::Currency::can_slash","value":"fn (who: &AccountId, value: Self::Balance) -> bool","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Same result as `slash(who, value)` (but without the side-effects) assuming there are no\n balance changes in the meantime and only the reserved balance is not taken into account.\n","sig":null,"attributes":[{"value":"/ Same result as `slash(who, value)` (but without the side-effects) assuming there are no","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258338,"byte_end":258429,"line_start":612,"line_end":612,"column_start":2,"column_end":93}},{"value":"/ balance changes in the meantime and only the reserved balance is not taken into account.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258431,"byte_end":258523,"line_start":613,"line_end":613,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258640,"byte_end":258654,"line_start":617,"line_end":617,"column_start":5,"column_end":19},"name":"total_issuance","qualname":"::traits::Currency::total_issuance","value":"fn () -> Self::Balance","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" The total amount of issuance in the system.\n","sig":null,"attributes":[{"value":"/ The total amount of issuance in the system.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258588,"byte_end":258635,"line_start":616,"line_end":616,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258807,"byte_end":258822,"line_start":621,"line_end":621,"column_start":5,"column_end":20},"name":"minimum_balance","qualname":"::traits::Currency::minimum_balance","value":"fn () -> Self::Balance","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" The minimum balance any single account may have. This is equivalent to the `Balances` module's\n `ExistentialDeposit`.\n","sig":null,"attributes":[{"value":"/ The minimum balance any single account may have. This is equivalent to the `Balances` module's","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258677,"byte_end":258775,"line_start":619,"line_end":619,"column_start":2,"column_end":100}},{"value":"/ `ExistentialDeposit`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258777,"byte_end":258802,"line_start":620,"line_end":620,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259159,"byte_end":259163,"line_start":628,"line_end":628,"column_start":5,"column_end":9},"name":"burn","qualname":"::traits::Currency::burn","value":"fn (amount: Self::Balance) -> Self::PositiveImbalance","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Reduce the total issuance by `amount` and return the according imbalance. The imbalance will\n typically be used to reduce an account by the same amount with e.g. `settle`.","sig":null,"attributes":[{"value":"/ Reduce the total issuance by `amount` and return the according imbalance. The imbalance will","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258845,"byte_end":258941,"line_start":623,"line_end":623,"column_start":2,"column_end":98}},{"value":"/ typically be used to reduce an account by the same amount with e.g. `settle`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":258943,"byte_end":259024,"line_start":624,"line_end":624,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259026,"byte_end":259029,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is burnt, for example","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259031,"byte_end":259123,"line_start":626,"line_end":626,"column_start":2,"column_end":94}},{"value":"/ in the case of underflow.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259125,"byte_end":259154,"line_start":627,"line_end":627,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259577,"byte_end":259582,"line_start":636,"line_end":636,"column_start":5,"column_end":10},"name":"issue","qualname":"::traits::Currency::issue","value":"fn (amount: Self::Balance) -> Self::NegativeImbalance","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Increase the total issuance by `amount` and return the according imbalance. The imbalance\n will typically be used to increase an account by the same amount with e.g.\n `resolve_into_existing` or `resolve_creating`.","sig":null,"attributes":[{"value":"/ Increase the total issuance by `amount` and return the according imbalance. The imbalance","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259217,"byte_end":259310,"line_start":630,"line_end":630,"column_start":2,"column_end":95}},{"value":"/ will typically be used to increase an account by the same amount with e.g.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259312,"byte_end":259390,"line_start":631,"line_end":631,"column_start":2,"column_end":80}},{"value":"/ `resolve_into_existing` or `resolve_creating`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259392,"byte_end":259442,"line_start":632,"line_end":632,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259444,"byte_end":259447,"line_start":633,"line_end":633,"column_start":2,"column_end":5}},{"value":"/ This is infallible, but doesn't guarantee that the entire `amount` is issued, for example","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259449,"byte_end":259542,"line_start":634,"line_end":634,"column_start":2,"column_end":95}},{"value":"/ in the case of overflow.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259544,"byte_end":259572,"line_start":635,"line_end":635,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260174,"byte_end":260186,"line_start":647,"line_end":647,"column_start":5,"column_end":17},"name":"free_balance","qualname":"::traits::Currency::free_balance","value":"fn (who: &AccountId) -> Self::Balance","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" The 'free' balance of a given account.","sig":null,"attributes":[{"value":"/ The 'free' balance of a given account.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259636,"byte_end":259678,"line_start":638,"line_end":638,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259680,"byte_end":259683,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ This is the only balance that matters in terms of most operations on tokens. It alone","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259685,"byte_end":259774,"line_start":640,"line_end":640,"column_start":2,"column_end":91}},{"value":"/ is used to determine the balance when in the contract execution environment. When this","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259776,"byte_end":259866,"line_start":641,"line_end":641,"column_start":2,"column_end":92}},{"value":"/ balance falls below the value of `ExistentialDeposit`, then the 'current account' is","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259868,"byte_end":259956,"line_start":642,"line_end":642,"column_start":2,"column_end":90}},{"value":"/ deleted: specifically `FreeBalance`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":259958,"byte_end":259998,"line_start":643,"line_end":643,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260000,"byte_end":260003,"line_start":644,"line_end":644,"column_start":2,"column_end":5}},{"value":"/ `system::AccountNonce` is also deleted if `ReservedBalance` is also zero (it also gets","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260005,"byte_end":260095,"line_start":645,"line_end":645,"column_start":2,"column_end":92}},{"value":"/ collapsed to zero if it ever becomes less than `ExistentialDeposit`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260097,"byte_end":260169,"line_start":646,"line_end":646,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260439,"byte_end":260458,"line_start":653,"line_end":653,"column_start":5,"column_end":24},"name":"ensure_can_withdraw","qualname":"::traits::Currency::ensure_can_withdraw","value":"fn (who: &AccountId, _amount: Self::Balance, reasons: WithdrawReasons, new_balance: Self::Balance) -> DispatchResult","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Returns `Ok` iff the account is able to make a withdrawal of the given amount\n for the given reason. Basically, it's just a dry-run of `withdraw`.","sig":null,"attributes":[{"value":"/ Returns `Ok` iff the account is able to make a withdrawal of the given amount","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260224,"byte_end":260305,"line_start":649,"line_end":649,"column_start":2,"column_end":83}},{"value":"/ for the given reason. Basically, it's just a dry-run of `withdraw`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260307,"byte_end":260378,"line_start":650,"line_end":650,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260380,"byte_end":260383,"line_start":651,"line_end":651,"column_start":2,"column_end":5}},{"value":"/ `Err(...)` with the reason why not otherwise.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260385,"byte_end":260434,"line_start":652,"line_end":652,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260817,"byte_end":260825,"line_start":666,"line_end":666,"column_start":5,"column_end":13},"name":"transfer","qualname":"::traits::Currency::transfer","value":"fn (source: &AccountId, dest: &AccountId, value: Self::Balance, existence_requirement: ExistenceRequirement) -> DispatchResult","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Transfer some liquid free balance to another staker.","sig":null,"attributes":[{"value":"/ Transfer some liquid free balance to another staker.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260620,"byte_end":260676,"line_start":662,"line_end":662,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260678,"byte_end":260681,"line_start":663,"line_end":663,"column_start":2,"column_end":5}},{"value":"/ This is a very high-level function. It will ensure all appropriate fees are paid","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260683,"byte_end":260767,"line_start":664,"line_end":664,"column_start":2,"column_end":86}},{"value":"/ and no imbalance in the system remains.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260769,"byte_end":260812,"line_start":665,"line_end":665,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261330,"byte_end":261335,"line_start":680,"line_end":680,"column_start":5,"column_end":10},"name":"slash","qualname":"::traits::Currency::slash","value":"fn (who: &AccountId, value: Self::Balance) -> (Self::NegativeImbalance, Self::Balance)","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Deducts up to `value` from the combined balance of `who`, preferring to deduct from the\n free balance. This function cannot fail.","sig":null,"attributes":[{"value":"/ Deducts up to `value` from the combined balance of `who`, preferring to deduct from the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":260964,"byte_end":261055,"line_start":673,"line_end":673,"column_start":2,"column_end":93}},{"value":"/ free balance. This function cannot fail.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261057,"byte_end":261101,"line_start":674,"line_end":674,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261103,"byte_end":261106,"line_start":675,"line_end":675,"column_start":2,"column_end":5}},{"value":"/ The resulting imbalance is the first item of the tuple returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261108,"byte_end":261176,"line_start":676,"line_end":676,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261178,"byte_end":261181,"line_start":677,"line_end":677,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If this is less than `value`,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261183,"byte_end":261274,"line_start":678,"line_end":678,"column_start":2,"column_end":93}},{"value":"/ then a non-zero second item will be returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261276,"byte_end":261325,"line_start":679,"line_end":679,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261552,"byte_end":261573,"line_start":688,"line_end":688,"column_start":5,"column_end":26},"name":"deposit_into_existing","qualname":"::traits::Currency::deposit_into_existing","value":"fn (who: &AccountId, value: Self::Balance) -> result::Result<Self::PositiveImbalance, DispatchError>","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Mints `value` to the free balance of `who`.","sig":null,"attributes":[{"value":"/ Mints `value` to the free balance of `who`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261429,"byte_end":261476,"line_start":685,"line_end":685,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261478,"byte_end":261481,"line_start":686,"line_end":686,"column_start":2,"column_end":5}},{"value":"/ If `who` doesn't exist, nothing is done and an Err returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261483,"byte_end":261547,"line_start":687,"line_end":687,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261790,"byte_end":261811,"line_start":695,"line_end":695,"column_start":5,"column_end":26},"name":"resolve_into_existing","qualname":"::traits::Currency::resolve_into_existing","value":"fn (who: &AccountId, value: Self::NegativeImbalance) -> result::Result<(), Self::NegativeImbalance>","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on\n success.\n","sig":null,"attributes":[{"value":"/ Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261681,"byte_end":261771,"line_start":693,"line_end":693,"column_start":2,"column_end":92}},{"value":"/ success.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":261773,"byte_end":261785,"line_start":694,"line_end":694,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262188,"byte_end":262204,"line_start":709,"line_end":709,"column_start":5,"column_end":21},"name":"deposit_creating","qualname":"::traits::Currency::deposit_creating","value":"fn (who: &AccountId, value: Self::Balance) -> Self::PositiveImbalance","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Adds up to `value` to the free balance of `who`. If `who` doesn't exist, it is created.","sig":null,"attributes":[{"value":"/ Adds up to `value` to the free balance of `who`. If `who` doesn't exist, it is created.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262070,"byte_end":262161,"line_start":706,"line_end":706,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262163,"byte_end":262166,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ Infallible.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262168,"byte_end":262183,"line_start":708,"line_end":708,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262391,"byte_end":262407,"line_start":716,"line_end":716,"column_start":5,"column_end":21},"name":"resolve_creating","qualname":"::traits::Currency::resolve_creating","value":"fn (who: &AccountId, value: Self::NegativeImbalance) -> ()","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on\n success.\n","sig":null,"attributes":[{"value":"/ Similar to deposit_creating, only accepts a `NegativeImbalance` and returns nothing on","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262282,"byte_end":262372,"line_start":714,"line_end":714,"column_start":2,"column_end":92}},{"value":"/ success.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262374,"byte_end":262386,"line_start":715,"line_end":715,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262977,"byte_end":262985,"line_start":732,"line_end":732,"column_start":5,"column_end":13},"name":"withdraw","qualname":"::traits::Currency::withdraw","value":"fn (who: &AccountId, value: Self::Balance, reasons: WithdrawReasons, liveness: ExistenceRequirement) -> result::Result<Self::NegativeImbalance, DispatchError>","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Removes some free balance from `who` account for `reason` if possible. If `liveness` is\n `KeepAlive`, then no less than `ExistentialDeposit` must be left remaining.","sig":null,"attributes":[{"value":"/ Removes some free balance from `who` account for `reason` if possible. If `liveness` is","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262550,"byte_end":262641,"line_start":724,"line_end":724,"column_start":2,"column_end":93}},{"value":"/ `KeepAlive`, then no less than `ExistentialDeposit` must be left remaining.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262643,"byte_end":262722,"line_start":725,"line_end":725,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262724,"byte_end":262727,"line_start":726,"line_end":726,"column_start":2,"column_end":5}},{"value":"/ This checks any locks, vesting, and liquidity requirements. If the removal is not possible,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262729,"byte_end":262824,"line_start":727,"line_end":727,"column_start":2,"column_end":97}},{"value":"/ then it returns `Err`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262826,"byte_end":262852,"line_start":728,"line_end":728,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262854,"byte_end":262857,"line_start":729,"line_end":729,"column_start":2,"column_end":5}},{"value":"/ If the operation is successful, this will return `Ok` with a `NegativeImbalance` whose value","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262859,"byte_end":262955,"line_start":730,"line_end":730,"column_start":2,"column_end":98}},{"value":"/ is `value`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":262957,"byte_end":262972,"line_start":731,"line_end":731,"column_start":2,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":263252,"byte_end":263258,"line_start":740,"line_end":740,"column_start":5,"column_end":11},"name":"settle","qualname":"::traits::Currency::settle","value":"fn (who: &AccountId, value: Self::PositiveImbalance, reasons: WithdrawReasons, liveness: ExistenceRequirement) -> result::Result<(), Self::PositiveImbalance>","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Similar to withdraw, only accepts a `PositiveImbalance` and returns nothing on success.\n","sig":null,"attributes":[{"value":"/ Similar to withdraw, only accepts a `PositiveImbalance` and returns nothing on success.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":263156,"byte_end":263247,"line_start":739,"line_end":739,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":263840,"byte_end":263860,"line_start":758,"line_end":758,"column_start":5,"column_end":25},"name":"make_free_balance_be","qualname":"::traits::Currency::make_free_balance_be","value":"fn (who: &AccountId, balance: Self::Balance) -> SignedImbalance<Self::Balance, Self::PositiveImbalance>","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":" Ensure an account's free balance equals some value; this will create the account\n if needed.","sig":null,"attributes":[{"value":"/ Ensure an account's free balance equals some value; this will create the account","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":263585,"byte_end":263669,"line_start":753,"line_end":753,"column_start":2,"column_end":86}},{"value":"/ if needed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":263671,"byte_end":263685,"line_start":754,"line_end":754,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":263687,"byte_end":263690,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ Returns a signed imbalance and status to indicate if the account was successfully updated or update","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":263692,"byte_end":263795,"line_start":756,"line_end":756,"column_start":2,"column_end":105}},{"value":"/ has led to killing of the account.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":263797,"byte_end":263835,"line_start":757,"line_end":757,"column_start":2,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1206},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264086,"byte_end":264090,"line_start":767,"line_end":767,"column_start":2,"column_end":6},"name":"Free","qualname":"::traits::BalanceStatus::Free","value":"BalanceStatus::Free","parent":{"krate":0,"index":1205},"children":[],"decl_id":null,"docs":" Funds are free, as corresponding to `free` item in Balances.\n","sig":null,"attributes":[{"value":"/ Funds are free, as corresponding to `free` item in Balances.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264020,"byte_end":264084,"line_start":766,"line_end":766,"column_start":2,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1208},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264167,"byte_end":264175,"line_start":769,"line_end":769,"column_start":2,"column_end":10},"name":"Reserved","qualname":"::traits::BalanceStatus::Reserved","value":"BalanceStatus::Reserved","parent":{"krate":0,"index":1205},"children":[],"decl_id":null,"docs":" Funds are reserved, as corresponding to `reserved` item in Balances.\n","sig":null,"attributes":[{"value":"/ Funds are reserved, as corresponding to `reserved` item in Balances.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264093,"byte_end":264165,"line_start":768,"line_end":768,"column_start":2,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":1205},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264003,"byte_end":264016,"line_start":765,"line_end":765,"column_start":10,"column_end":23},"name":"BalanceStatus","qualname":"::traits::BalanceStatus","value":"BalanceStatus::{Free, Reserved}","parent":null,"children":[{"krate":0,"index":1206},{"krate":0,"index":1208}],"decl_id":null,"docs":" Status of funds.\n","sig":null,"attributes":[{"value":"/ Status of funds.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":263973,"byte_end":263993,"line_start":764,"line_end":764,"column_start":1,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":1210},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264248,"byte_end":264266,"line_start":773,"line_end":773,"column_start":11,"column_end":29},"name":"ReservableCurrency","qualname":"::traits::ReservableCurrency","value":"ReservableCurrency<AccountId>: Currency<AccountId>","parent":null,"children":[{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217}],"decl_id":null,"docs":" A currency where funds can be reserved from the user.\n","sig":null,"attributes":[{"value":"/ A currency where funds can be reserved from the user.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264180,"byte_end":264237,"line_start":772,"line_end":772,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264438,"byte_end":264449,"line_start":776,"line_end":776,"column_start":5,"column_end":16},"name":"can_reserve","qualname":"::traits::ReservableCurrency::can_reserve","value":"fn (who: &AccountId, value: Self::Balance) -> bool","parent":{"krate":0,"index":1210},"children":[],"decl_id":null,"docs":" Same result as `reserve(who, value)` (but without the side-effects) assuming there\n are no balance changes in the meantime.\n","sig":null,"attributes":[{"value":"/ Same result as `reserve(who, value)` (but without the side-effects) assuming there","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264302,"byte_end":264388,"line_start":774,"line_end":774,"column_start":2,"column_end":88}},{"value":"/ are no balance changes in the meantime.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264390,"byte_end":264433,"line_start":775,"line_end":775,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1213},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264762,"byte_end":264776,"line_start":782,"line_end":782,"column_start":5,"column_end":19},"name":"slash_reserved","qualname":"::traits::ReservableCurrency::slash_reserved","value":"fn (who: &AccountId, value: Self::Balance) -> (Self::NegativeImbalance, Self::Balance)","parent":{"krate":0,"index":1210},"children":[],"decl_id":null,"docs":" Deducts up to `value` from reserved balance of `who`. This function cannot fail.","sig":null,"attributes":[{"value":"/ Deducts up to `value` from reserved balance of `who`. This function cannot fail.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264500,"byte_end":264584,"line_start":778,"line_end":778,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264586,"byte_end":264589,"line_start":779,"line_end":779,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If the reserve balance of `who`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264591,"byte_end":264684,"line_start":780,"line_end":780,"column_start":2,"column_end":95}},{"value":"/ is less than `value`, then a non-zero second item will be returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264686,"byte_end":264757,"line_start":781,"line_end":781,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265514,"byte_end":265530,"line_start":798,"line_end":798,"column_start":5,"column_end":21},"name":"reserved_balance","qualname":"::traits::ReservableCurrency::reserved_balance","value":"fn (who: &AccountId) -> Self::Balance","parent":{"krate":0,"index":1210},"children":[],"decl_id":null,"docs":" The amount of the balance of a given account that is externally reserved; this can still get\n slashed, but gets slashed last of all.","sig":null,"attributes":[{"value":"/ The amount of the balance of a given account that is externally reserved; this can still get","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264870,"byte_end":264966,"line_start":787,"line_end":787,"column_start":2,"column_end":98}},{"value":"/ slashed, but gets slashed last of all.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264968,"byte_end":265010,"line_start":788,"line_end":788,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265012,"byte_end":265015,"line_start":789,"line_end":789,"column_start":2,"column_end":5}},{"value":"/ This balance is a 'reserve' balance that other subsystems use in order to set aside tokens","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265017,"byte_end":265111,"line_start":790,"line_end":790,"column_start":2,"column_end":96}},{"value":"/ that are still 'owned' by the account holder, but which are suspendable.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265113,"byte_end":265189,"line_start":791,"line_end":791,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265191,"byte_end":265194,"line_start":792,"line_end":792,"column_start":2,"column_end":5}},{"value":"/ When this balance falls below the value of `ExistentialDeposit`, then this 'reserve account'","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265196,"byte_end":265292,"line_start":793,"line_end":793,"column_start":2,"column_end":98}},{"value":"/ is deleted: specifically, `ReservedBalance`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265294,"byte_end":265342,"line_start":794,"line_end":794,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265344,"byte_end":265347,"line_start":795,"line_end":795,"column_start":2,"column_end":5}},{"value":"/ `system::AccountNonce` is also deleted if `FreeBalance` is also zero (it also gets","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265349,"byte_end":265435,"line_start":796,"line_end":796,"column_start":2,"column_end":88}},{"value":"/ collapsed to zero if it ever becomes less than `ExistentialDeposit`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265437,"byte_end":265509,"line_start":797,"line_end":797,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265804,"byte_end":265811,"line_start":804,"line_end":804,"column_start":5,"column_end":12},"name":"reserve","qualname":"::traits::ReservableCurrency::reserve","value":"fn (who: &AccountId, value: Self::Balance) -> DispatchResult","parent":{"krate":0,"index":1210},"children":[],"decl_id":null,"docs":" Moves `value` from balance to reserved balance.","sig":null,"attributes":[{"value":"/ Moves `value` from balance to reserved balance.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265568,"byte_end":265619,"line_start":800,"line_end":800,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265621,"byte_end":265624,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ If the free balance is lower than `value`, then no funds will be moved and an `Err` will","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265626,"byte_end":265718,"line_start":802,"line_end":802,"column_start":2,"column_end":94}},{"value":"/ be returned to notify of this. This is different behavior than `unreserve`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265720,"byte_end":265799,"line_start":803,"line_end":803,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266344,"byte_end":266353,"line_start":816,"line_end":816,"column_start":5,"column_end":14},"name":"unreserve","qualname":"::traits::ReservableCurrency::unreserve","value":"fn (who: &AccountId, value: Self::Balance) -> Self::Balance","parent":{"krate":0,"index":1210},"children":[],"decl_id":null,"docs":" Moves up to `value` from reserved balance to free balance. This function cannot fail.","sig":null,"attributes":[{"value":"/ Moves up to `value` from reserved balance to free balance. This function cannot fail.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265872,"byte_end":265961,"line_start":806,"line_end":806,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265963,"byte_end":265966,"line_start":807,"line_end":807,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be moved as possible. If the reserve balance of `who`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":265968,"byte_end":266058,"line_start":808,"line_end":808,"column_start":2,"column_end":92}},{"value":"/ is less than `value`, then the remaining amount will be returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266060,"byte_end":266129,"line_start":809,"line_end":809,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266131,"byte_end":266134,"line_start":810,"line_end":810,"column_start":2,"column_end":5}},{"value":"/ # NOTES","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266136,"byte_end":266147,"line_start":811,"line_end":811,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266149,"byte_end":266152,"line_start":812,"line_end":812,"column_start":2,"column_end":5}},{"value":"/ - This is different from `reserve`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266154,"byte_end":266193,"line_start":813,"line_end":813,"column_start":2,"column_end":41}},{"value":"/ - If the remaining reserved balance is less than `ExistentialDeposit`, it will","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266195,"byte_end":266277,"line_start":814,"line_end":814,"column_start":2,"column_end":84}},{"value":"/ invoke `on_reserved_too_low` and could reap the account.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266279,"byte_end":266339,"line_start":815,"line_end":815,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266867,"byte_end":266886,"line_start":825,"line_end":825,"column_start":5,"column_end":24},"name":"repatriate_reserved","qualname":"::traits::ReservableCurrency::repatriate_reserved","value":"fn (slashed: &AccountId, beneficiary: &AccountId, value: Self::Balance, status: BalanceStatus) -> result::Result<Self::Balance, DispatchError>","parent":{"krate":0,"index":1210},"children":[],"decl_id":null,"docs":" Moves up to `value` from reserved balance of account `slashed` to balance of account\n `beneficiary`. `beneficiary` must exist for this to succeed. If it does not, `Err` will be\n returned. Funds will be placed in either the `free` balance or the `reserved` balance,\n depending on the `status`.","sig":null,"attributes":[{"value":"/ Moves up to `value` from reserved balance of account `slashed` to balance of account","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266413,"byte_end":266501,"line_start":818,"line_end":818,"column_start":2,"column_end":90}},{"value":"/ `beneficiary`. `beneficiary` must exist for this to succeed. If it does not, `Err` will be","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266503,"byte_end":266597,"line_start":819,"line_end":819,"column_start":2,"column_end":96}},{"value":"/ returned. Funds will be placed in either the `free` balance or the `reserved` balance,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266599,"byte_end":266689,"line_start":820,"line_end":820,"column_start":2,"column_end":92}},{"value":"/ depending on the `status`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266691,"byte_end":266721,"line_start":821,"line_end":821,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266723,"byte_end":266726,"line_start":822,"line_end":822,"column_start":2,"column_end":5}},{"value":"/ As much funds up to `value` will be deducted as possible. If this is less than `value`,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266728,"byte_end":266819,"line_start":823,"line_end":823,"column_start":2,"column_end":93}},{"value":"/ then `Ok(non_zero)` will be returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":266821,"byte_end":266862,"line_start":824,"line_end":824,"column_start":2,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":1218},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267179,"byte_end":267193,"line_start":835,"line_end":835,"column_start":10,"column_end":24},"name":"LockIdentifier","qualname":"::traits::LockIdentifier","value":"[u8; 8]","parent":null,"children":[],"decl_id":null,"docs":" An identifier for a lock. Used for disambiguating different locks so that\n they can be individually replaced or removed.\n","sig":null,"attributes":[{"value":"/ An identifier for a lock. Used for disambiguating different locks so that","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267042,"byte_end":267119,"line_start":833,"line_end":833,"column_start":1,"column_end":78}},{"value":"/ they can be individually replaced or removed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267120,"byte_end":267169,"line_start":834,"line_end":834,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":1220},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267279,"byte_end":267295,"line_start":838,"line_end":838,"column_start":11,"column_end":27},"name":"LockableCurrency","qualname":"::traits::LockableCurrency","value":"LockableCurrency<AccountId>: Currency<AccountId>","parent":null,"children":[{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225}],"decl_id":null,"docs":" A currency whose accounts can have liquidity restrictions.\n","sig":null,"attributes":[{"value":"/ A currency whose accounts can have liquidity restrictions.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267206,"byte_end":267268,"line_start":837,"line_end":837,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":1222},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267405,"byte_end":267411,"line_start":840,"line_end":840,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::LockableCurrency::Moment","value":"type Moment;","parent":{"krate":0,"index":1220},"children":[],"decl_id":null,"docs":" The quantity used to denote time; usually just a `BlockNumber`.\n","sig":null,"attributes":[{"value":"/ The quantity used to denote time; usually just a `BlockNumber`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267331,"byte_end":267398,"line_start":839,"line_end":839,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267705,"byte_end":267713,"line_start":848,"line_end":848,"column_start":5,"column_end":13},"name":"set_lock","qualname":"::traits::LockableCurrency::set_lock","value":"fn (id: LockIdentifier, who: &AccountId, amount: Self::Balance, reasons: WithdrawReasons) -> ()","parent":{"krate":0,"index":1220},"children":[],"decl_id":null,"docs":" Create a new balance lock on account `who`.","sig":null,"attributes":[{"value":"/ Create a new balance lock on account `who`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267415,"byte_end":267462,"line_start":842,"line_end":842,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267464,"byte_end":267467,"line_start":843,"line_end":843,"column_start":2,"column_end":5}},{"value":"/ If the new lock is valid (i.e. not already expired), it will push the struct to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267469,"byte_end":267552,"line_start":844,"line_end":844,"column_start":2,"column_end":85}},{"value":"/ the `Locks` vec in storage. Note that you can lock more funds than a user has.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267554,"byte_end":267636,"line_start":845,"line_end":845,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267638,"byte_end":267641,"line_start":846,"line_end":846,"column_start":2,"column_end":5}},{"value":"/ If the lock `id` already exists, this will update it.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267643,"byte_end":267700,"line_start":847,"line_end":847,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268264,"byte_end":268275,"line_start":863,"line_end":863,"column_start":5,"column_end":16},"name":"extend_lock","qualname":"::traits::LockableCurrency::extend_lock","value":"fn (id: LockIdentifier, who: &AccountId, amount: Self::Balance, reasons: WithdrawReasons) -> ()","parent":{"krate":0,"index":1220},"children":[],"decl_id":null,"docs":" Changes a balance lock (selected by `id`) so that it becomes less liquid in all\n parameters or creates a new one if it does not exist.","sig":null,"attributes":[{"value":"/ Changes a balance lock (selected by `id`) so that it becomes less liquid in all","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267815,"byte_end":267898,"line_start":855,"line_end":855,"column_start":2,"column_end":85}},{"value":"/ parameters or creates a new one if it does not exist.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267900,"byte_end":267957,"line_start":856,"line_end":856,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267959,"byte_end":267962,"line_start":857,"line_end":857,"column_start":2,"column_end":5}},{"value":"/ Calling `extend_lock` on an existing lock `id` differs from `set_lock` in that it","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267964,"byte_end":268049,"line_start":858,"line_end":858,"column_start":2,"column_end":87}},{"value":"/ applies the most severe constraints of the two, while `set_lock` replaces the lock","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268051,"byte_end":268137,"line_start":859,"line_end":859,"column_start":2,"column_end":88}},{"value":"/ with the new parameters. As in, `extend_lock` will set:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268139,"byte_end":268198,"line_start":860,"line_end":860,"column_start":2,"column_end":61}},{"value":"/ - maximum `amount`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268200,"byte_end":268222,"line_start":861,"line_end":861,"column_start":2,"column_end":24}},{"value":"/ - bitwise mask of all `reasons`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268224,"byte_end":268259,"line_start":862,"line_end":862,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268410,"byte_end":268421,"line_start":871,"line_end":871,"column_start":5,"column_end":16},"name":"remove_lock","qualname":"::traits::LockableCurrency::remove_lock","value":"fn (id: LockIdentifier, who: &AccountId) -> ()","parent":{"krate":0,"index":1220},"children":[],"decl_id":null,"docs":" Remove an existing lock.\n","sig":null,"attributes":[{"value":"/ Remove an existing lock.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268377,"byte_end":268405,"line_start":870,"line_end":870,"column_start":2,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":1226},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268597,"byte_end":268612,"line_start":879,"line_end":879,"column_start":11,"column_end":26},"name":"VestingSchedule","qualname":"::traits::VestingSchedule","value":"VestingSchedule<AccountId>","parent":null,"children":[{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232}],"decl_id":null,"docs":" A vesting schedule over a currency. This allows a particular currency to have vesting limits\n applied to it.\n","sig":null,"attributes":[{"value":"/ A vesting schedule over a currency. This allows a particular currency to have vesting limits","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268471,"byte_end":268567,"line_start":877,"line_end":877,"column_start":1,"column_end":97}},{"value":"/ applied to it.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268568,"byte_end":268586,"line_start":878,"line_end":878,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":1228},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268701,"byte_end":268707,"line_start":881,"line_end":881,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::VestingSchedule::Moment","value":"type Moment;","parent":{"krate":0,"index":1226},"children":[],"decl_id":null,"docs":" The quantity used to denote time; usually just a `BlockNumber`.\n","sig":null,"attributes":[{"value":"/ The quantity used to denote time; usually just a `BlockNumber`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268627,"byte_end":268694,"line_start":880,"line_end":880,"column_start":2,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1229},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268765,"byte_end":268773,"line_start":884,"line_end":884,"column_start":7,"column_end":15},"name":"Currency","qualname":"::traits::VestingSchedule::Currency","value":"type Currency: Currency<AccountId>;","parent":{"krate":0,"index":1226},"children":[],"decl_id":null,"docs":" The currency that this schedule applies to.\n","sig":null,"attributes":[{"value":"/ The currency that this schedule applies to.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268711,"byte_end":268758,"line_start":883,"line_end":883,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268959,"byte_end":268974,"line_start":888,"line_end":888,"column_start":5,"column_end":20},"name":"vesting_balance","qualname":"::traits::VestingSchedule::vesting_balance","value":"fn (who: &AccountId) -> Option<<Self::Currency as Currency<AccountId>>::Balance>","parent":{"krate":0,"index":1226},"children":[],"decl_id":null,"docs":" Get the amount that is currently being vested and cannot be transferred out of this account.\n Returns `None` if the account has no vesting schedule.\n","sig":null,"attributes":[{"value":"/ Get the amount that is currently being vested and cannot be transferred out of this account.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268798,"byte_end":268894,"line_start":886,"line_end":886,"column_start":2,"column_end":98}},{"value":"/ Returns `None` if the account has no vesting schedule.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":268896,"byte_end":268954,"line_start":887,"line_end":887,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269358,"byte_end":269378,"line_start":898,"line_end":898,"column_start":5,"column_end":25},"name":"add_vesting_schedule","qualname":"::traits::VestingSchedule::add_vesting_schedule","value":"fn (who: &AccountId, locked: <Self::Currency as Currency<AccountId>>::Balance, per_block: <Self::Currency as Currency<AccountId>>::Balance, starting_block: Self::Moment) -> DispatchResult","parent":{"krate":0,"index":1226},"children":[],"decl_id":null,"docs":" Adds a vesting schedule to a given account.","sig":null,"attributes":[{"value":"/ Adds a vesting schedule to a given account.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269055,"byte_end":269102,"line_start":890,"line_end":890,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269104,"byte_end":269107,"line_start":891,"line_end":891,"column_start":2,"column_end":5}},{"value":"/ If there already exists a vesting schedule for the given account, an `Err` is returned","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269109,"byte_end":269199,"line_start":892,"line_end":892,"column_start":2,"column_end":92}},{"value":"/ and nothing is updated.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269201,"byte_end":269228,"line_start":893,"line_end":893,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269230,"byte_end":269233,"line_start":894,"line_end":894,"column_start":2,"column_end":5}},{"value":"/ Is a no-op if the amount to be vested is zero.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269235,"byte_end":269285,"line_start":895,"line_end":895,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269287,"byte_end":269290,"line_start":896,"line_end":896,"column_start":2,"column_end":5}},{"value":"/ NOTE: This doesn't alter the free balance of the account.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269292,"byte_end":269353,"line_start":897,"line_end":897,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269701,"byte_end":269724,"line_start":908,"line_end":908,"column_start":5,"column_end":28},"name":"remove_vesting_schedule","qualname":"::traits::VestingSchedule::remove_vesting_schedule","value":"fn (who: &AccountId) -> ()","parent":{"krate":0,"index":1226},"children":[],"decl_id":null,"docs":" Remove a vesting schedule for a given account.","sig":null,"attributes":[{"value":"/ Remove a vesting schedule for a given account.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269578,"byte_end":269628,"line_start":905,"line_end":905,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269630,"byte_end":269633,"line_start":906,"line_end":906,"column_start":2,"column_end":5}},{"value":"/ NOTE: This doesn't alter the free balance of the account.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269635,"byte_end":269696,"line_start":907,"line_end":907,"column_start":2,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2687},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270025,"byte_end":270043,"line_start":920,"line_end":920,"column_start":3,"column_end":21},"name":"TransactionPayment","qualname":"::traits::WithdrawReason::TransactionPayment","value":"WithdrawReason::TransactionPayment","parent":{"krate":0,"index":2686},"children":[],"decl_id":null,"docs":" In order to pay for (system) transaction costs.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2690},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270098,"byte_end":270106,"line_start":922,"line_end":922,"column_start":3,"column_end":11},"name":"Transfer","qualname":"::traits::WithdrawReason::Transfer","value":"WithdrawReason::Transfer","parent":{"krate":0,"index":2686},"children":[],"decl_id":null,"docs":" In order to transfer ownership.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2693},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270196,"byte_end":270203,"line_start":924,"line_end":924,"column_start":3,"column_end":10},"name":"Reserve","qualname":"::traits::WithdrawReason::Reserve","value":"WithdrawReason::Reserve","parent":{"krate":0,"index":2686},"children":[],"decl_id":null,"docs":" In order to reserve some funds for a later return or repatriation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2696},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270274,"byte_end":270277,"line_start":926,"line_end":926,"column_start":3,"column_end":6},"name":"Fee","qualname":"::traits::WithdrawReason::Fee","value":"WithdrawReason::Fee","parent":{"krate":0,"index":2686},"children":[],"decl_id":null,"docs":" In order to pay some other (higher-level) fees.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2699},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270355,"byte_end":270358,"line_start":928,"line_end":928,"column_start":3,"column_end":6},"name":"Tip","qualname":"::traits::WithdrawReason::Tip","value":"WithdrawReason::Tip","parent":{"krate":0,"index":2686},"children":[],"decl_id":null,"docs":" In order to tip a validator for transaction inclusion.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2686},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269952,"byte_end":269966,"line_start":918,"line_end":918,"column_start":8,"column_end":22},"name":"WithdrawReason","qualname":"::traits::WithdrawReason","value":"WithdrawReason::{TransactionPayment, Transfer, Reserve, Fee, Tip}","parent":null,"children":[{"krate":0,"index":2687},{"krate":0,"index":2690},{"krate":0,"index":2693},{"krate":0,"index":2696},{"krate":0,"index":2699}],"decl_id":null,"docs":" Reason for moving funds out of an account.\n","sig":null,"attributes":[{"value":"repr(i8)","span":{"file_name":"<::bitmask::bitmask macros>","byte_start":10008160,"byte_end":10008174,"line_start":150,"line_end":150,"column_start":5,"column_end":19}},{"value":"allow(dead_code)","span":{"file_name":"<::bitmask::bitmask macros>","byte_start":10008289,"byte_end":10008310,"line_start":151,"line_end":151,"column_start":56,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":2731},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":269843,"byte_end":269858,"line_start":914,"line_end":914,"column_start":11,"column_end":26},"name":"WithdrawReasons","qualname":"::traits::WithdrawReasons","value":"WithdrawReasons {  }","parent":null,"children":[{"krate":0,"index":2732}],"decl_id":null,"docs":" Reasons for moving funds out of an account.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"<::bitmask::bitmask macros>","byte_start":10008536,"byte_end":10008557,"line_start":155,"line_end":155,"column_start":56,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":1233},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270389,"byte_end":270393,"line_start":932,"line_end":932,"column_start":11,"column_end":15},"name":"Time","qualname":"::traits::Time","value":"Time","parent":null,"children":[{"krate":0,"index":1234},{"krate":0,"index":1235}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1234},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270402,"byte_end":270408,"line_start":933,"line_end":933,"column_start":7,"column_end":13},"name":"Moment","qualname":"::traits::Time::Moment","value":"type Moment: AtLeast32Bit + Parameter + Default + Copy;","parent":{"krate":0,"index":1233},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270458,"byte_end":270461,"line_start":935,"line_end":935,"column_start":5,"column_end":8},"name":"now","qualname":"::traits::Time::now","value":"fn () -> Self::Moment","parent":{"krate":0,"index":1233},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1236},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270528,"byte_end":270536,"line_start":939,"line_end":939,"column_start":11,"column_end":19},"name":"UnixTime","qualname":"::traits::UnixTime","value":"UnixTime","parent":null,"children":[{"krate":0,"index":1237}],"decl_id":null,"docs":" Trait to deal with unix time.\n","sig":null,"attributes":[{"value":"/ Trait to deal with unix time.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270484,"byte_end":270517,"line_start":938,"line_end":938,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270596,"byte_end":270599,"line_start":941,"line_end":941,"column_start":5,"column_end":8},"name":"now","qualname":"::traits::UnixTime::now","value":"fn () -> core::time::Duration","parent":{"krate":0,"index":1236},"children":[],"decl_id":null,"docs":" Return duration since `SystemTime::UNIX_EPOCH`.\n","sig":null,"attributes":[{"value":"/ Return duration since `SystemTime::UNIX_EPOCH`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270540,"byte_end":270591,"line_start":940,"line_end":940,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271022,"byte_end":271028,"line_start":956,"line_end":956,"column_start":9,"column_end":15},"name":"except","qualname":"<WithdrawReasons>::except","value":"fn (one: WithdrawReason) -> WithdrawReasons","parent":null,"children":[],"decl_id":null,"docs":" Choose all variants except for `one`.","sig":null,"attributes":[{"value":"/ Choose all variants except for `one`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270654,"byte_end":270695,"line_start":945,"line_end":945,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270697,"byte_end":270700,"line_start":946,"line_end":946,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270702,"byte_end":270713,"line_start":947,"line_end":947,"column_start":2,"column_end":13}},{"value":"/ # use frame_support::traits::{WithdrawReason, WithdrawReasons};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270715,"byte_end":270782,"line_start":948,"line_end":948,"column_start":2,"column_end":69}},{"value":"/ # fn main() {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270784,"byte_end":270801,"line_start":949,"line_end":949,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270803,"byte_end":270818,"line_start":950,"line_end":950,"column_start":2,"column_end":17}},{"value":"/ \tWithdrawReason::Fee | WithdrawReason::Transfer | WithdrawReason::Reserve | WithdrawReason::Tip,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270820,"byte_end":270920,"line_start":951,"line_end":951,"column_start":2,"column_end":102}},{"value":"/ \tWithdrawReasons::except(WithdrawReason::TransactionPayment),","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270922,"byte_end":270987,"line_start":952,"line_end":952,"column_start":2,"column_end":67}},{"value":"/\t);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270989,"byte_end":270995,"line_start":953,"line_end":953,"column_start":2,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270997,"byte_end":271004,"line_start":954,"line_end":954,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271006,"byte_end":271013,"line_start":955,"line_end":955,"column_start":2,"column_end":9}}]},{"kind":"Trait","id":{"krate":0,"index":1240},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271224,"byte_end":271237,"line_start":964,"line_end":964,"column_start":11,"column_end":24},"name":"ChangeMembers","qualname":"::traits::ChangeMembers","value":"ChangeMembers<AccountId: Clone + Ord>","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246}],"decl_id":null,"docs":" Trait for type that can handle incremental changes to a set of account IDs.\n","sig":null,"attributes":[{"value":"/ Trait for type that can handle incremental changes to a set of account IDs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271134,"byte_end":271213,"line_start":963,"line_end":963,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271470,"byte_end":271484,"line_start":969,"line_end":969,"column_start":5,"column_end":19},"name":"change_members","qualname":"::traits::ChangeMembers::change_members","value":"fn (incoming: &[AccountId], outgoing: &[AccountId], mut new: Vec<AccountId>) -> ()","parent":{"krate":0,"index":1240},"children":[],"decl_id":null,"docs":" A number of members `incoming` just joined the set and replaced some `outgoing` ones. The\n new set is given by `new`, and need not be sorted.","sig":null,"attributes":[{"value":"/ A number of members `incoming` just joined the set and replaced some `outgoing` ones. The","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271265,"byte_end":271358,"line_start":965,"line_end":965,"column_start":2,"column_end":95}},{"value":"/ new set is given by `new`, and need not be sorted.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271360,"byte_end":271414,"line_start":966,"line_end":966,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271416,"byte_end":271419,"line_start":967,"line_end":967,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271421,"byte_end":271465,"line_start":968,"line_end":968,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271958,"byte_end":271979,"line_start":980,"line_end":980,"column_start":5,"column_end":26},"name":"change_members_sorted","qualname":"::traits::ChangeMembers::change_members_sorted","value":"fn (incoming: &[AccountId], outgoing: &[AccountId], sorted_new: &[AccountId]) -> ()","parent":{"krate":0,"index":1240},"children":[],"decl_id":null,"docs":" A number of members `_incoming` just joined the set and replaced some `_outgoing` ones. The\n new set is thus given by `sorted_new` and **must be sorted**.","sig":null,"attributes":[{"value":"/ A number of members `_incoming` just joined the set and replaced some `_outgoing` ones. The","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271649,"byte_end":271744,"line_start":974,"line_end":974,"column_start":2,"column_end":97}},{"value":"/ new set is thus given by `sorted_new` and **must be sorted**.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271746,"byte_end":271811,"line_start":975,"line_end":975,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271813,"byte_end":271816,"line_start":976,"line_end":976,"column_start":2,"column_end":5}},{"value":"/ NOTE: This is the only function that needs to be implemented in `ChangeMembers`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271818,"byte_end":271902,"line_start":977,"line_end":977,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271904,"byte_end":271907,"line_start":978,"line_end":978,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":271909,"byte_end":271953,"line_start":979,"line_end":979,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":272256,"byte_end":272274,"line_start":990,"line_end":990,"column_start":5,"column_end":23},"name":"set_members_sorted","qualname":"::traits::ChangeMembers::set_members_sorted","value":"fn (new_members: &[AccountId], old_members: &[AccountId]) -> ()","parent":{"krate":0,"index":1240},"children":[],"decl_id":null,"docs":" Set the new members; they **must already be sorted**. This will compute the diff and use it to\n call `change_members_sorted`.","sig":null,"attributes":[{"value":"/ Set the new members; they **must already be sorted**. This will compute the diff and use it to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":272067,"byte_end":272165,"line_start":986,"line_end":986,"column_start":2,"column_end":100}},{"value":"/ call `change_members_sorted`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":272167,"byte_end":272200,"line_start":987,"line_end":987,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":272202,"byte_end":272205,"line_start":988,"line_end":988,"column_start":2,"column_end":5}},{"value":"/ This resets any previous value of prime.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":272207,"byte_end":272251,"line_start":989,"line_end":989,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":272632,"byte_end":272652,"line_start":997,"line_end":997,"column_start":5,"column_end":25},"name":"compute_members_diff","qualname":"::traits::ChangeMembers::compute_members_diff","value":"fn (new_members: &[AccountId], old_members: &[AccountId]) -> (Vec<AccountId>, Vec<AccountId>)","parent":{"krate":0,"index":1240},"children":[],"decl_id":null,"docs":" Set the new members; they **must already be sorted**. This will compute the diff and use it to\n call `change_members_sorted`.\n","sig":null,"attributes":[{"value":"/ Set the new members; they **must already be sorted**. This will compute the diff and use it to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":272494,"byte_end":272592,"line_start":995,"line_end":995,"column_start":2,"column_end":100}},{"value":"/ call `change_members_sorted`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":272594,"byte_end":272627,"line_start":996,"line_end":996,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":273514,"byte_end":273523,"line_start":1032,"line_end":1032,"column_start":5,"column_end":14},"name":"set_prime","qualname":"::traits::ChangeMembers::set_prime","value":"fn (_prime: Option<AccountId>) -> ()","parent":{"krate":0,"index":1240},"children":[],"decl_id":null,"docs":" Set the prime member.\n","sig":null,"attributes":[{"value":"/ Set the prime member.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":273484,"byte_end":273509,"line_start":1031,"line_end":1031,"column_start":2,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":1253},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":273882,"byte_end":273899,"line_start":1045,"line_end":1045,"column_start":11,"column_end":28},"name":"InitializeMembers","qualname":"::traits::InitializeMembers","value":"InitializeMembers<AccountId>","parent":null,"children":[{"krate":0,"index":1255}],"decl_id":null,"docs":" Trait for type that can handle the initialization of account IDs at genesis.\n","sig":null,"attributes":[{"value":"/ Trait for type that can handle the initialization of account IDs at genesis.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":273791,"byte_end":273871,"line_start":1044,"line_end":1044,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":273969,"byte_end":273987,"line_start":1047,"line_end":1047,"column_start":5,"column_end":23},"name":"initialize_members","qualname":"::traits::InitializeMembers::initialize_members","value":"fn (members: &[AccountId]) -> ()","parent":{"krate":0,"index":1253},"children":[],"decl_id":null,"docs":" Initialize the members to the given `members`.\n","sig":null,"attributes":[{"value":"/ Initialize the members to the given `members`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":273914,"byte_end":273964,"line_start":1046,"line_end":1046,"column_start":2,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1259},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274148,"byte_end":274158,"line_start":1055,"line_end":1055,"column_start":11,"column_end":21},"name":"Randomness","qualname":"::traits::Randomness","value":"Randomness<Output>","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274635,"byte_end":274641,"line_start":1065,"line_end":1065,"column_start":5,"column_end":11},"name":"random","qualname":"::traits::Randomness::random","value":"fn (subject: &[u8]) -> Output","parent":{"krate":0,"index":1259},"children":[],"decl_id":null,"docs":" Get a \"random\" value","sig":null,"attributes":[{"value":"/ Get a \"random\" value","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274170,"byte_end":274194,"line_start":1056,"line_end":1056,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274196,"byte_end":274199,"line_start":1057,"line_end":1057,"column_start":2,"column_end":5}},{"value":"/ Being a deterministic blockchain, real randomness is difficult to come by. This gives you","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274201,"byte_end":274294,"line_start":1058,"line_end":1058,"column_start":2,"column_end":95}},{"value":"/ something that approximates it. At best, this will be randomness which was","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274296,"byte_end":274374,"line_start":1059,"line_end":1059,"column_start":2,"column_end":80}},{"value":"/ hard to predict a long time ago, but that has become easy to predict recently.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274376,"byte_end":274458,"line_start":1060,"line_end":1060,"column_start":2,"column_end":84}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274460,"byte_end":274463,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ `subject` is a context identifier and allows you to get a","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274465,"byte_end":274526,"line_start":1062,"line_end":1062,"column_start":2,"column_end":63}},{"value":"/ different result to other callers of this function; use it like","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274528,"byte_end":274595,"line_start":1063,"line_end":1063,"column_start":2,"column_end":69}},{"value":"/ `random(&b\"my context\"[..])`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274597,"byte_end":274630,"line_start":1064,"line_end":1064,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274934,"byte_end":274945,"line_start":1072,"line_end":1072,"column_start":5,"column_end":16},"name":"random_seed","qualname":"::traits::Randomness::random_seed","value":"fn () -> Output","parent":{"krate":0,"index":1259},"children":[],"decl_id":null,"docs":" Get the basic random seed.","sig":null,"attributes":[{"value":"/ Get the basic random seed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274671,"byte_end":274701,"line_start":1067,"line_end":1067,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274703,"byte_end":274706,"line_start":1068,"line_end":1068,"column_start":2,"column_end":5}},{"value":"/ In general you won't want to use this, but rather `Self::random` which allows you to give a","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274708,"byte_end":274803,"line_start":1069,"line_end":1069,"column_start":2,"column_end":97}},{"value":"/ subject for the random result and whose value will be independently low-influence random","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274805,"byte_end":274897,"line_start":1070,"line_end":1070,"column_start":2,"column_end":94}},{"value":"/ from any other such seeds.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":274899,"byte_end":274929,"line_start":1071,"line_end":1071,"column_start":2,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":1266},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275391,"byte_end":275399,"line_start":1086,"line_end":1086,"column_start":11,"column_end":19},"name":"Lateness","qualname":"::traits::Lateness","value":"Lateness<N>","parent":null,"children":[{"krate":0,"index":1268}],"decl_id":null,"docs":" Trait to be used by block producing consensus engine modules to determine\n how late the current block is (e.g. in a slot-based proposal mechanism how\n many slots were skipped since the previous block).\n","sig":null,"attributes":[{"value":"/ Trait to be used by block producing consensus engine modules to determine","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275169,"byte_end":275246,"line_start":1083,"line_end":1083,"column_start":1,"column_end":78}},{"value":"/ how late the current block is (e.g. in a slot-based proposal mechanism how","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275247,"byte_end":275325,"line_start":1084,"line_end":1084,"column_start":1,"column_end":79}},{"value":"/ many slots were skipped since the previous block).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275326,"byte_end":275380,"line_start":1085,"line_end":1085,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275502,"byte_end":275510,"line_start":1089,"line_end":1089,"column_start":5,"column_end":13},"name":"lateness","qualname":"::traits::Lateness::lateness","value":"fn (&self) -> N","parent":{"krate":0,"index":1266},"children":[],"decl_id":null,"docs":" Returns a generic measure of how late the current block is compared to\n its parent.\n","sig":null,"attributes":[{"value":"/ Returns a generic measure of how late the current block is compared to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275406,"byte_end":275480,"line_start":1087,"line_end":1087,"column_start":2,"column_end":76}},{"value":"/ its parent.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275482,"byte_end":275497,"line_start":1088,"line_end":1088,"column_start":2,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":1272},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275815,"byte_end":275836,"line_start":1100,"line_end":1100,"column_start":11,"column_end":32},"name":"ValidatorRegistration","qualname":"::traits::ValidatorRegistration","value":"ValidatorRegistration<ValidatorId>","parent":null,"children":[{"krate":0,"index":1274}],"decl_id":null,"docs":" Implementors of this trait provide information about whether or not some validator has\n been registered with them. The [Session module](../../pallet_session/index.html) is an implementor.\n","sig":null,"attributes":[{"value":"/ Implementors of this trait provide information about whether or not some validator has","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275610,"byte_end":275700,"line_start":1098,"line_end":1098,"column_start":1,"column_end":91}},{"value":"/ been registered with them. The [Session module](../../pallet_session/index.html) is an implementor.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275701,"byte_end":275804,"line_start":1099,"line_end":1099,"column_start":1,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275965,"byte_end":275978,"line_start":1103,"line_end":1103,"column_start":5,"column_end":18},"name":"is_registered","qualname":"::traits::ValidatorRegistration::is_registered","value":"fn (id: &ValidatorId) -> bool","parent":{"krate":0,"index":1272},"children":[],"decl_id":null,"docs":" Returns true if the provided validator ID has been registered with the implementing runtime\n module\n","sig":null,"attributes":[{"value":"/ Returns true if the provided validator ID has been registered with the implementing runtime","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275853,"byte_end":275948,"line_start":1101,"line_end":1101,"column_start":2,"column_end":97}},{"value":"/ module","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":275950,"byte_end":275960,"line_start":1102,"line_end":1102,"column_start":2,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1275},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276206,"byte_end":276219,"line_start":1109,"line_end":1109,"column_start":11,"column_end":24},"name":"ModuleToIndex","qualname":"::traits::ModuleToIndex","value":"ModuleToIndex","parent":null,"children":[{"krate":0,"index":1276}],"decl_id":null,"docs":" Something that can convert a given module into the index of the module in the runtime.","sig":null,"attributes":[{"value":"/ Something that can convert a given module into the index of the module in the runtime.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276009,"byte_end":276099,"line_start":1106,"line_end":1106,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276100,"byte_end":276103,"line_start":1107,"line_end":1107,"column_start":1,"column_end":4}},{"value":"/ The index of a module is determined by the position it appears in `construct_runtime!`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276104,"byte_end":276195,"line_start":1108,"line_end":1108,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276275,"byte_end":276290,"line_start":1111,"line_end":1111,"column_start":5,"column_end":20},"name":"module_to_index","qualname":"::traits::ModuleToIndex::module_to_index","value":"fn <M> () -> Option<usize>","parent":{"krate":0,"index":1275},"children":[],"decl_id":null,"docs":" Convert the given module `M` into an index.\n","sig":null,"attributes":[{"value":"/ Convert the given module `M` into an index.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276223,"byte_end":276270,"line_start":1110,"line_end":1110,"column_start":2,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":2848},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276532,"byte_end":276544,"line_start":1120,"line_end":1120,"column_start":12,"column_end":24},"name":"CallMetadata","qualname":"::traits::CallMetadata","value":"CallMetadata { function_name, pallet_name }","parent":null,"children":[{"krate":0,"index":2849},{"krate":0,"index":2850}],"decl_id":null,"docs":" The function and pallet name of the Call.\n","sig":null,"attributes":[{"value":"/ The function and pallet name of the Call.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276420,"byte_end":276465,"line_start":1118,"line_end":1118,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2849},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276579,"byte_end":276592,"line_start":1122,"line_end":1122,"column_start":6,"column_end":19},"name":"function_name","qualname":"::traits::CallMetadata::function_name","value":"&'static str","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" Name of the function.\n","sig":null,"attributes":[{"value":"/ Name of the function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276548,"byte_end":276573,"line_start":1121,"line_end":1121,"column_start":2,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2850},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276668,"byte_end":276679,"line_start":1124,"line_end":1124,"column_start":6,"column_end":17},"name":"pallet_name","qualname":"::traits::CallMetadata::pallet_name","value":"&'static str","parent":{"krate":0,"index":2848},"children":[],"decl_id":null,"docs":" Name of the pallet to which the function belongs.\n","sig":null,"attributes":[{"value":"/ Name of the pallet to which the function belongs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276609,"byte_end":276662,"line_start":1123,"line_end":1123,"column_start":2,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":1281},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276748,"byte_end":276759,"line_start":1128,"line_end":1128,"column_start":11,"column_end":22},"name":"GetCallName","qualname":"::traits::GetCallName","value":"GetCallName","parent":null,"children":[{"krate":0,"index":1282},{"krate":0,"index":1283}],"decl_id":null,"docs":" Gets the function name of the Call.\n","sig":null,"attributes":[{"value":"/ Gets the function name of the Call.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276698,"byte_end":276737,"line_start":1127,"line_end":1127,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276798,"byte_end":276812,"line_start":1130,"line_end":1130,"column_start":5,"column_end":19},"name":"get_call_names","qualname":"::traits::GetCallName::get_call_names","value":"fn () -> &'static [&'static str]","parent":{"krate":0,"index":1281},"children":[],"decl_id":null,"docs":" Return all function names.\n","sig":null,"attributes":[{"value":"/ Return all function names.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276763,"byte_end":276793,"line_start":1129,"line_end":1129,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276890,"byte_end":276903,"line_start":1132,"line_end":1132,"column_start":5,"column_end":18},"name":"get_call_name","qualname":"::traits::GetCallName::get_call_name","value":"fn (&self) -> &'static str","parent":{"krate":0,"index":1281},"children":[],"decl_id":null,"docs":" Return the function name of the Call.\n","sig":null,"attributes":[{"value":"/ Return the function name of the Call.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276844,"byte_end":276885,"line_start":1131,"line_end":1131,"column_start":2,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":1284},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277009,"byte_end":277024,"line_start":1136,"line_end":1136,"column_start":11,"column_end":26},"name":"GetCallMetadata","qualname":"::traits::GetCallMetadata","value":"GetCallMetadata","parent":null,"children":[{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287}],"decl_id":null,"docs":" Gets the metadata for the Call - function name and pallet name.\n","sig":null,"attributes":[{"value":"/ Gets the metadata for the Call - function name and pallet name.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":276931,"byte_end":276998,"line_start":1135,"line_end":1135,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277061,"byte_end":277077,"line_start":1138,"line_end":1138,"column_start":5,"column_end":21},"name":"get_module_names","qualname":"::traits::GetCallMetadata::get_module_names","value":"fn () -> &'static [&'static str]","parent":{"krate":0,"index":1284},"children":[],"decl_id":null,"docs":" Return all module names.\n","sig":null,"attributes":[{"value":"/ Return all module names.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277028,"byte_end":277056,"line_start":1137,"line_end":1137,"column_start":2,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277167,"byte_end":277181,"line_start":1140,"line_end":1140,"column_start":5,"column_end":19},"name":"get_call_names","qualname":"::traits::GetCallMetadata::get_call_names","value":"fn (module: &str) -> &'static [&'static str]","parent":{"krate":0,"index":1284},"children":[],"decl_id":null,"docs":" Return all function names for the given `module`.\n","sig":null,"attributes":[{"value":"/ Return all function names for the given `module`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277109,"byte_end":277162,"line_start":1139,"line_end":1139,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277309,"byte_end":277326,"line_start":1142,"line_end":1142,"column_start":5,"column_end":22},"name":"get_call_metadata","qualname":"::traits::GetCallMetadata::get_call_metadata","value":"fn (&self) -> CallMetadata","parent":{"krate":0,"index":1284},"children":[],"decl_id":null,"docs":" Return a [`CallMetadata`], containing function and pallet name of the Call.\n","sig":null,"attributes":[{"value":"/ Return a [`CallMetadata`], containing function and pallet name of the Call.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277225,"byte_end":277304,"line_start":1141,"line_end":1141,"column_start":2,"column_end":81}}]},{"kind":"Trait","id":{"krate":0,"index":2864},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277521,"byte_end":277531,"line_start":1148,"line_end":1148,"column_start":11,"column_end":21},"name":"OnFinalize","qualname":"::traits::OnFinalize","value":"OnFinalize<BlockNumber>","parent":null,"children":[{"krate":0,"index":2866}],"decl_id":null,"docs":" The block finalization trait. Implementing this lets you express what should happen\n for your module when the block is ending.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277622,"byte_end":277633,"line_start":1150,"line_end":1150,"column_start":5,"column_end":16},"name":"on_finalize","qualname":"::traits::OnFinalize::on_finalize","value":"fn (_n: BlockNumber) -> ()","parent":{"krate":0,"index":2864},"children":[],"decl_id":null,"docs":" The block is being finalized. Implement to have something happen.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1288},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277853,"byte_end":277865,"line_start":1155,"line_end":1155,"column_start":11,"column_end":23},"name":"OnInitialize","qualname":"::traits::OnInitialize","value":"OnInitialize<BlockNumber>","parent":null,"children":[{"krate":0,"index":1290}],"decl_id":null,"docs":" The block initialization trait. Implementing this lets you express what should happen\n for your module when the block is beginning (right before the first extrinsic is executed).\n","sig":null,"attributes":[{"value":"/ The block initialization trait. Implementing this lets you express what should happen","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277657,"byte_end":277746,"line_start":1153,"line_end":1153,"column_start":1,"column_end":90}},{"value":"/ for your module when the block is beginning (right before the first extrinsic is executed).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277747,"byte_end":277842,"line_start":1154,"line_end":1154,"column_start":1,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":278024,"byte_end":278037,"line_start":1159,"line_end":1159,"column_start":5,"column_end":18},"name":"on_initialize","qualname":"::traits::OnInitialize::on_initialize","value":"fn (_n: BlockNumber) -> crate::weights::Weight","parent":{"krate":0,"index":1288},"children":[],"decl_id":null,"docs":" The block is being initialized. Implement to have something happen.","sig":null,"attributes":[{"value":"/ The block is being initialized. Implement to have something happen.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277882,"byte_end":277953,"line_start":1156,"line_end":1156,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277955,"byte_end":277958,"line_start":1157,"line_end":1157,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed in the block.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":277960,"byte_end":278019,"line_start":1158,"line_end":1158,"column_start":2,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":1291},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":278538,"byte_end":278554,"line_start":1173,"line_end":1173,"column_start":11,"column_end":27},"name":"OnRuntimeUpgrade","qualname":"::traits::OnRuntimeUpgrade","value":"OnRuntimeUpgrade","parent":null,"children":[{"krate":0,"index":1292}],"decl_id":null,"docs":" The runtime upgrade trait. Implementing this lets you express what should happen\n when the runtime upgrades, and changes may need to occur to your module.\n","sig":null,"attributes":[{"value":"/ The runtime upgrade trait. Implementing this lets you express what should happen","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":278366,"byte_end":278450,"line_start":1171,"line_end":1171,"column_start":1,"column_end":85}},{"value":"/ when the runtime upgrades, and changes may need to occur to your module.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":278451,"byte_end":278527,"line_start":1172,"line_end":1172,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":278665,"byte_end":278683,"line_start":1177,"line_end":1177,"column_start":5,"column_end":23},"name":"on_runtime_upgrade","qualname":"::traits::OnRuntimeUpgrade::on_runtime_upgrade","value":"fn () -> crate::weights::Weight","parent":{"krate":0,"index":1291},"children":[],"decl_id":null,"docs":" Perform a module upgrade.","sig":null,"attributes":[{"value":"/ Perform a module upgrade.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":278558,"byte_end":278587,"line_start":1174,"line_end":1174,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":278589,"byte_end":278592,"line_start":1175,"line_end":1175,"column_start":2,"column_end":5}},{"value":"/ Return the non-negotiable weight consumed for runtime upgrade.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":278594,"byte_end":278660,"line_start":1176,"line_end":1176,"column_start":2,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":4510},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":279480,"byte_end":279494,"line_start":1200,"line_end":1200,"column_start":11,"column_end":25},"name":"OffchainWorker","qualname":"::traits::OffchainWorker","value":"OffchainWorker<BlockNumber>","parent":null,"children":[{"krate":0,"index":4512}],"decl_id":null,"docs":" Off-chain computation trait.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4512},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":279850,"byte_end":279865,"line_start":1207,"line_end":1207,"column_start":5,"column_end":20},"name":"offchain_worker","qualname":"::traits::OffchainWorker::offchain_worker","value":"fn (_n: BlockNumber) -> ()","parent":{"krate":0,"index":4510},"children":[],"decl_id":null,"docs":" This function is being called after every block import (when fully synced).","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1293},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":279897,"byte_end":279905,"line_start":1210,"line_end":1210,"column_start":9,"column_end":17},"name":"schedule","qualname":"::traits::schedule","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","parent":null,"children":[{"krate":0,"index":1294},{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1307}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1295},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280165,"byte_end":280171,"line_start":1216,"line_end":1216,"column_start":11,"column_end":17},"name":"Period","qualname":"::traits::schedule::Period","value":"(BlockNumber, u32)","parent":null,"children":[],"decl_id":null,"docs":" Information relating to the period of a scheduled task. First item is the length of the\n period and the second is the number of times it should be executed in total before the task\n is considered finished and removed.\n","sig":null,"attributes":[{"value":"/ Information relating to the period of a scheduled task. First item is the length of the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":279925,"byte_end":280016,"line_start":1213,"line_end":1213,"column_start":2,"column_end":93}},{"value":"/ period and the second is the number of times it should be executed in total before the task","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280018,"byte_end":280113,"line_start":1214,"line_end":1214,"column_start":2,"column_end":97}},{"value":"/ is considered finished and removed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280115,"byte_end":280154,"line_start":1215,"line_end":1215,"column_start":2,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1297},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280339,"byte_end":280347,"line_start":1220,"line_end":1220,"column_start":11,"column_end":19},"name":"Priority","qualname":"::traits::schedule::Priority","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Priority with which a call is scheduled. It's just a linear amount with lowest values meaning\n higher priority.\n","sig":null,"attributes":[{"value":"/ Priority with which a call is scheduled. It's just a linear amount with lowest values meaning","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280209,"byte_end":280306,"line_start":1218,"line_end":1218,"column_start":2,"column_end":99}},{"value":"/ higher priority.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280308,"byte_end":280328,"line_start":1219,"line_end":1219,"column_start":2,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":1298},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280503,"byte_end":280518,"line_start":1224,"line_end":1224,"column_start":12,"column_end":27},"name":"HIGHEST_PRORITY","qualname":"::traits::schedule::HIGHEST_PRORITY","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" The highest priority. We invert the value so that normal sorting will place the highest\n priority at the beginning of the list.\n","sig":null,"attributes":[{"value":"/ The highest priority. We invert the value so that normal sorting will place the highest","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280356,"byte_end":280447,"line_start":1222,"line_end":1222,"column_start":2,"column_end":93}},{"value":"/ priority at the beginning of the list.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280449,"byte_end":280491,"line_start":1223,"line_end":1223,"column_start":2,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":1299},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280700,"byte_end":280713,"line_start":1227,"line_end":1227,"column_start":12,"column_end":25},"name":"HARD_DEADLINE","qualname":"::traits::schedule::HARD_DEADLINE","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" Anything of this value or lower will definitely be scheduled on the block that they ask for, even\n if it breaches the `MaximumWeight` limitation.\n","sig":null,"attributes":[{"value":"/ Anything of this value or lower will definitely be scheduled on the block that they ask for, even","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280535,"byte_end":280636,"line_start":1225,"line_end":1225,"column_start":2,"column_end":103}},{"value":"/ if it breaches the `MaximumWeight` limitation.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280638,"byte_end":280688,"line_start":1226,"line_end":1226,"column_start":2,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":1300},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280801,"byte_end":280815,"line_start":1229,"line_end":1229,"column_start":12,"column_end":26},"name":"LOWEST_PRORITY","qualname":"::traits::schedule::LOWEST_PRORITY","value":"Priority","parent":null,"children":[],"decl_id":null,"docs":" The lowest priority. Most stuff should be around here.\n","sig":null,"attributes":[{"value":"/ The lowest priority. Most stuff should be around here.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280731,"byte_end":280789,"line_start":1228,"line_end":1228,"column_start":2,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":1301},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280890,"byte_end":280894,"line_start":1232,"line_end":1232,"column_start":12,"column_end":16},"name":"Anon","qualname":"::traits::schedule::Anon","value":"Anon<BlockNumber, Call>","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306}],"decl_id":null,"docs":" A type that can be used as a scheduler.\n","sig":null,"attributes":[{"value":"/ A type that can be used as a scheduler.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280835,"byte_end":280878,"line_start":1231,"line_end":1231,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1304},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280989,"byte_end":280996,"line_start":1234,"line_end":1234,"column_start":8,"column_end":15},"name":"Address","qualname":"::traits::schedule::Anon::Address","value":"type Address: Codec + Clone + Eq + EncodeLike + Debug;","parent":{"krate":0,"index":1301},"children":[],"decl_id":null,"docs":" An address which can be used for removing a scheduled task.\n","sig":null,"attributes":[{"value":"/ An address which can be used for removing a scheduled task.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":280918,"byte_end":280981,"line_start":1233,"line_end":1233,"column_start":3,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1305},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281190,"byte_end":281198,"line_start":1241,"line_end":1241,"column_start":6,"column_end":14},"name":"schedule","qualname":"::traits::schedule::Anon::schedule","value":"fn (when: BlockNumber, maybe_periodic: Option<Period<BlockNumber>>, priority: Priority, call: Call) -> Self::Address","parent":{"krate":0,"index":1301},"children":[],"decl_id":null,"docs":" Schedule a one-off dispatch to happen at the beginning of some block in the future.","sig":null,"attributes":[{"value":"/ Schedule a one-off dispatch to happen at the beginning of some block in the future.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281042,"byte_end":281129,"line_start":1236,"line_end":1236,"column_start":3,"column_end":90}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281132,"byte_end":281135,"line_start":1237,"line_end":1237,"column_start":3,"column_end":6}},{"value":"/ This is not named.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281138,"byte_end":281160,"line_start":1238,"line_end":1238,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281163,"byte_end":281166,"line_start":1239,"line_end":1239,"column_start":3,"column_end":6}},{"value":"/ Infallible.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281169,"byte_end":281184,"line_start":1240,"line_end":1240,"column_start":3,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281864,"byte_end":281870,"line_start":1258,"line_end":1258,"column_start":6,"column_end":12},"name":"cancel","qualname":"::traits::schedule::Anon::cancel","value":"fn (address: Self::Address) -> Result<(), ()>","parent":{"krate":0,"index":1301},"children":[],"decl_id":null,"docs":" Cancel a scheduled task. If periodic, then it will cancel all further instances of that,\n also.","sig":null,"attributes":[{"value":"/ Cancel a scheduled task. If periodic, then it will cancel all further instances of that,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281332,"byte_end":281424,"line_start":1248,"line_end":1248,"column_start":3,"column_end":95}},{"value":"/ also.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281427,"byte_end":281436,"line_start":1249,"line_end":1249,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281439,"byte_end":281442,"line_start":1250,"line_end":1250,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `address` is invalid.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281445,"byte_end":281498,"line_start":1251,"line_end":1251,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281501,"byte_end":281504,"line_start":1252,"line_end":1252,"column_start":3,"column_end":6}},{"value":"/ NOTE: This guaranteed to work only *before* the point that it is due to be executed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281507,"byte_end":281595,"line_start":1253,"line_end":1253,"column_start":3,"column_end":91}},{"value":"/ If it ends up being delayed beyond the point of execution, then it cannot be cancelled.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281598,"byte_end":281689,"line_start":1254,"line_end":1254,"column_start":3,"column_end":94}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281692,"byte_end":281695,"line_start":1255,"line_end":1255,"column_start":3,"column_end":6}},{"value":"/ NOTE2: This will not work to cancel periodic tasks after their initial execution. For","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281698,"byte_end":281787,"line_start":1256,"line_end":1256,"column_start":3,"column_end":92}},{"value":"/ that, you must name the task explicitly using the `Named` trait.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281790,"byte_end":281858,"line_start":1257,"line_end":1257,"column_start":3,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":1307},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281974,"byte_end":281979,"line_start":1262,"line_end":1262,"column_start":12,"column_end":17},"name":"Named","qualname":"::traits::schedule::Named","value":"Named<BlockNumber, Call>","parent":null,"children":[{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312}],"decl_id":null,"docs":" A type that can be used as a scheduler.\n","sig":null,"attributes":[{"value":"/ A type that can be used as a scheduler.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":281919,"byte_end":281962,"line_start":1261,"line_end":1261,"column_start":2,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1310},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282074,"byte_end":282081,"line_start":1264,"line_end":1264,"column_start":8,"column_end":15},"name":"Address","qualname":"::traits::schedule::Named::Address","value":"type Address: Codec + Clone + Eq + EncodeLike + sp_std::fmt::Debug;","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" An address which can be used for removing a scheduled task.\n","sig":null,"attributes":[{"value":"/ An address which can be used for removing a scheduled task.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282003,"byte_end":282066,"line_start":1263,"line_end":1263,"column_start":3,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282332,"byte_end":282346,"line_start":1269,"line_end":1269,"column_start":6,"column_end":20},"name":"schedule_named","qualname":"::traits::schedule::Named::schedule_named","value":"fn (id: Vec<u8>, when: BlockNumber, maybe_periodic: Option<Period<BlockNumber>>, priority: Priority, call: Call) -> Result<Self::Address, ()>","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Schedule a one-off dispatch to happen at the beginning of some block in the future.","sig":null,"attributes":[{"value":"/ Schedule a one-off dispatch to happen at the beginning of some block in the future.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282140,"byte_end":282227,"line_start":1266,"line_end":1266,"column_start":3,"column_end":90}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282230,"byte_end":282233,"line_start":1267,"line_end":1267,"column_start":3,"column_end":6}},{"value":"/ - `id`: The identity of the task. This must be unique and will return an error if not.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282236,"byte_end":282326,"line_start":1268,"line_end":1268,"column_start":3,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282873,"byte_end":282885,"line_start":1284,"line_end":1284,"column_start":6,"column_end":18},"name":"cancel_named","qualname":"::traits::schedule::Named::cancel_named","value":"fn (id: Vec<u8>) -> Result<(), ()>","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Cancel a scheduled, named task. If periodic, then it will cancel all further instances\n of that, also.","sig":null,"attributes":[{"value":"/ Cancel a scheduled, named task. If periodic, then it will cancel all further instances","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282508,"byte_end":282598,"line_start":1277,"line_end":1277,"column_start":3,"column_end":93}},{"value":"/ of that, also.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282601,"byte_end":282619,"line_start":1278,"line_end":1278,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282622,"byte_end":282625,"line_start":1279,"line_end":1279,"column_start":3,"column_end":6}},{"value":"/ Will return an error if the `id` is invalid.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282628,"byte_end":282676,"line_start":1280,"line_end":1280,"column_start":3,"column_end":51}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282679,"byte_end":282682,"line_start":1281,"line_end":1281,"column_start":3,"column_end":6}},{"value":"/ NOTE: This guaranteed to work only *before* the point that it is due to be executed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282685,"byte_end":282773,"line_start":1282,"line_end":1282,"column_start":3,"column_end":91}},{"value":"/ If it ends up being delayed beyond the point of execution, then it cannot be cancelled.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282776,"byte_end":282867,"line_start":1283,"line_end":1283,"column_start":3,"column_end":94}}]},{"kind":"Trait","id":{"krate":0,"index":1313},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":283000,"byte_end":283012,"line_start":1289,"line_end":1289,"column_start":11,"column_end":23},"name":"EnsureOrigin","qualname":"::traits::EnsureOrigin","value":"EnsureOrigin<OuterOrigin>","parent":null,"children":[{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1318}],"decl_id":null,"docs":" Some sort of check on the origin is performed by this object.\n","sig":null,"attributes":[{"value":"/ Some sort of check on the origin is performed by this object.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":282924,"byte_end":282989,"line_start":1288,"line_end":1288,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1315},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":283054,"byte_end":283061,"line_start":1291,"line_end":1291,"column_start":7,"column_end":14},"name":"Success","qualname":"::traits::EnsureOrigin::Success","value":"type Success;","parent":{"krate":0,"index":1313},"children":[],"decl_id":null,"docs":" A return type.\n","sig":null,"attributes":[{"value":"/ A return type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":283029,"byte_end":283047,"line_start":1290,"line_end":1290,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":283098,"byte_end":283111,"line_start":1293,"line_end":1293,"column_start":5,"column_end":18},"name":"ensure_origin","qualname":"::traits::EnsureOrigin::ensure_origin","value":"fn (o: OuterOrigin) -> result::Result<Self::Success, BadOrigin>","parent":{"krate":0,"index":1313},"children":[],"decl_id":null,"docs":" Perform the origin check.\n","sig":null,"attributes":[{"value":"/ Perform the origin check.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":283064,"byte_end":283093,"line_start":1292,"line_end":1292,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":283257,"byte_end":283267,"line_start":1297,"line_end":1297,"column_start":5,"column_end":15},"name":"try_origin","qualname":"::traits::EnsureOrigin::try_origin","value":"fn (o: OuterOrigin) -> result::Result<Self::Success, OuterOrigin>","parent":{"krate":0,"index":1313},"children":[],"decl_id":null,"docs":" Perform the origin check.\n","sig":null,"attributes":[{"value":"/ Perform the origin check.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":283223,"byte_end":283252,"line_start":1296,"line_end":1296,"column_start":2,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":1319},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weights","qualname":"::weights","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1323},{"krate":0,"index":1326},{"krate":0,"index":1332},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1342},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1356},{"krate":0,"index":1359},{"krate":0,"index":1362},{"krate":0,"index":5099},{"krate":0,"index":5124},{"krate":0,"index":5123},{"krate":0,"index":5120},{"krate":0,"index":5121},{"krate":0,"index":5117},{"krate":0,"index":5118},{"krate":0,"index":5115},{"krate":0,"index":5109},{"krate":0,"index":5104},{"krate":0,"index":1365},{"krate":0,"index":5126},{"krate":0,"index":5196},{"krate":0,"index":5155},{"krate":0,"index":5152},{"krate":0,"index":5153},{"krate":0,"index":5149},{"krate":0,"index":5150},{"krate":0,"index":5147},{"krate":0,"index":5146},{"krate":0,"index":5140},{"krate":0,"index":5135},{"krate":0,"index":5133},{"krate":0,"index":1367},{"krate":0,"index":5202},{"krate":0,"index":5229},{"krate":0,"index":5228},{"krate":0,"index":5225},{"krate":0,"index":5226},{"krate":0,"index":5221},{"krate":0,"index":5222},{"krate":0,"index":5219},{"krate":0,"index":5217},{"krate":0,"index":5211},{"krate":0,"index":5206},{"krate":0,"index":1369},{"krate":0,"index":5231},{"krate":0,"index":5260},{"krate":0,"index":5259},{"krate":0,"index":5256},{"krate":0,"index":5257},{"krate":0,"index":5252},{"krate":0,"index":5253},{"krate":0,"index":5250},{"krate":0,"index":5248},{"krate":0,"index":5238},{"krate":0,"index":5233},{"krate":0,"index":1371},{"krate":0,"index":1373},{"krate":0,"index":1375},{"krate":0,"index":1377},{"krate":0,"index":1379},{"krate":0,"index":1381},{"krate":0,"index":1383},{"krate":0,"index":1386},{"krate":0,"index":1389},{"krate":0,"index":1392},{"krate":0,"index":1395},{"krate":0,"index":1398},{"krate":0,"index":1401},{"krate":0,"index":1404},{"krate":0,"index":1407},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1416},{"krate":0,"index":1419},{"krate":0,"index":1422},{"krate":0,"index":1430},{"krate":0,"index":1435},{"krate":0,"index":1441},{"krate":0,"index":1446},{"krate":0,"index":1452},{"krate":0,"index":1457},{"krate":0,"index":1463},{"krate":0,"index":1469},{"krate":0,"index":1474},{"krate":0,"index":5262},{"krate":0,"index":5288},{"krate":0,"index":5287},{"krate":0,"index":5284},{"krate":0,"index":5285},{"krate":0,"index":5280},{"krate":0,"index":5281},{"krate":0,"index":5278},{"krate":0,"index":5276},{"krate":0,"index":5270},{"krate":0,"index":5265},{"krate":0,"index":1478},{"krate":0,"index":5290},{"krate":0,"index":5310},{"krate":0,"index":5302},{"krate":0,"index":5296},{"krate":0,"index":1482},{"krate":0,"index":1485},{"krate":0,"index":1490},{"krate":0,"index":1494}],"decl_id":null,"docs":" # Primitives for transaction weighting.","sig":null,"attributes":[{"value":"! # Primitives for transaction weighting.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":284682,"byte_end":284725,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":284726,"byte_end":284729,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! Every dispatchable function is responsible for providing `#[weight = $x]` attribute. In this","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":284730,"byte_end":284826,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"! snipped, `$x` can be any user provided struct that implements the following traits:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":284827,"byte_end":284914,"line_start":21,"line_end":21,"column_start":1,"column_end":88}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":284915,"byte_end":284918,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! - [`WeighData`]: the weight amount.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":284919,"byte_end":284958,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"! - [`ClassifyDispatch`]: class of the dispatch.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":284959,"byte_end":285009,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"! - [`PaysFee`]: weather this weight should be translated to fee and deducted upon dispatch.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285010,"byte_end":285104,"line_start":25,"line_end":25,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285105,"byte_end":285108,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! Substrate then bundles then output information of the two traits into [`DispatchInfo`] struct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285109,"byte_end":285206,"line_start":27,"line_end":27,"column_start":1,"column_end":98}},{"value":"! and provides it by implementing the [`GetDispatchInfo`] for all `Call` both inner and outer call","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285207,"byte_end":285307,"line_start":28,"line_end":28,"column_start":1,"column_end":101}},{"value":"! types.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285308,"byte_end":285318,"line_start":29,"line_end":29,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285319,"byte_end":285322,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! Substrate provides two pre-defined ways to annotate weight:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285323,"byte_end":285386,"line_start":31,"line_end":31,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285387,"byte_end":285390,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ### 1. Fixed values","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285391,"byte_end":285414,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285415,"byte_end":285418,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! This can only be used when all 3 traits can be resolved statically. You have 3 degrees of","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285419,"byte_end":285512,"line_start":35,"line_end":35,"column_start":1,"column_end":94}},{"value":"! configuration:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285513,"byte_end":285531,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285532,"byte_end":285535,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! 1. Define only weight, **in which case `ClassifyDispatch` will be `Normal` and `PaysFee` will be","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285536,"byte_end":285636,"line_start":38,"line_end":38,"column_start":1,"column_end":101}},{"value":"!    `Yes`**.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285637,"byte_end":285652,"line_start":39,"line_end":39,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285653,"byte_end":285656,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285657,"byte_end":285664,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"! # use frame_system::{self as system, Trait};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285665,"byte_end":285713,"line_start":42,"line_end":42,"column_start":1,"column_end":49}},{"value":"! frame_support::decl_module! {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285714,"byte_end":285747,"line_start":43,"line_end":43,"column_start":1,"column_end":34}},{"value":"!     pub struct Module<T: Trait> for enum Call where origin: T::Origin {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285748,"byte_end":285823,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"!         #[weight = 1000]","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285824,"byte_end":285852,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"!         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285853,"byte_end":285908,"line_start":46,"line_end":46,"column_start":1,"column_end":56}},{"value":"!     }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285909,"byte_end":285918,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285919,"byte_end":285924,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"! # fn main() {}","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285925,"byte_end":285943,"line_start":49,"line_end":49,"column_start":1,"column_end":19}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285944,"byte_end":285951,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285952,"byte_end":285955,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! 2.1 Define weight and class, **in which case `PaysFee` would be `Yes`**.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":285956,"byte_end":286032,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286033,"byte_end":286036,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286037,"byte_end":286044,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"! # use frame_system::{self as system, Trait};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286045,"byte_end":286093,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"! # use frame_support::weights::DispatchClass;","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286094,"byte_end":286142,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"! frame_support::decl_module! {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286143,"byte_end":286176,"line_start":57,"line_end":57,"column_start":1,"column_end":34}},{"value":"!     pub struct Module<T: Trait> for enum Call where origin: T::Origin {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286177,"byte_end":286252,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"!         #[weight = (1000, DispatchClass::Operational)]","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286253,"byte_end":286311,"line_start":59,"line_end":59,"column_start":1,"column_end":59}},{"value":"!         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286312,"byte_end":286367,"line_start":60,"line_end":60,"column_start":1,"column_end":56}},{"value":"!     }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286368,"byte_end":286377,"line_start":61,"line_end":61,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286378,"byte_end":286383,"line_start":62,"line_end":62,"column_start":1,"column_end":6}},{"value":"! # fn main() {}","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286384,"byte_end":286402,"line_start":63,"line_end":63,"column_start":1,"column_end":19}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286403,"byte_end":286410,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286411,"byte_end":286414,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"! 2.2 Define weight and `PaysFee`, **in which case `ClassifyDispatch` would be `Normal`**.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286415,"byte_end":286507,"line_start":66,"line_end":66,"column_start":1,"column_end":93}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286508,"byte_end":286511,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286512,"byte_end":286519,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"! # use frame_system::{self as system, Trait};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286520,"byte_end":286568,"line_start":69,"line_end":69,"column_start":1,"column_end":49}},{"value":"! # use frame_support::weights::Pays;","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286569,"byte_end":286608,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"! frame_support::decl_module! {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286609,"byte_end":286642,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"!     pub struct Module<T: Trait> for enum Call where origin: T::Origin {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286643,"byte_end":286718,"line_start":72,"line_end":72,"column_start":1,"column_end":76}},{"value":"!         #[weight = (1000, Pays::No)]","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286719,"byte_end":286759,"line_start":73,"line_end":73,"column_start":1,"column_end":41}},{"value":"!         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286760,"byte_end":286815,"line_start":74,"line_end":74,"column_start":1,"column_end":56}},{"value":"!     }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286816,"byte_end":286825,"line_start":75,"line_end":75,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286826,"byte_end":286831,"line_start":76,"line_end":76,"column_start":1,"column_end":6}},{"value":"! # fn main() {}","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286832,"byte_end":286850,"line_start":77,"line_end":77,"column_start":1,"column_end":19}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286851,"byte_end":286858,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286859,"byte_end":286862,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"! 3. Define all 3 parameters.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286863,"byte_end":286894,"line_start":80,"line_end":80,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286895,"byte_end":286898,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286899,"byte_end":286906,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"! # use frame_system::{self as system, Trait};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286907,"byte_end":286955,"line_start":83,"line_end":83,"column_start":1,"column_end":49}},{"value":"! # use frame_support::weights::{DispatchClass, Pays};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":286956,"byte_end":287012,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"! frame_support::decl_module! {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287013,"byte_end":287046,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"!     pub struct Module<T: Trait> for enum Call where origin: T::Origin {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287047,"byte_end":287122,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"!         #[weight = (1000, DispatchClass::Operational, Pays::No)]","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287123,"byte_end":287191,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"!         fn dispatching(origin) { unimplemented!() }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287192,"byte_end":287247,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"!     }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287248,"byte_end":287257,"line_start":89,"line_end":89,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287258,"byte_end":287263,"line_start":90,"line_end":90,"column_start":1,"column_end":6}},{"value":"! # fn main() {}","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287264,"byte_end":287282,"line_start":91,"line_end":91,"column_start":1,"column_end":19}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287283,"byte_end":287290,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287291,"byte_end":287294,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! ### 2. Define weights as a function of input arguments using `FunctionOf` tuple struct. This struct works","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287295,"byte_end":287404,"line_start":94,"line_end":94,"column_start":1,"column_end":110}},{"value":"! in a similar manner as above. 3 items must be provided and each can be either a fixed value or a","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287405,"byte_end":287505,"line_start":95,"line_end":95,"column_start":1,"column_end":101}},{"value":"! function/closure with the same parameters list as the dispatchable function itself, wrapper in a","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287506,"byte_end":287606,"line_start":96,"line_end":96,"column_start":1,"column_end":101}},{"value":"! tuple.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287607,"byte_end":287617,"line_start":97,"line_end":97,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287618,"byte_end":287621,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! Using this only makes sense if you want to use a function for at least one of the elements. If","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287622,"byte_end":287720,"line_start":99,"line_end":99,"column_start":1,"column_end":99}},{"value":"! all 3 are static values, providing a raw tuple is easier.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287721,"byte_end":287782,"line_start":100,"line_end":100,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287783,"byte_end":287786,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287787,"byte_end":287794,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"! # use frame_system::{self as system, Trait};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287795,"byte_end":287843,"line_start":103,"line_end":103,"column_start":1,"column_end":49}},{"value":"! # use frame_support::weights::{DispatchClass, FunctionOf, Pays};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287844,"byte_end":287912,"line_start":104,"line_end":104,"column_start":1,"column_end":69}},{"value":"! frame_support::decl_module! {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287913,"byte_end":287946,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"!     pub struct Module<T: Trait> for enum Call where origin: T::Origin {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":287947,"byte_end":288022,"line_start":106,"line_end":106,"column_start":1,"column_end":76}},{"value":"!         #[weight = FunctionOf(","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288023,"byte_end":288057,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"! \t\t\t// weight, function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288058,"byte_end":288085,"line_start":108,"line_end":108,"column_start":1,"column_end":28}},{"value":"! \t\t\t|args: (&u32, &u64)| *args.0 as u64 + args.1,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288086,"byte_end":288138,"line_start":109,"line_end":109,"column_start":1,"column_end":53}},{"value":"! \t\t\t// class, fixed.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288139,"byte_end":288162,"line_start":110,"line_end":110,"column_start":1,"column_end":24}},{"value":"! \t\t\tDispatchClass::Operational,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288163,"byte_end":288197,"line_start":111,"line_end":111,"column_start":1,"column_end":35}},{"value":"! \t\t\t// pays fee, function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288198,"byte_end":288227,"line_start":112,"line_end":112,"column_start":1,"column_end":30}},{"value":"! \t\t\t|args: (&u32, &u64)| if *args.0 > 1000 { Pays::Yes } else { Pays::No },","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288228,"byte_end":288306,"line_start":113,"line_end":113,"column_start":1,"column_end":79}},{"value":"! \t\t)]","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288307,"byte_end":288315,"line_start":114,"line_end":114,"column_start":1,"column_end":9}},{"value":"!         fn dispatching(origin, a: u32, b: u64) { unimplemented!() }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288316,"byte_end":288387,"line_start":115,"line_end":115,"column_start":1,"column_end":72}},{"value":"!     }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288388,"byte_end":288397,"line_start":116,"line_end":116,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288398,"byte_end":288403,"line_start":117,"line_end":117,"column_start":1,"column_end":6}},{"value":"! # fn main() {}","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288404,"byte_end":288422,"line_start":118,"line_end":118,"column_start":1,"column_end":19}},{"value":"! ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288423,"byte_end":288430,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"! FRAME assumes a weight of `1_000_000_000_000` equals 1 second of compute on a standard machine.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288431,"byte_end":288530,"line_start":120,"line_end":120,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288531,"byte_end":288534,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"! Latest machine specification used to benchmark are:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288535,"byte_end":288590,"line_start":122,"line_end":122,"column_start":1,"column_end":56}},{"value":"! - Digital Ocean: ubuntu-s-2vcpu-4gb-ams3-01","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288591,"byte_end":288638,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"! - 2x Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288639,"byte_end":288689,"line_start":124,"line_end":124,"column_start":1,"column_end":51}},{"value":"! - 4GB RAM","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288690,"byte_end":288703,"line_start":125,"line_end":125,"column_start":1,"column_end":14}},{"value":"! - Ubuntu 19.10 (GNU/Linux 5.3.0-18-generic x86_64)","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288704,"byte_end":288758,"line_start":126,"line_end":126,"column_start":1,"column_end":55}},{"value":"! - rustc 1.42.0 (b8cedc004 2020-03-09)","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":288759,"byte_end":288800,"line_start":127,"line_end":127,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":1346},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":289394,"byte_end":289400,"line_start":146,"line_end":146,"column_start":10,"column_end":16},"name":"Weight","qualname":"::weights::Weight","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Numeric range of a transaction weight.\n","sig":null,"attributes":[{"value":"/ Numeric range of a transaction weight.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":289342,"byte_end":289384,"line_start":145,"line_end":145,"column_start":1,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":1347},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":289602,"byte_end":289611,"line_start":150,"line_end":150,"column_start":9,"column_end":18},"name":"constants","qualname":"::weights::constants","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":5071},{"krate":0,"index":5073},{"krate":0,"index":5075},{"krate":0,"index":5078},{"krate":0,"index":5080},{"krate":0,"index":5082},{"krate":0,"index":5085},{"krate":0,"index":5087},{"krate":0,"index":5089},{"krate":0,"index":5092},{"krate":0,"index":5094},{"krate":0,"index":5096}],"decl_id":null,"docs":" These constants are specific to FRAME, and the current implementation of its various components.\n For example: FRAME System, FRAME Executive, our FRAME support libraries, etc...\n","sig":null,"attributes":[{"value":"/ These constants are specific to FRAME, and the current implementation of its various components.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":289409,"byte_end":289509,"line_start":148,"line_end":148,"column_start":1,"column_end":101}},{"value":"/ For example: FRAME System, FRAME Executive, our FRAME support libraries, etc...","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":289510,"byte_end":289593,"line_start":149,"line_end":149,"column_start":1,"column_end":84}}]},{"kind":"Const","id":{"krate":0,"index":1352},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":289694,"byte_end":289711,"line_start":154,"line_end":154,"column_start":12,"column_end":29},"name":"WEIGHT_PER_SECOND","qualname":"::weights::constants::WEIGHT_PER_SECOND","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1353},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":289752,"byte_end":289769,"line_start":155,"line_end":155,"column_start":12,"column_end":29},"name":"WEIGHT_PER_MILLIS","qualname":"::weights::constants::WEIGHT_PER_MILLIS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1354},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":289834,"byte_end":289851,"line_start":156,"line_end":156,"column_start":12,"column_end":29},"name":"WEIGHT_PER_MICROS","qualname":"::weights::constants::WEIGHT_PER_MICROS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1355},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":289912,"byte_end":289928,"line_start":157,"line_end":157,"column_start":12,"column_end":28},"name":"WEIGHT_PER_NANOS","qualname":"::weights::constants::WEIGHT_PER_NANOS","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5071},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":290055,"byte_end":290075,"line_start":161,"line_end":161,"column_start":13,"column_end":33},"name":"BlockExecutionWeight","qualname":"::weights::constants::BlockExecutionWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" Importing a block with 0 txs takes ~5 ms\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5078},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":290210,"byte_end":290229,"line_start":163,"line_end":163,"column_start":13,"column_end":32},"name":"ExtrinsicBaseWeight","qualname":"::weights::constants::ExtrinsicBaseWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" Executing 10,000 System remarks (no-op) txs takes ~1.26 seconds -> ~125 µs per tx\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5085},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":290381,"byte_end":290394,"line_start":166,"line_end":166,"column_start":13,"column_end":26},"name":"RocksDbWeight","qualname":"::weights::constants::RocksDbWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" By default, Substrate uses RocksDB, so this will be the weight used throughout\n the runtime.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5092},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":290755,"byte_end":290769,"line_start":172,"line_end":172,"column_start":13,"column_end":27},"name":"ParityDbWeight","qualname":"::weights::constants::ParityDbWeight","value":"","parent":null,"children":[],"decl_id":null,"docs":" ParityDB can be enabled with a feature flag, but is still experimental. These weights\n are available for brave runtime engineers who may want to try this out as default.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1356},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291007,"byte_end":291016,"line_start":180,"line_end":180,"column_start":11,"column_end":20},"name":"WeighData","qualname":"::weights::WeighData","value":"WeighData<T>","parent":null,"children":[{"krate":0,"index":1358}],"decl_id":null,"docs":" Means of weighing some particular kind of data (`T`).\n","sig":null,"attributes":[{"value":"/ Means of weighing some particular kind of data (`T`).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":290939,"byte_end":290996,"line_start":179,"line_end":179,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291193,"byte_end":291203,"line_start":183,"line_end":183,"column_start":5,"column_end":15},"name":"weigh_data","qualname":"::weights::WeighData::weigh_data","value":"fn (&self, target: T) -> Weight","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Weigh the data `T` given by `target`. When implementing this for a dispatchable, `T` will be\n a tuple of all arguments given to the function (except origin).\n","sig":null,"attributes":[{"value":"/ Weigh the data `T` given by `target`. When implementing this for a dispatchable, `T` will be","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291023,"byte_end":291119,"line_start":181,"line_end":181,"column_start":2,"column_end":98}},{"value":"/ a tuple of all arguments given to the function (except origin).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291121,"byte_end":291188,"line_start":182,"line_end":182,"column_start":2,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":1359},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291296,"byte_end":291312,"line_start":187,"line_end":187,"column_start":11,"column_end":27},"name":"ClassifyDispatch","qualname":"::weights::ClassifyDispatch","value":"ClassifyDispatch<T>","parent":null,"children":[{"krate":0,"index":1361}],"decl_id":null,"docs":" Means of classifying a dispatchable function.\n","sig":null,"attributes":[{"value":"/ Means of classifying a dispatchable function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291236,"byte_end":291285,"line_start":186,"line_end":186,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291529,"byte_end":291546,"line_start":191,"line_end":191,"column_start":5,"column_end":22},"name":"classify_dispatch","qualname":"::weights::ClassifyDispatch::classify_dispatch","value":"fn (&self, target: T) -> DispatchClass","parent":{"krate":0,"index":1359},"children":[],"decl_id":null,"docs":" Classify the dispatch function based on input data `target` of type `T`. When implementing\n this for a dispatchable, `T` will be a tuple of all arguments given to the function (except\n origin).\n","sig":null,"attributes":[{"value":"/ Classify the dispatch function based on input data `target` of type `T`. When implementing","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291319,"byte_end":291413,"line_start":188,"line_end":188,"column_start":2,"column_end":96}},{"value":"/ this for a dispatchable, `T` will be a tuple of all arguments given to the function (except","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291415,"byte_end":291510,"line_start":189,"line_end":189,"column_start":2,"column_end":97}},{"value":"/ origin).","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291512,"byte_end":291524,"line_start":190,"line_end":190,"column_start":2,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":1362},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291744,"byte_end":291751,"line_start":196,"line_end":196,"column_start":11,"column_end":18},"name":"PaysFee","qualname":"::weights::PaysFee","value":"PaysFee<T>","parent":null,"children":[{"krate":0,"index":1364}],"decl_id":null,"docs":" Indicates if dispatch function should pay fees or not.\n If set to `Pays::No`, the block resource limits are applied, yet no fee is deducted.\n","sig":null,"attributes":[{"value":"/ Indicates if dispatch function should pay fees or not.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291586,"byte_end":291644,"line_start":194,"line_end":194,"column_start":1,"column_end":59}},{"value":"/ If set to `Pays::No`, the block resource limits are applied, yet no fee is deducted.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291645,"byte_end":291733,"line_start":195,"line_end":195,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291761,"byte_end":291769,"line_start":197,"line_end":197,"column_start":5,"column_end":13},"name":"pays_fee","qualname":"::weights::PaysFee::pays_fee","value":"fn (&self, _target: T) -> Pays","parent":{"krate":0,"index":1362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5100},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291987,"byte_end":291990,"line_start":204,"line_end":204,"column_start":2,"column_end":5},"name":"Yes","qualname":"::weights::Pays::Yes","value":"Pays::Yes","parent":{"krate":0,"index":5099},"children":[],"decl_id":null,"docs":" Transactor will pay related fees.\n","sig":null,"attributes":[{"value":"/ Transactor will pay related fees.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291948,"byte_end":291985,"line_start":203,"line_end":203,"column_start":2,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5102},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292036,"byte_end":292038,"line_start":206,"line_end":206,"column_start":2,"column_end":4},"name":"No","qualname":"::weights::Pays::No","value":"Pays::No","parent":{"krate":0,"index":5099},"children":[],"decl_id":null,"docs":" Transactor will NOT pay related fees.\n","sig":null,"attributes":[{"value":"/ Transactor will NOT pay related fees.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291993,"byte_end":292034,"line_start":205,"line_end":205,"column_start":2,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":5099},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291940,"byte_end":291944,"line_start":202,"line_end":202,"column_start":10,"column_end":14},"name":"Pays","qualname":"::weights::Pays","value":"Pays::{Yes, No}","parent":null,"children":[{"krate":0,"index":5100},{"krate":0,"index":5102}],"decl_id":null,"docs":" Explicit enum to denote if a transaction pays fee or not.\n","sig":null,"attributes":[{"value":"/ Explicit enum to denote if a transaction pays fee or not.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":291801,"byte_end":291862,"line_start":200,"line_end":200,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5127},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292393,"byte_end":292399,"line_start":221,"line_end":221,"column_start":2,"column_end":8},"name":"Normal","qualname":"::weights::DispatchClass::Normal","value":"DispatchClass::Normal","parent":{"krate":0,"index":5126},"children":[],"decl_id":null,"docs":" A normal dispatch.\n","sig":null,"attributes":[{"value":"/ A normal dispatch.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292369,"byte_end":292391,"line_start":220,"line_end":220,"column_start":2,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5129},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292432,"byte_end":292443,"line_start":223,"line_end":223,"column_start":2,"column_end":13},"name":"Operational","qualname":"::weights::DispatchClass::Operational","value":"DispatchClass::Operational","parent":{"krate":0,"index":5126},"children":[],"decl_id":null,"docs":" An operational dispatch.\n","sig":null,"attributes":[{"value":"/ An operational dispatch.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292402,"byte_end":292430,"line_start":222,"line_end":222,"column_start":2,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5131},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293344,"byte_end":293353,"line_start":236,"line_end":236,"column_start":2,"column_end":11},"name":"Mandatory","qualname":"::weights::DispatchClass::Mandatory","value":"DispatchClass::Mandatory","parent":{"krate":0,"index":5126},"children":[],"decl_id":null,"docs":" A mandatory dispatch. These kinds of dispatch are always included regardless of their\n weight, therefore it is critical that they are separately validated to ensure that a\n malicious validator cannot craft a valid but impossibly heavy block. Usually this just means\n ensuring that the extrinsic can only be included once and that it is always very light.","sig":null,"attributes":[{"value":"/ A mandatory dispatch. These kinds of dispatch are always included regardless of their","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292446,"byte_end":292535,"line_start":224,"line_end":224,"column_start":2,"column_end":91}},{"value":"/ weight, therefore it is critical that they are separately validated to ensure that a","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292537,"byte_end":292625,"line_start":225,"line_end":225,"column_start":2,"column_end":90}},{"value":"/ malicious validator cannot craft a valid but impossibly heavy block. Usually this just means","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292627,"byte_end":292723,"line_start":226,"line_end":226,"column_start":2,"column_end":98}},{"value":"/ ensuring that the extrinsic can only be included once and that it is always very light.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292725,"byte_end":292816,"line_start":227,"line_end":227,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292818,"byte_end":292821,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ Do *NOT* use it for extrinsics that can be heavy.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292823,"byte_end":292876,"line_start":229,"line_end":229,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292878,"byte_end":292881,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ The only real use case for this is inherent extrinsics that are required to execute in a","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292883,"byte_end":292975,"line_start":231,"line_end":231,"column_start":2,"column_end":94}},{"value":"/ block for the block to be valid, and it solves the issue in the case that the block","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292977,"byte_end":293064,"line_start":232,"line_end":232,"column_start":2,"column_end":89}},{"value":"/ initialization is sufficiently heavy to mean that those inherents do not fit into the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293066,"byte_end":293155,"line_start":233,"line_end":233,"column_start":2,"column_end":91}},{"value":"/ block. Essentially, we assume that in these exceptional circumstances, it is better to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293157,"byte_end":293247,"line_start":234,"line_end":234,"column_start":2,"column_end":92}},{"value":"/ allow an overweight block to be created than to not allow any block at all to be created.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293249,"byte_end":293342,"line_start":235,"line_end":235,"column_start":2,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":5126},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292352,"byte_end":292365,"line_start":219,"line_end":219,"column_start":10,"column_end":23},"name":"DispatchClass","qualname":"::weights::DispatchClass","value":"DispatchClass::{Normal, Operational, Mandatory}","parent":null,"children":[{"krate":0,"index":5127},{"krate":0,"index":5129},{"krate":0,"index":5131}],"decl_id":null,"docs":" A generalized group of dispatch types.\n","sig":null,"attributes":[{"value":"/ A generalized group of dispatch types.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292109,"byte_end":292151,"line_start":215,"line_end":215,"column_start":1,"column_end":43}},{"value":"serde(rename_all = \"camelCase\")","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292241,"byte_end":292272,"line_start":217,"line_end":217,"column_start":29,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5202},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293607,"byte_end":293619,"line_start":247,"line_end":247,"column_start":12,"column_end":24},"name":"DispatchInfo","qualname":"::weights::DispatchInfo","value":"DispatchInfo { weight, class, pays_fee }","parent":null,"children":[{"krate":0,"index":5203},{"krate":0,"index":5204},{"krate":0,"index":5205}],"decl_id":null,"docs":" A bundle of static information collected from the `#[weight = $x]` attributes.\n","sig":null,"attributes":[{"value":"/ A bundle of static information collected from the `#[weight = $x]` attributes.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293436,"byte_end":293518,"line_start":245,"line_end":245,"column_start":1,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":5203},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293660,"byte_end":293666,"line_start":249,"line_end":249,"column_start":6,"column_end":12},"name":"weight","qualname":"::weights::DispatchInfo::weight","value":"u64","parent":{"krate":0,"index":5202},"children":[],"decl_id":null,"docs":" Weight of this transaction.\n","sig":null,"attributes":[{"value":"/ Weight of this transaction.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293623,"byte_end":293654,"line_start":248,"line_end":248,"column_start":2,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5204},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293713,"byte_end":293718,"line_start":251,"line_end":251,"column_start":6,"column_end":11},"name":"class","qualname":"::weights::DispatchInfo::class","value":"weights::DispatchClass","parent":{"krate":0,"index":5202},"children":[],"decl_id":null,"docs":" Class of this transaction.\n","sig":null,"attributes":[{"value":"/ Class of this transaction.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293677,"byte_end":293707,"line_start":250,"line_end":250,"column_start":2,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5205},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293777,"byte_end":293785,"line_start":253,"line_end":253,"column_start":6,"column_end":14},"name":"pays_fee","qualname":"::weights::DispatchInfo::pays_fee","value":"weights::Pays","parent":{"krate":0,"index":5202},"children":[],"decl_id":null,"docs":" Does this transaction pay fees.\n","sig":null,"attributes":[{"value":"/ Does this transaction pay fees.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293736,"byte_end":293771,"line_start":252,"line_end":252,"column_start":2,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":1369},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293945,"byte_end":293960,"line_start":258,"line_end":258,"column_start":11,"column_end":26},"name":"GetDispatchInfo","qualname":"::weights::GetDispatchInfo","value":"GetDispatchInfo","parent":null,"children":[{"krate":0,"index":1370}],"decl_id":null,"docs":" A `Dispatchable` function (aka transaction) that can carry some static information along with\n it, using the `#[weight]` attribute.\n","sig":null,"attributes":[{"value":"/ A `Dispatchable` function (aka transaction) that can carry some static information along with","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293796,"byte_end":293893,"line_start":256,"line_end":256,"column_start":1,"column_end":98}},{"value":"/ it, using the `#[weight]` attribute.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293894,"byte_end":293934,"line_start":257,"line_end":257,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294105,"byte_end":294122,"line_start":262,"line_end":262,"column_start":5,"column_end":22},"name":"get_dispatch_info","qualname":"::weights::GetDispatchInfo::get_dispatch_info","value":"fn (&self) -> DispatchInfo","parent":{"krate":0,"index":1369},"children":[],"decl_id":null,"docs":" Return a `DispatchInfo`, containing relevant information of this dispatch.","sig":null,"attributes":[{"value":"/ Return a `DispatchInfo`, containing relevant information of this dispatch.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293964,"byte_end":294042,"line_start":259,"line_end":259,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294044,"byte_end":294047,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ This is done independently of its encoded size.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294049,"byte_end":294100,"line_start":261,"line_end":261,"column_start":2,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5231},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294299,"byte_end":294315,"line_start":267,"line_end":267,"column_start":12,"column_end":28},"name":"PostDispatchInfo","qualname":"::weights::PostDispatchInfo","value":"PostDispatchInfo { actual_weight }","parent":null,"children":[{"krate":0,"index":5232}],"decl_id":null,"docs":" Weight information that is only available post dispatch.\n","sig":null,"attributes":[{"value":"/ Weight information that is only available post dispatch.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294150,"byte_end":294210,"line_start":265,"line_end":265,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":5232},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294418,"byte_end":294431,"line_start":269,"line_end":269,"column_start":6,"column_end":19},"name":"actual_weight","qualname":"::weights::PostDispatchInfo::actual_weight","value":"std::option::Option<u64>","parent":{"krate":0,"index":5231},"children":[],"decl_id":null,"docs":" Actual weight consumed by a call or `None` which stands for the worst case static weight.\n","sig":null,"attributes":[{"value":"/ Actual weight consumed by a call or `None` which stands for the worst case static weight.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294319,"byte_end":294412,"line_start":268,"line_end":268,"column_start":2,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294560,"byte_end":294572,"line_start":274,"line_end":274,"column_start":9,"column_end":21},"name":"calc_unspent","qualname":"<PostDispatchInfo>::calc_unspent","value":"fn (&self, info: &DispatchInfo) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Calculate how much (if any) weight was not used by the `Dispatchable`.\n","sig":null,"attributes":[{"value":"/ Calculate how much (if any) weight was not used by the `Dispatchable`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294477,"byte_end":294551,"line_start":273,"line_end":273,"column_start":2,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":1373},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294886,"byte_end":294907,"line_start":288,"line_end":288,"column_start":8,"column_end":29},"name":"extract_actual_weight","qualname":"::weights::extract_actual_weight","value":"fn (result: &DispatchResultWithPostInfo, info: &DispatchInfo) -> Weight","parent":null,"children":[],"decl_id":null,"docs":" Extract the actual weight from a dispatch result if any or fall back to the default weight.\n","sig":null,"attributes":[{"value":"/ Extract the actual weight from a dispatch result if any or fall back to the default weight.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294783,"byte_end":294878,"line_start":287,"line_end":287,"column_start":1,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":1381},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295760,"byte_end":295780,"line_start":323,"line_end":323,"column_start":11,"column_end":31},"name":"WithPostDispatchInfo","qualname":"::weights::WithPostDispatchInfo","value":"WithPostDispatchInfo","parent":null,"children":[{"krate":0,"index":1382}],"decl_id":null,"docs":" Allows easy conversion from `DispatchError` to `DispatchErrorWithPostInfo` for dispatchables\n that want to return a custom a posterior weight on error.\n","sig":null,"attributes":[{"value":"/ Allows easy conversion from `DispatchError` to `DispatchErrorWithPostInfo` for dispatchables","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295591,"byte_end":295687,"line_start":321,"line_end":321,"column_start":1,"column_end":97}},{"value":"/ that want to return a custom a posterior weight on error.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295688,"byte_end":295749,"line_start":322,"line_end":322,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":296067,"byte_end":296078,"line_start":332,"line_end":332,"column_start":5,"column_end":16},"name":"with_weight","qualname":"::weights::WithPostDispatchInfo::with_weight","value":"fn (self, actual_weight: Weight) -> DispatchErrorWithPostInfo","parent":{"krate":0,"index":1381},"children":[],"decl_id":null,"docs":" Call this on your modules custom errors type in order to return a custom weight on error.","sig":null,"attributes":[{"value":"/ Call this on your modules custom errors type in order to return a custom weight on error.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295784,"byte_end":295877,"line_start":324,"line_end":324,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295879,"byte_end":295882,"line_start":325,"line_end":325,"column_start":2,"column_end":5}},{"value":"/ # Example","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295884,"byte_end":295897,"line_start":326,"line_end":326,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295899,"byte_end":295902,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ ```ignore","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295904,"byte_end":295917,"line_start":328,"line_end":328,"column_start":2,"column_end":15}},{"value":"/ let who = ensure_signed(origin).map_err(|e| e.with_weight(100))?;","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295919,"byte_end":295988,"line_start":329,"line_end":329,"column_start":2,"column_end":71}},{"value":"/ ensure!(who == me, Error::<T>::NotMe.with_weight(200_000));","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295990,"byte_end":296053,"line_start":330,"line_end":330,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":296055,"byte_end":296062,"line_start":331,"line_end":331,"column_start":2,"column_end":9}}]},{"kind":"Struct","id":{"krate":0,"index":1422},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":298380,"byte_end":298390,"line_start":427,"line_end":427,"column_start":12,"column_end":22},"name":"FunctionOf","qualname":"::weights::FunctionOf","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct to represent a weight which is a function of the input arguments. The given items have\n the following types:","sig":null,"attributes":[{"value":"/ A struct to represent a weight which is a function of the input arguments. The given items have","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":297753,"byte_end":297852,"line_start":418,"line_end":418,"column_start":1,"column_end":100}},{"value":"/ the following types:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":297853,"byte_end":297877,"line_start":419,"line_end":419,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":297878,"byte_end":297881,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ - `WD`: a raw `Weight` value or a closure that returns a `Weight` with the same","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":297882,"byte_end":297965,"line_start":421,"line_end":421,"column_start":1,"column_end":84}},{"value":"/   argument list as the dispatched, wrapped in a tuple.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":297966,"byte_end":298024,"line_start":422,"line_end":422,"column_start":1,"column_end":59}},{"value":"/ - `CD`: a raw `DispatchClass` value or a closure that returns a `DispatchClass`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":298025,"byte_end":298108,"line_start":423,"line_end":423,"column_start":1,"column_end":84}},{"value":"/   with the same argument list as the dispatched, wrapped in a tuple.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":298109,"byte_end":298181,"line_start":424,"line_end":424,"column_start":1,"column_end":73}},{"value":"/ - `PF`: a `Pays` variant for whether this dispatch pays fee or not or a closure that","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":298182,"byte_end":298270,"line_start":425,"line_end":425,"column_start":1,"column_end":89}},{"value":"/   returns a `Pays` variant with the same argument list as the dispatched, wrapped in a tuple.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":298271,"byte_end":298368,"line_start":426,"line_end":426,"column_start":1,"column_end":98}}]},{"kind":"Struct","id":{"krate":0,"index":5262},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":300600,"byte_end":300615,"line_start":515,"line_end":515,"column_start":12,"column_end":27},"name":"RuntimeDbWeight","qualname":"::weights::RuntimeDbWeight","value":"RuntimeDbWeight { read, write }","parent":null,"children":[{"krate":0,"index":5263},{"krate":0,"index":5264}],"decl_id":null,"docs":" The weight of database operations that the runtime can invoke.\n","sig":null,"attributes":[{"value":"/ The weight of database operations that the runtime can invoke.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":300445,"byte_end":300511,"line_start":513,"line_end":513,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":5263},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":300623,"byte_end":300627,"line_start":516,"line_end":516,"column_start":6,"column_end":10},"name":"read","qualname":"::weights::RuntimeDbWeight::read","value":"u64","parent":{"krate":0,"index":5262},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5264},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":300642,"byte_end":300647,"line_start":517,"line_end":517,"column_start":6,"column_end":11},"name":"write","qualname":"::weights::RuntimeDbWeight::write","value":"u64","parent":{"krate":0,"index":5262},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":300691,"byte_end":300696,"line_start":521,"line_end":521,"column_start":9,"column_end":14},"name":"reads","qualname":"<RuntimeDbWeight>::reads","value":"fn (self, r: Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":300768,"byte_end":300774,"line_start":525,"line_end":525,"column_start":9,"column_end":15},"name":"writes","qualname":"<RuntimeDbWeight>::writes","value":"fn (self, w: Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":300847,"byte_end":300859,"line_start":529,"line_end":529,"column_start":9,"column_end":21},"name":"reads_writes","qualname":"<RuntimeDbWeight>::reads_writes","value":"fn (self, r: Weight, w: Weight) -> Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5290},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301412,"byte_end":301434,"line_start":547,"line_end":547,"column_start":12,"column_end":34},"name":"WeightToFeeCoefficient","qualname":"::weights::WeightToFeeCoefficient","value":"WeightToFeeCoefficient { coeff_integer, coeff_frac, negative, degree }","parent":null,"children":[{"krate":0,"index":5292},{"krate":0,"index":5293},{"krate":0,"index":5294},{"krate":0,"index":5295}],"decl_id":null,"docs":" One coefficient and its position in the `WeightToFeePolynomial`.","sig":null,"attributes":[{"value":"/ One coefficient and its position in the `WeightToFeePolynomial`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301049,"byte_end":301117,"line_start":536,"line_end":536,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301118,"byte_end":301121,"line_start":537,"line_end":537,"column_start":1,"column_end":4}},{"value":"/ One term of polynomial is calculated as:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301122,"byte_end":301166,"line_start":538,"line_end":538,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301167,"byte_end":301170,"line_start":539,"line_end":539,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301171,"byte_end":301184,"line_start":540,"line_end":540,"column_start":1,"column_end":14}},{"value":"/ coeff_integer * x^(degree) + coeff_frac * x^(degree)","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301185,"byte_end":301241,"line_start":541,"line_end":541,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301242,"byte_end":301249,"line_start":542,"line_end":542,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301250,"byte_end":301253,"line_start":543,"line_end":543,"column_start":1,"column_end":4}},{"value":"/ The `negative` value encodes whether the term is added or substracted from the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301254,"byte_end":301336,"line_start":544,"line_end":544,"column_start":1,"column_end":83}},{"value":"/ overall polynomial result.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301337,"byte_end":301367,"line_start":545,"line_end":545,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":5292},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301494,"byte_end":301507,"line_start":549,"line_end":549,"column_start":6,"column_end":19},"name":"coeff_integer","qualname":"::weights::WeightToFeeCoefficient::coeff_integer","value":"Balance","parent":{"krate":0,"index":5290},"children":[],"decl_id":null,"docs":" The integral part of the coefficient.\n","sig":null,"attributes":[{"value":"/ The integral part of the coefficient.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301447,"byte_end":301488,"line_start":548,"line_end":548,"column_start":2,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":5293},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301568,"byte_end":301578,"line_start":551,"line_end":551,"column_start":6,"column_end":16},"name":"coeff_frac","qualname":"::weights::WeightToFeeCoefficient::coeff_frac","value":"sp_arithmetic::per_things::Perbill","parent":{"krate":0,"index":5290},"children":[],"decl_id":null,"docs":" The fractional part of the coefficient.\n","sig":null,"attributes":[{"value":"/ The fractional part of the coefficient.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301519,"byte_end":301562,"line_start":550,"line_end":550,"column_start":2,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":5294},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301659,"byte_end":301667,"line_start":553,"line_end":553,"column_start":6,"column_end":14},"name":"negative","qualname":"::weights::WeightToFeeCoefficient::negative","value":"bool","parent":{"krate":0,"index":5290},"children":[],"decl_id":null,"docs":" True iff the coefficient should be interpreted as negative.\n","sig":null,"attributes":[{"value":"/ True iff the coefficient should be interpreted as negative.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301590,"byte_end":301653,"line_start":552,"line_end":552,"column_start":2,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":5295},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301714,"byte_end":301720,"line_start":555,"line_end":555,"column_start":6,"column_end":12},"name":"degree","qualname":"::weights::WeightToFeeCoefficient::degree","value":"u8","parent":{"krate":0,"index":5290},"children":[],"decl_id":null,"docs":" Degree/exponent of the term.\n","sig":null,"attributes":[{"value":"/ Degree/exponent of the term.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301676,"byte_end":301708,"line_start":554,"line_end":554,"column_start":2,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":1482},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301796,"byte_end":301819,"line_start":559,"line_end":559,"column_start":10,"column_end":33},"name":"WeightToFeeCoefficients","qualname":"::weights::WeightToFeeCoefficients","value":"SmallVec<[WeightToFeeCoefficient<T>; 4]>","parent":null,"children":[],"decl_id":null,"docs":" A list of coefficients that represent one polynomial.\n","sig":null,"attributes":[{"value":"/ A list of coefficients that represent one polynomial.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301729,"byte_end":301786,"line_start":558,"line_end":558,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":1485},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302022,"byte_end":302043,"line_start":564,"line_end":564,"column_start":11,"column_end":32},"name":"WeightToFeePolynomial","qualname":"::weights::WeightToFeePolynomial","value":"WeightToFeePolynomial","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488}],"decl_id":null,"docs":" A trait that describes the weight to fee calculation as polynomial.","sig":null,"attributes":[{"value":"/ A trait that describes the weight to fee calculation as polynomial.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301868,"byte_end":301939,"line_start":561,"line_end":561,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301940,"byte_end":301943,"line_start":562,"line_end":562,"column_start":1,"column_end":4}},{"value":"/ An implementor should only implement the `polynomial` function.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":301944,"byte_end":302011,"line_start":563,"line_end":563,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":1486},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302121,"byte_end":302128,"line_start":566,"line_end":566,"column_start":7,"column_end":14},"name":"Balance","qualname":"::weights::WeightToFeePolynomial::Balance","value":"type Balance: BaseArithmetic + From<u32> + Copy;","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" The type that is returned as result from polynomial evaluation.\n","sig":null,"attributes":[{"value":"/ The type that is returned as result from polynomial evaluation.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302047,"byte_end":302114,"line_start":565,"line_end":565,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302570,"byte_end":302580,"line_start":574,"line_end":574,"column_start":5,"column_end":15},"name":"polynomial","qualname":"::weights::WeightToFeePolynomial::polynomial","value":"fn () -> WeightToFeeCoefficients<Self::Balance>","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Returns a polynomial that describes the weight to fee conversion.","sig":null,"attributes":[{"value":"/ Returns a polynomial that describes the weight to fee conversion.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302167,"byte_end":302236,"line_start":568,"line_end":568,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302238,"byte_end":302241,"line_start":569,"line_end":569,"column_start":2,"column_end":5}},{"value":"/ This is the only function that should be manually implemented. Please note","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302243,"byte_end":302321,"line_start":570,"line_end":570,"column_start":2,"column_end":80}},{"value":"/ that all calculation is done in the probably unsigned `Balance` type. This means","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302323,"byte_end":302407,"line_start":571,"line_end":571,"column_start":2,"column_end":86}},{"value":"/ that the order of coefficients is important as putting the negative coefficients","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302409,"byte_end":302493,"line_start":572,"line_end":572,"column_start":2,"column_end":86}},{"value":"/ first will most likely saturate the result to zero mid evaluation.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302495,"byte_end":302565,"line_start":573,"line_end":573,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302871,"byte_end":302875,"line_start":580,"line_end":580,"column_start":5,"column_end":9},"name":"calc","qualname":"::weights::WeightToFeePolynomial::calc","value":"fn (weight: &Weight) -> Self::Balance","parent":{"krate":0,"index":1485},"children":[],"decl_id":null,"docs":" Calculates the fee from the passed `weight` according to the `polynomial`.","sig":null,"attributes":[{"value":"/ Calculates the fee from the passed `weight` according to the `polynomial`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302628,"byte_end":302706,"line_start":576,"line_end":576,"column_start":2,"column_end":80}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302708,"byte_end":302711,"line_start":577,"line_end":577,"column_start":2,"column_end":5}},{"value":"/ This should not be overriden in most circumstances. Calculation is done in the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302713,"byte_end":302795,"line_start":578,"line_end":578,"column_start":2,"column_end":84}},{"value":"/ `Balance` type and never overflows. All evaluation is saturating.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":302797,"byte_end":302866,"line_start":579,"line_end":579,"column_start":2,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":1490},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":303625,"byte_end":303636,"line_start":603,"line_end":603,"column_start":12,"column_end":23},"name":"IdentityFee","qualname":"::weights::IdentityFee","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementor of `WeightToFeePolynomial` that maps one unit of weight to one unit of fee.\n","sig":null,"attributes":[{"value":"/ Implementor of `WeightToFeePolynomial` that maps one unit of weight to one unit of fee.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":303522,"byte_end":303613,"line_start":602,"line_end":602,"column_start":1,"column_end":92}}]},{"kind":"Enum","id":{"krate":0,"index":5313},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":2148,"byte_end":2153,"line_start":85,"line_end":85,"column_start":10,"column_end":15},"name":"Never","qualname":"::Never","value":"Never::{}","parent":null,"children":[],"decl_id":null,"docs":" A type that cannot be instantiated.\n","sig":null,"attributes":[{"value":"/ A type that cannot be instantiated.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":2082,"byte_end":2121,"line_start":83,"line_end":83,"column_start":1,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":5316},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":6579,"byte_end":6583,"line_start":257,"line_end":257,"column_start":10,"column_end":14},"name":"Void","qualname":"::Void","value":"Void::{}","parent":null,"children":[],"decl_id":null,"docs":" The void type - it cannot exist.\n","sig":null,"attributes":[{"value":"/ The void type - it cannot exist.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":6440,"byte_end":6476,"line_start":254,"line_end":254,"column_start":1,"column_end":37}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23296,"byte_end":23302,"line_start":151,"line_end":151,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23407,"byte_end":23413,"line_start":158,"line_end":158,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":24096,"byte_end":24109,"line_start":179,"line_end":179,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":24482,"byte_end":24495,"line_start":196,"line_end":196,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":28040,"byte_end":28041,"line_start":64,"line_end":64,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":142425,"byte_end":142443,"line_start":105,"line_end":105,"column_start":16,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":143255,"byte_end":143256,"line_start":139,"line_end":139,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":144692,"byte_end":144693,"line_start":194,"line_end":194,"column_start":86,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":349},{"krate":0,"index":354},{"krate":0,"index":359},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":153201,"byte_end":153202,"line_start":127,"line_end":127,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":422},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":433},{"krate":0,"index":437},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":450},{"krate":0,"index":456},{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":158344,"byte_end":158355,"line_start":308,"line_end":308,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":159439,"byte_end":159440,"line_start":350,"line_end":350,"column_start":52,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":166181,"byte_end":166182,"line_start":56,"line_end":56,"column_start":69,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":544},{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":169468,"byte_end":169483,"line_start":33,"line_end":33,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":170321,"byte_end":170336,"line_start":56,"line_end":56,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":171250,"byte_end":171268,"line_start":91,"line_end":91,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":172160,"byte_end":172178,"line_start":115,"line_end":115,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112063,"byte_end":112077,"line_start":409,"line_end":409,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":116398,"byte_end":116401,"line_start":550,"line_end":550,"column_start":29,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":116439,"byte_end":116445,"line_start":551,"line_end":551,"column_start":32,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":116495,"byte_end":116498,"line_start":554,"line_end":554,"column_start":38,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":116545,"byte_end":116548,"line_start":555,"line_end":555,"column_start":41,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":116862,"byte_end":116868,"line_start":560,"line_end":560,"column_start":56,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176420,"byte_end":176421,"line_start":35,"line_end":35,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177481,"byte_end":177489,"line_start":75,"line_end":75,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":854},{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177599,"byte_end":177607,"line_start":81,"line_end":81,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177755,"byte_end":177767,"line_start":89,"line_end":89,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177950,"byte_end":177962,"line_start":99,"line_end":99,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178228,"byte_end":178244,"line_start":111,"line_end":111,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178430,"byte_end":178446,"line_start":121,"line_end":121,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178688,"byte_end":178698,"line_start":133,"line_end":133,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178865,"byte_end":178875,"line_start":142,"line_end":142,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":179037,"byte_end":179044,"line_start":151,"line_end":151,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":889},{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":179204,"byte_end":179211,"line_start":160,"line_end":160,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":240887,"byte_end":240901,"line_start":104,"line_end":104,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243876,"byte_end":243877,"line_start":203,"line_end":203,"column_start":40,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255724,"byte_end":255739,"line_start":535,"line_end":535,"column_start":3,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":257192,"byte_end":257204,"line_start":583,"line_end":583,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270635,"byte_end":270650,"line_start":944,"line_end":944,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292060,"byte_end":292064,"line_start":209,"line_end":209,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293375,"byte_end":293388,"line_start":239,"line_end":239,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294457,"byte_end":294473,"line_start":272,"line_end":272,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295167,"byte_end":295183,"line_start":295,"line_end":295,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295291,"byte_end":295307,"line_start":303,"line_end":303,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1378}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295418,"byte_end":295434,"line_start":311,"line_end":311,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":296174,"byte_end":296175,"line_start":335,"line_end":335,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1385}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":296443,"byte_end":296449,"line_start":346,"line_end":346,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":296545,"byte_end":296551,"line_start":352,"line_end":352,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":296661,"byte_end":296667,"line_start":358,"line_end":358,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":298498,"byte_end":298508,"line_start":430,"line_end":430,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1434}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":298656,"byte_end":298666,"line_start":437,"line_end":437,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":298864,"byte_end":298874,"line_start":446,"line_end":446,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1445}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":299059,"byte_end":299069,"line_start":453,"line_end":453,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":299270,"byte_end":299280,"line_start":462,"line_end":462,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1456}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":299418,"byte_end":299428,"line_start":469,"line_end":469,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1462}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":299640,"byte_end":299658,"line_start":479,"line_end":479,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1468}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":299930,"byte_end":299946,"line_start":491,"line_end":491,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1473}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":300230,"byte_end":300236,"line_start":502,"line_end":502,"column_start":76,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":1477}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":300665,"byte_end":300680,"line_start":520,"line_end":520,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":303708,"byte_end":303719,"line_start":605,"line_end":605,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1496},{"krate":0,"index":1497}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1367,"byte_end":1372,"line_start":52,"line_end":52,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":17}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1395,"byte_end":1403,"line_start":54,"line_end":54,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":53}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1413,"byte_end":1420,"line_start":55,"line_end":55,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":123}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98455,"byte_end":98463,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":139}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98473,"byte_end":98479,"line_start":26,"line_end":26,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":173}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98489,"byte_end":98494,"line_start":27,"line_end":27,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":229}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98519,"byte_end":98528,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":268}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":98538,"byte_end":98547,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":555}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1453,"byte_end":1458,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":900}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1506,"byte_end":1514,"line_start":62,"line_end":62,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":913}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1537,"byte_end":1545,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":935}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1568,"byte_end":1576,"line_start":66,"line_end":66,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":946}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1599,"byte_end":1604,"line_start":68,"line_end":68,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":954}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1614,"byte_end":1620,"line_start":69,"line_end":69,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":963}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/lib.rs","byte_start":1630,"byte_end":1637,"line_start":70,"line_end":70,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1319}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23296,"byte_end":23302,"line_start":151,"line_end":151,"column_start":21,"column_end":27},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1542},"to":{"krate":2,"index":5939}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":23407,"byte_end":23413,"line_start":158,"line_end":158,"column_start":6,"column_end":12},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":24096,"byte_end":24109,"line_start":179,"line_end":179,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":44},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/debug.rs","byte_start":24482,"byte_end":24495,"line_start":196,"line_end":196,"column_start":19,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":44},"to":{"krate":40,"index":145}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27970,"byte_end":27975,"line_start":63,"line_end":63,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":25,"index":123},"to":{"krate":0,"index":108}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27978,"byte_end":27988,"line_start":63,"line_end":63,"column_start":30,"column_end":40},"kind":"SuperTrait","from":{"krate":25,"index":657},"to":{"krate":0,"index":108}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27991,"byte_end":27996,"line_start":63,"line_end":63,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":108}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":27999,"byte_end":28001,"line_start":63,"line_end":63,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1624},"to":{"krate":0,"index":108}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":28009,"byte_end":28014,"line_start":63,"line_end":63,"column_start":61,"column_end":66},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":108}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/dispatch.rs","byte_start":28040,"byte_end":28041,"line_start":64,"line_end":64,"column_start":23,"column_end":24},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":110},"to":{"krate":0,"index":108}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":142425,"byte_end":142443,"line_start":105,"line_end":105,"column_start":16,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":299},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":143255,"byte_end":143256,"line_start":139,"line_end":139,"column_start":41,"column_end":42},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":317},"to":{"krate":0,"index":690}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/map.rs","byte_start":144692,"byte_end":144693,"line_start":194,"line_end":194,"column_start":86,"column_end":87},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":328},"to":{"krate":0,"index":641}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":153201,"byte_end":153202,"line_start":127,"line_end":127,"column_start":61,"column_end":62},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":414},"to":{"krate":0,"index":714}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":158344,"byte_end":158355,"line_start":308,"line_end":308,"column_start":22,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":467},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/double_map.rs","byte_start":159439,"byte_end":159440,"line_start":350,"line_end":350,"column_start":52,"column_end":53},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":482},"to":{"krate":0,"index":699}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/generator/value.rs","byte_start":166181,"byte_end":166182,"line_start":56,"line_end":56,"column_start":69,"column_end":70},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":524},"to":{"krate":0,"index":614}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":169468,"byte_end":169483,"line_start":33,"line_end":33,"column_start":9,"column_end":24},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":564},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":170321,"byte_end":170336,"line_start":56,"line_end":56,"column_start":38,"column_end":53},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":564},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":171250,"byte_end":171268,"line_start":91,"line_end":91,"column_start":40,"column_end":58},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":580},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/migration.rs","byte_start":172160,"byte_end":172178,"line_start":115,"line_end":115,"column_start":6,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":580},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":105458,"byte_end":105468,"line_start":220,"line_end":220,"column_start":60,"column_end":70},"kind":"SuperTrait","from":{"krate":0,"index":641},"to":{"krate":0,"index":690}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":106363,"byte_end":106379,"line_start":242,"line_end":242,"column_start":4,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":714},"to":{"krate":0,"index":699}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":112063,"byte_end":112077,"line_start":409,"line_end":409,"column_start":34,"column_end":48},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":771},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115316,"byte_end":115322,"line_start":520,"line_end":520,"column_start":49,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":801},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115629,"byte_end":115635,"line_start":527,"line_end":527,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":801},"to":{"krate":0,"index":796}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":115645,"byte_end":115657,"line_start":527,"line_end":527,"column_start":57,"column_end":69},"kind":"SuperTrait","from":{"krate":25,"index":117},"to":{"krate":0,"index":796}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":116398,"byte_end":116401,"line_start":550,"line_end":550,"column_start":29,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":5,"index":4064},"to":{"krate":0,"index":801}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":116439,"byte_end":116445,"line_start":551,"line_end":551,"column_start":32,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":156,"index":1928},"to":{"krate":0,"index":801}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":116495,"byte_end":116498,"line_start":554,"line_end":554,"column_start":38,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":5,"index":4064},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":116545,"byte_end":116548,"line_start":555,"line_end":555,"column_start":41,"column_end":44},"kind":{"Impl":{"id":20}},"from":{"krate":5,"index":4064},"to":{"krate":0,"index":796}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/storage/mod.rs","byte_start":116862,"byte_end":116868,"line_start":560,"line_end":560,"column_start":56,"column_end":62},"kind":{"Impl":{"id":21}},"from":{"krate":156,"index":1928},"to":{"krate":0,"index":794}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176134,"byte_end":176139,"line_start":25,"line_end":25,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":821}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":176420,"byte_end":176421,"line_start":35,"line_end":35,"column_start":29,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":834},"to":{"krate":0,"index":821}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177240,"byte_end":177253,"line_start":66,"line_end":66,"column_start":36,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":846},"to":{"krate":0,"index":849}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177481,"byte_end":177489,"line_start":75,"line_end":75,"column_start":24,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":851},"to":{"krate":0,"index":846}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177599,"byte_end":177607,"line_start":81,"line_end":81,"column_start":34,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":851},"to":{"krate":0,"index":849}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177755,"byte_end":177767,"line_start":89,"line_end":89,"column_start":24,"column_end":36},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":858},"to":{"krate":0,"index":846}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":177950,"byte_end":177962,"line_start":99,"line_end":99,"column_start":34,"column_end":46},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":858},"to":{"krate":0,"index":849}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178228,"byte_end":178244,"line_start":111,"line_end":111,"column_start":24,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":846}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178430,"byte_end":178446,"line_start":121,"line_end":121,"column_start":34,"column_end":50},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":849}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178688,"byte_end":178698,"line_start":133,"line_end":133,"column_start":24,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":872},"to":{"krate":0,"index":846}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":178865,"byte_end":178875,"line_start":142,"line_end":142,"column_start":24,"column_end":34},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":879},"to":{"krate":0,"index":846}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":179037,"byte_end":179044,"line_start":151,"line_end":151,"column_start":24,"column_end":31},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":886},"to":{"krate":0,"index":846}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/hash.rs","byte_start":179204,"byte_end":179211,"line_start":160,"line_end":160,"column_start":24,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":893},"to":{"krate":0,"index":846}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":240887,"byte_end":240901,"line_start":104,"line_end":104,"column_start":23,"column_end":37},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1021},"to":{"krate":0,"index":1000}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":243876,"byte_end":243877,"line_start":203,"line_end":203,"column_start":40,"column_end":41},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1072},"to":{"krate":0,"index":1069}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":249628,"byte_end":249633,"line_start":375,"line_end":375,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":1130}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251281,"byte_end":251286,"line_start":409,"line_end":409,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":1132}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":251289,"byte_end":251296,"line_start":409,"line_end":409,"column_start":39,"column_end":46},"kind":"SuperTrait","from":{"krate":0,"index":1130},"to":{"krate":0,"index":1132}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":255724,"byte_end":255739,"line_start":535,"line_end":535,"column_start":3,"column_end":18},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":257192,"byte_end":257204,"line_start":583,"line_end":583,"column_start":23,"column_end":35},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1166},"to":{"krate":0,"index":1120}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":264279,"byte_end":264287,"line_start":773,"line_end":773,"column_start":42,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":1183},"to":{"krate":0,"index":1210}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":267308,"byte_end":267316,"line_start":838,"line_end":838,"column_start":40,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":1183},"to":{"krate":0,"index":1220}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/traits.rs","byte_start":270635,"byte_end":270650,"line_start":944,"line_end":944,"column_start":6,"column_end":21},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2731},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":292060,"byte_end":292064,"line_start":209,"line_end":209,"column_start":18,"column_end":22},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":5099},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":293375,"byte_end":293388,"line_start":239,"line_end":239,"column_start":18,"column_end":31},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":5126},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":294457,"byte_end":294473,"line_start":272,"line_end":272,"column_start":6,"column_end":22},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":5231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295167,"byte_end":295183,"line_start":295,"line_end":295,"column_start":31,"column_end":47},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":5231},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295291,"byte_end":295307,"line_start":303,"line_end":303,"column_start":19,"column_end":35},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":5231},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":295418,"byte_end":295434,"line_start":311,"line_end":311,"column_start":40,"column_end":56},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":5231},"to":{"krate":156,"index":1099}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":296174,"byte_end":296175,"line_start":335,"line_end":335,"column_start":34,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1384},"to":{"krate":0,"index":1381}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":296443,"byte_end":296449,"line_start":346,"line_end":346,"column_start":26,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1346},"to":{"krate":0,"index":1356}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":296545,"byte_end":296551,"line_start":352,"line_end":352,"column_start":33,"column_end":39},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1346},"to":{"krate":0,"index":1359}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":296661,"byte_end":296667,"line_start":358,"line_end":358,"column_start":24,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1346},"to":{"krate":0,"index":1362}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":298498,"byte_end":298508,"line_start":430,"line_end":430,"column_start":40,"column_end":50},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1422},"to":{"krate":0,"index":1356}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":298656,"byte_end":298666,"line_start":437,"line_end":437,"column_start":44,"column_end":54},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1422},"to":{"krate":0,"index":1356}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":298864,"byte_end":298874,"line_start":446,"line_end":446,"column_start":47,"column_end":57},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1422},"to":{"krate":0,"index":1359}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":299059,"byte_end":299069,"line_start":453,"line_end":453,"column_start":51,"column_end":61},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1422},"to":{"krate":0,"index":1359}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":299270,"byte_end":299280,"line_start":462,"line_end":462,"column_start":38,"column_end":48},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1422},"to":{"krate":0,"index":1362}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":299418,"byte_end":299428,"line_start":469,"line_end":469,"column_start":42,"column_end":52},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1422},"to":{"krate":0,"index":1362}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":299640,"byte_end":299658,"line_start":479,"line_end":479,"column_start":6,"column_end":24},"kind":{"Impl":{"id":79}},"from":{"krate":156,"index":1429},"to":{"krate":0,"index":1369}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":299930,"byte_end":299946,"line_start":491,"line_end":491,"column_start":6,"column_end":22},"kind":{"Impl":{"id":80}},"from":{"krate":156,"index":1540},"to":{"krate":0,"index":1369}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":300230,"byte_end":300236,"line_start":502,"line_end":502,"column_start":76,"column_end":82},"kind":{"Impl":{"id":81}},"from":{"krate":156,"index":2592},"to":{"krate":0,"index":1369}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":300665,"byte_end":300680,"line_start":520,"line_end":520,"column_start":6,"column_end":21},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":5262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/frame/support/src/weights.rs","byte_start":303708,"byte_end":303719,"line_start":605,"line_end":605,"column_start":35,"column_end":46},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1490},"to":{"krate":0,"index":1485}}]}