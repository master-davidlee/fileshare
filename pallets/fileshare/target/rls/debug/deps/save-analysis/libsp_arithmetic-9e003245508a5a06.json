{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic","program":"/home/ipfs/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","sp_arithmetic","--edition=2018","/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=9e003245508a5a06","-C","extra-filename=-9e003245508a5a06","--out-dir","/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps","-L","dependency=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps","--extern","integer_sqrt=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libinteger_sqrt-e0f908c2c955f0b6.rmeta","--extern","num_traits=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libnum_traits-c30dd237327482c2.rmeta","--extern","codec=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libparity_scale_codec-f846fd866e90eb5c.rmeta","--extern","serde=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libserde-8e3179877dc95843.rmeta","--extern","sp_debug_derive=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_debug_derive-db633ac930505cf2.so","--extern","sp_std=/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_std-31df6ce51c93d927.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/ipfs/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ipfs/substrate-node-template/pallets/fileshare/target/rls/debug/deps/libsp_arithmetic-9e003245508a5a06.rmeta"},"prelude":{"crate_id":{"name":"sp_arithmetic","disambiguator":[8176318265880389008,7753099555937938416]},"crate_root":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src","external_crates":[{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","num":15,"id":{"name":"num_traits","disambiguator":[17866579788280904889,8893385662677143502]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","num":16,"id":{"name":"sp_std","disambiguator":[11276958021017479825,16325732417868216137]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","num":17,"id":{"name":"parity_scale_codec","disambiguator":[15638882894901664300,15938776292720705477]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","num":18,"id":{"name":"parity_scale_codec_derive","disambiguator":[379814399442547304,17581532101419470896]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","num":19,"id":{"name":"arrayvec","disambiguator":[1332372460335241694,11021197825096612758]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","num":20,"id":{"name":"byte_slice_cast","disambiguator":[3640415380441394815,6311138287404375443]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","num":21,"id":{"name":"serde","disambiguator":[13481768320746797087,7282555180186658229]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","num":22,"id":{"name":"serde_derive","disambiguator":[14214070500933581380,3624999802238555216]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","num":23,"id":{"name":"integer_sqrt","disambiguator":[9275225289175460513,11772712138008559603]}},{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","num":24,"id":{"name":"sp_debug_derive","disambiguator":[13522996333100151204,9314162219563761913]}}],"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":686,"byte_end":1671,"line_start":18,"line_end":57,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":23,"index":4},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27722,"byte_end":27739,"line_start":22,"line_end":22,"column_start":23,"column_end":40},"alias_span":null,"name":"IntegerSquareRoot","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":295},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27764,"byte_end":27768,"line_start":24,"line_end":24,"column_start":2,"column_end":6},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":305},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27770,"byte_end":27773,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":87},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27775,"byte_end":27782,"line_start":24,"line_end":24,"column_start":13,"column_end":20},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":360},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27784,"byte_end":27794,"line_start":24,"line_end":24,"column_start":22,"column_end":32},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":363},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27796,"byte_end":27806,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":365},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27808,"byte_end":27818,"line_start":24,"line_end":24,"column_start":46,"column_end":56},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":367},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27820,"byte_end":27830,"line_start":24,"line_end":24,"column_start":58,"column_end":68},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":372},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27832,"byte_end":27842,"line_start":24,"line_end":24,"column_start":70,"column_end":80},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":374},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27845,"byte_end":27855,"line_start":25,"line_end":25,"column_start":2,"column_end":12},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":377},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27857,"byte_end":27867,"line_start":25,"line_end":25,"column_start":14,"column_end":24},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":475},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27869,"byte_end":27880,"line_start":25,"line_end":25,"column_start":26,"column_end":37},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":15,"index":539},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27882,"byte_end":27888,"line_start":25,"line_end":25,"column_start":39,"column_end":45},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":87}},{"kind":"Use","ref_id":{"krate":0,"index":273},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1214,"byte_end":1230,"line_start":43,"line_end":43,"column_start":17,"column_end":33},"alias_span":null,"name":"FixedPointNumber","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1061},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1232,"byte_end":1239,"line_start":43,"line_end":43,"column_start":35,"column_end":42},"alias_span":null,"name":"Fixed64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1165},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1241,"byte_end":1249,"line_start":43,"line_end":43,"column_start":44,"column_end":52},"alias_span":null,"name":"Fixed128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1273,"byte_end":1281,"line_start":44,"line_end":44,"column_start":22,"column_end":30},"alias_span":null,"name":"PerThing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":447},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1283,"byte_end":1290,"line_start":44,"line_end":44,"column_start":32,"column_end":39},"alias_span":null,"name":"Percent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":567},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1292,"byte_end":1298,"line_start":44,"line_end":44,"column_start":41,"column_end":47},"alias_span":null,"name":"PerU16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":687},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1300,"byte_end":1307,"line_start":44,"line_end":44,"column_start":49,"column_end":56},"alias_span":null,"name":"Permill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":807},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1309,"byte_end":1316,"line_start":44,"line_end":44,"column_start":58,"column_end":65},"alias_span":null,"name":"Perbill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":927},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1318,"byte_end":1329,"line_start":44,"line_end":44,"column_start":67,"column_end":78},"alias_span":null,"name":"Perquintill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1203},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1353,"byte_end":1364,"line_start":45,"line_end":45,"column_start":22,"column_end":33},"alias_span":null,"name":"Rational128","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":686,"byte_end":1671,"line_start":18,"line_end":57,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":73},{"krate":0,"index":87},{"krate":0,"index":162},{"krate":0,"index":224},{"krate":0,"index":332},{"krate":0,"index":365},{"krate":0,"index":369},{"krate":0,"index":376}],"decl_id":null,"docs":" Minimal fixed point arithmetic primitives and types for runtime.\n","sig":null,"attributes":[{"value":"! Minimal fixed point arithmetic primitives and types for runtime.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":686,"byte_end":754,"line_start":18,"line_end":18,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"biguint","qualname":"::biguint","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":377},{"krate":0,"index":381},{"krate":0,"index":379},{"krate":0,"index":20},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":69},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":70},{"krate":0,"index":389},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":71}],"decl_id":null,"docs":" Infinite precision unsigned integer for substrate runtime.\n","sig":null,"attributes":[{"value":"! Infinite precision unsigned integer for substrate runtime.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":2359,"byte_end":2421,"line_start":18,"line_end":18,"column_start":1,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":12},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":2797,"byte_end":2803,"line_start":27,"line_end":27,"column_start":10,"column_end":16},"name":"Single","qualname":"::biguint::Single","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Representation of a single limb.\n","sig":null,"attributes":[{"value":"/ Representation of a single limb.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":2751,"byte_end":2787,"line_start":26,"line_end":26,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":13},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":2853,"byte_end":2859,"line_start":29,"line_end":29,"column_start":10,"column_end":16},"name":"Double","qualname":"::biguint::Double","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Representation of two limbs.\n","sig":null,"attributes":[{"value":"/ Representation of two limbs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":2811,"byte_end":2843,"line_start":28,"line_end":28,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":16},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":3181,"byte_end":3186,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"split","qualname":"::biguint::split","value":"fn (a: Double) -> (Single, Single)","parent":null,"children":[],"decl_id":null,"docs":" Splits a [`Double`] limb number into a tuple of two [`Single`] limb numbers.\n","sig":null,"attributes":[{"value":"/ Splits a [`Double`] limb number into a tuple of two [`Single`] limb numbers.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":3093,"byte_end":3173,"line_start":35,"line_end":35,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":17},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":3401,"byte_end":3411,"line_start":45,"line_end":45,"column_start":8,"column_end":18},"name":"mul_single","qualname":"::biguint::mul_single","value":"fn (a: Single, b: Single) -> Double","parent":null,"children":[],"decl_id":null,"docs":" Assumed as a given primitive.","sig":null,"attributes":[{"value":"/ Assumed as a given primitive.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":3290,"byte_end":3323,"line_start":42,"line_end":42,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":3324,"byte_end":3327,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Multiplication of two singles, which at most yields 1 double.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":3328,"byte_end":3393,"line_start":44,"line_end":44,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":3679,"byte_end":3689,"line_start":55,"line_end":55,"column_start":8,"column_end":18},"name":"add_single","qualname":"::biguint::add_single","value":"fn (a: Single, b: Single) -> (Single, Single)","parent":null,"children":[],"decl_id":null,"docs":" Assumed as a given primitive.","sig":null,"attributes":[{"value":"/ Assumed as a given primitive.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":3510,"byte_end":3543,"line_start":51,"line_end":51,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":3544,"byte_end":3547,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Addition of two singles, which at most takes a single limb of result and a carry,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":3548,"byte_end":3633,"line_start":53,"line_end":53,"column_start":1,"column_end":86}},{"value":"/ returned as a tuple respectively.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":3634,"byte_end":3671,"line_start":54,"line_end":54,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":377},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4310,"byte_end":4317,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"BigUint","qualname":"::biguint::BigUint","value":"BigUint {  }","parent":null,"children":[{"krate":0,"index":378}],"decl_id":null,"docs":" Simple wrapper around an infinitely large integer, represented as limbs of [`Single`].\n","sig":null,"attributes":[{"value":"/ Simple wrapper around an infinitely large integer, represented as limbs of [`Single`].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4182,"byte_end":4272,"line_start":75,"line_end":75,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4610,"byte_end":4623,"line_start":87,"line_end":87,"column_start":9,"column_end":22},"name":"with_capacity","qualname":"<BigUint>::with_capacity","value":"fn (size: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance with `size` limbs. This prevents any number with zero limbs to be\n created.","sig":null,"attributes":[{"value":"/ Create a new instance with `size` limbs. This prevents any number with zero limbs to be","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4431,"byte_end":4522,"line_start":83,"line_end":83,"column_start":2,"column_end":93}},{"value":"/ created.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4524,"byte_end":4536,"line_start":84,"line_end":84,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4538,"byte_end":4541,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ The behavior of the type is undefined with zero limbs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4543,"byte_end":4601,"line_start":86,"line_end":86,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4804,"byte_end":4814,"line_start":93,"line_end":93,"column_start":9,"column_end":19},"name":"from_limbs","qualname":"<BigUint>::from_limbs","value":"fn (limbs: &[Single]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Raw constructor from custom limbs. If `limbs` is empty, `Zero::zero()` implementation is\n used.\n","sig":null,"attributes":[{"value":"/ Raw constructor from custom limbs. If `limbs` is empty, `Zero::zero()` implementation is","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4692,"byte_end":4784,"line_start":91,"line_end":91,"column_start":2,"column_end":94}},{"value":"/ used.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4786,"byte_end":4795,"line_start":92,"line_end":92,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4968,"byte_end":4971,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"name":"len","qualname":"<BigUint>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Number of limbs.\n","sig":null,"attributes":[{"value":"/ Number of limbs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4939,"byte_end":4959,"line_start":101,"line_end":101,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5165,"byte_end":5168,"line_start":109,"line_end":109,"column_start":9,"column_end":12},"name":"get","qualname":"<BigUint>::get","value":"fn (&self, index: usize) -> Single","parent":null,"children":[],"decl_id":null,"docs":" A naive getter for limb at `index`. Note that the order is lsb -> msb.","sig":null,"attributes":[{"value":"/ A naive getter for limb at `index`. Note that the order is lsb -> msb.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5012,"byte_end":5086,"line_start":104,"line_end":104,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5088,"byte_end":5091,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5093,"byte_end":5108,"line_start":106,"line_end":106,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5110,"byte_end":5113,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ This panics if index is out of range.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5115,"byte_end":5156,"line_start":108,"line_end":108,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5328,"byte_end":5339,"line_start":114,"line_end":114,"column_start":9,"column_end":20},"name":"checked_get","qualname":"<BigUint>::checked_get","value":"fn (&self, index: usize) -> Option<Single>","parent":null,"children":[],"decl_id":null,"docs":" A naive getter for limb at `index`. Note that the order is lsb -> msb.\n","sig":null,"attributes":[{"value":"/ A naive getter for limb at `index`. Note that the order is lsb -> msb.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5245,"byte_end":5319,"line_start":113,"line_end":113,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5640,"byte_end":5643,"line_start":125,"line_end":125,"column_start":9,"column_end":12},"name":"set","qualname":"<BigUint>::set","value":"fn (&mut self, index: usize, value: Single) -> ()","parent":null,"children":[],"decl_id":null,"docs":" A naive setter for limb at `index`. Note that the order is lsb -> msb.","sig":null,"attributes":[{"value":"/ A naive setter for limb at `index`. Note that the order is lsb -> msb.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5487,"byte_end":5561,"line_start":120,"line_end":120,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5563,"byte_end":5566,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5568,"byte_end":5583,"line_start":122,"line_end":122,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5585,"byte_end":5588,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ This panics if index is out of range.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5590,"byte_end":5631,"line_start":124,"line_end":124,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5945,"byte_end":5948,"line_start":135,"line_end":135,"column_start":9,"column_end":12},"name":"lsb","qualname":"<BigUint>::lsb","value":"fn (&self) -> Single","parent":null,"children":[],"decl_id":null,"docs":" returns the least significant limb of the number.","sig":null,"attributes":[{"value":"/ returns the least significant limb of the number.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5762,"byte_end":5815,"line_start":130,"line_end":130,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5817,"byte_end":5820,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5822,"byte_end":5837,"line_start":132,"line_end":132,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5839,"byte_end":5842,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ While the constructor of the type prevents this, this can panic if `self` has no digits.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":5844,"byte_end":5936,"line_start":134,"line_end":134,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":6185,"byte_end":6188,"line_start":144,"line_end":144,"column_start":9,"column_end":12},"name":"msb","qualname":"<BigUint>::msb","value":"fn (&self) -> Single","parent":null,"children":[],"decl_id":null,"docs":" returns the most significant limb of the number.","sig":null,"attributes":[{"value":"/ returns the most significant limb of the number.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":6003,"byte_end":6055,"line_start":139,"line_end":139,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":6057,"byte_end":6060,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ #### Panics","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":6062,"byte_end":6077,"line_start":141,"line_end":141,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":6079,"byte_end":6082,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ While the constructor of the type prevents this, this can panic if `self` has no digits.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":6084,"byte_end":6176,"line_start":143,"line_end":143,"column_start":2,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":6322,"byte_end":6328,"line_start":149,"line_end":149,"column_start":9,"column_end":15},"name":"lstrip","qualname":"<BigUint>::lstrip","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Strips zeros from the left side (the most significant limbs) of `self`, if any.\n","sig":null,"attributes":[{"value":"/ Strips zeros from the left side (the most significant limbs) of `self`, if any.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":6230,"byte_end":6313,"line_start":148,"line_end":148,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":6889,"byte_end":6893,"line_start":163,"line_end":163,"column_start":9,"column_end":13},"name":"lpad","qualname":"<BigUint>::lpad","value":"fn (&mut self, size: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Zero-pad `self` from left to reach `size` limbs. Will not make any difference if `self`\n is already bigger than `size` limbs.\n","sig":null,"attributes":[{"value":"/ Zero-pad `self` from left to reach `size` limbs. Will not make any difference if `self`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":6747,"byte_end":6838,"line_start":161,"line_end":161,"column_start":2,"column_end":93}},{"value":"/ is already bigger than `size` limbs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":6840,"byte_end":6880,"line_start":162,"line_end":162,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":7571,"byte_end":7574,"line_start":180,"line_end":180,"column_start":9,"column_end":12},"name":"add","qualname":"<BigUint>::add","value":"fn (self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds `self` with `other`. self and other do not have to have any particular size. Given\n that the `n = max{size(self), size(other)}`, it will produce a number with `n + 1`\n limbs.","sig":null,"attributes":[{"value":"/ Adds `self` with `other`. self and other do not have to have any particular size. Given","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":7134,"byte_end":7225,"line_start":172,"line_end":172,"column_start":2,"column_end":93}},{"value":"/ that the `n = max{size(self), size(other)}`, it will produce a number with `n + 1`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":7227,"byte_end":7313,"line_start":173,"line_end":173,"column_start":2,"column_end":88}},{"value":"/ limbs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":7315,"byte_end":7325,"line_start":174,"line_end":174,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":7327,"byte_end":7330,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ This function does not strip the output and returns the original allocated `n + 1`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":7332,"byte_end":7418,"line_start":176,"line_end":176,"column_start":2,"column_end":88}},{"value":"/ limbs. The caller may strip the output if desired.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":7420,"byte_end":7474,"line_start":177,"line_end":177,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":7476,"byte_end":7479,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":7481,"byte_end":7562,"line_start":179,"line_end":179,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":8336,"byte_end":8339,"line_start":203,"line_end":203,"column_start":9,"column_end":12},"name":"sub","qualname":"<BigUint>::sub","value":"fn (self, other: &Self) -> Result<Self, Self>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts `other` from `self`. self and other do not have to have any particular size.\n Given that the `n = max{size(self), size(other)}`, it will produce a number of size `n`.","sig":null,"attributes":[{"value":"/ Subtracts `other` from `self`. self and other do not have to have any particular size.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":7980,"byte_end":8070,"line_start":197,"line_end":197,"column_start":2,"column_end":92}},{"value":"/ Given that the `n = max{size(self), size(other)}`, it will produce a number of size `n`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":8072,"byte_end":8164,"line_start":198,"line_end":198,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":8166,"byte_end":8169,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ If `other` is bigger than `self`, `Err(B - borrow)` is returned.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":8171,"byte_end":8239,"line_start":200,"line_end":200,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":8241,"byte_end":8244,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":8246,"byte_end":8327,"line_start":202,"line_end":202,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":9665,"byte_end":9668,"line_start":251,"line_end":251,"column_start":9,"column_end":12},"name":"mul","qualname":"<BigUint>::mul","value":"fn (self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies n-limb number `self` with m-limb number `other`.","sig":null,"attributes":[{"value":"/ Multiplies n-limb number `self` with m-limb number `other`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":9293,"byte_end":9356,"line_start":243,"line_end":243,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":9358,"byte_end":9361,"line_start":244,"line_end":244,"column_start":2,"column_end":5}},{"value":"/ The resulting number will always have `n + m` limbs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":9363,"byte_end":9419,"line_start":245,"line_end":245,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":9421,"byte_end":9424,"line_start":246,"line_end":246,"column_start":2,"column_end":5}},{"value":"/ This function does not strip the output and returns the original allocated `n + m`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":9426,"byte_end":9512,"line_start":247,"line_end":247,"column_start":2,"column_end":88}},{"value":"/ limbs. The caller may strip the output if desired.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":9514,"byte_end":9568,"line_start":248,"line_end":248,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":9570,"byte_end":9573,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":9575,"byte_end":9656,"line_start":250,"line_end":250,"column_start":2,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":10562,"byte_end":10570,"line_start":283,"line_end":283,"column_start":9,"column_end":17},"name":"div_unit","qualname":"<BigUint>::div_unit","value":"fn (self, mut other: Single) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Divides `self` by a single limb `other`. This can be used in cases where the original\n division cannot work due to the divisor (`other`) being just one limb.","sig":null,"attributes":[{"value":"/ Divides `self` by a single limb `other`. This can be used in cases where the original","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":10343,"byte_end":10432,"line_start":279,"line_end":279,"column_start":2,"column_end":91}},{"value":"/ division cannot work due to the divisor (`other`) being just one limb.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":10434,"byte_end":10508,"line_start":280,"line_end":280,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":10510,"byte_end":10513,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ Invariant: `other` cannot be zero.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":10515,"byte_end":10553,"line_start":282,"line_end":282,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11691,"byte_end":11694,"line_start":311,"line_end":311,"column_start":9,"column_end":12},"name":"div","qualname":"<BigUint>::div","value":"fn (self, other: &Self, rem: bool) -> Option<(Self, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Divides an `n + m` limb self by a `n` limb `other`. The result is a `m + 1` limb\n quotient and a `n` limb remainder, if enabled by passing `true` in `rem` argument, both\n in the form of an option's `Ok`.","sig":null,"attributes":[{"value":"/ Divides an `n + m` limb self by a `n` limb `other`. The result is a `m + 1` limb","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":10983,"byte_end":11067,"line_start":298,"line_end":298,"column_start":2,"column_end":86}},{"value":"/ quotient and a `n` limb remainder, if enabled by passing `true` in `rem` argument, both","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11069,"byte_end":11160,"line_start":299,"line_end":299,"column_start":2,"column_end":93}},{"value":"/ in the form of an option's `Ok`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11162,"byte_end":11198,"line_start":300,"line_end":300,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11200,"byte_end":11203,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ - requires `other` to be stripped and have no leading zeros.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11205,"byte_end":11269,"line_start":302,"line_end":302,"column_start":2,"column_end":66}},{"value":"/ - requires `self` to be stripped and have no leading zeros.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11271,"byte_end":11334,"line_start":303,"line_end":303,"column_start":2,"column_end":65}},{"value":"/ - requires `other` to have at least two limbs.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11336,"byte_end":11386,"line_start":304,"line_end":304,"column_start":2,"column_end":52}},{"value":"/ - requires `self` to have a greater length compared to `other`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11388,"byte_end":11455,"line_start":305,"line_end":305,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11457,"byte_end":11460,"line_start":306,"line_end":306,"column_start":2,"column_end":5}},{"value":"/ All arguments are examined without being stripped for the above conditions. If any of","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11462,"byte_end":11551,"line_start":307,"line_end":307,"column_start":2,"column_end":91}},{"value":"/ the above fails, `None` is returned.`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11553,"byte_end":11594,"line_start":308,"line_end":308,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11596,"byte_end":11599,"line_start":309,"line_end":309,"column_start":2,"column_end":5}},{"value":"/ Taken from \"The Art of Computer Programming\" by D.E. Knuth, vol 2, chapter 4.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":11601,"byte_end":11682,"line_start":310,"line_end":310,"column_start":2,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":73},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"helpers_128bit","qualname":"::helpers_128bit","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"decl_id":null,"docs":" Some helper functions to work with 128bit numbers. Note that the functionality provided here is\n only sensible to use with 128bit numbers because for smaller sizes, you can always rely on\n assumptions of a bigger type (u128) being available, or simply create a per-thing and use the\n multiplication implementation provided there.\n","sig":null,"attributes":[{"value":"! Some helper functions to work with 128bit numbers. Note that the functionality provided here is","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":23706,"byte_end":23805,"line_start":18,"line_end":18,"column_start":1,"column_end":100}},{"value":"! only sensible to use with 128bit numbers because for smaller sizes, you can always rely on","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":23806,"byte_end":23900,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"! assumptions of a bigger type (u128) being available, or simply create a per-thing and use the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":23901,"byte_end":23998,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"! multiplication implementation provided there.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":23999,"byte_end":24048,"line_start":21,"line_end":21,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":82},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":24214,"byte_end":24217,"line_start":28,"line_end":28,"column_start":8,"column_end":11},"name":"gcd","qualname":"::helpers_128bit::gcd","value":"fn (a: u128, b: u128) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Helper gcd function used in Rational128 implementation.\n","sig":null,"attributes":[{"value":"/ Helper gcd function used in Rational128 implementation.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":24147,"byte_end":24206,"line_start":27,"line_end":27,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":83},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":24614,"byte_end":24619,"line_start":43,"line_end":43,"column_start":8,"column_end":13},"name":"split","qualname":"::helpers_128bit::split","value":"fn (a: u128) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" split a u128 into two u64 limbs\n","sig":null,"attributes":[{"value":"/ split a u128 into two u64 limbs","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":24571,"byte_end":24606,"line_start":42,"line_end":42,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":24756,"byte_end":24767,"line_start":50,"line_end":50,"column_start":8,"column_end":19},"name":"to_big_uint","qualname":"::helpers_128bit::to_big_uint","value":"fn (x: u128) -> biguint::BigUint","parent":null,"children":[],"decl_id":null,"docs":" Convert a u128 to a u32 based biguint.\n","sig":null,"attributes":[{"value":"/ Convert a u128 to a u32 based biguint.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":24706,"byte_end":24748,"line_start":49,"line_end":49,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":85},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":25285,"byte_end":25305,"line_start":65,"line_end":65,"column_start":8,"column_end":28},"name":"multiply_by_rational","qualname":"::helpers_128bit::multiply_by_rational","value":"fn (mut a: u128, mut b: u128, mut c: u128) -> Result<u128, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Safely and accurately compute `a * b / c`. The approach is:\n   - Simply try `a * b / c`.\n   - Else, convert them both into big numbers and re-try. `Err` is returned if the result\n     cannot be safely casted back to u128.","sig":null,"attributes":[{"value":"/ Safely and accurately compute `a * b / c`. The approach is:","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":24986,"byte_end":25049,"line_start":59,"line_end":59,"column_start":1,"column_end":64}},{"value":"/   - Simply try `a * b / c`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":25050,"byte_end":25081,"line_start":60,"line_end":60,"column_start":1,"column_end":32}},{"value":"/   - Else, convert them both into big numbers and re-try. `Err` is returned if the result","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":25082,"byte_end":25174,"line_start":61,"line_end":61,"column_start":1,"column_end":93}},{"value":"/     cannot be safely casted back to u128.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":25175,"byte_end":25220,"line_start":62,"line_end":62,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":25221,"byte_end":25224,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Invariant: c must be greater than or equal to 1.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/helpers_128bit.rs","byte_start":25225,"byte_end":25277,"line_start":64,"line_end":64,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":87},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"traits","qualname":"::traits","value":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":108},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":138},{"krate":0,"index":143},{"krate":0,"index":148},{"krate":0,"index":155},{"krate":0,"index":160}],"decl_id":null,"docs":" Primitive traits for the runtime arithmetic.\n","sig":null,"attributes":[{"value":"! Primitive traits for the runtime arithmetic.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":27578,"byte_end":27626,"line_start":18,"line_end":18,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":121},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28103,"byte_end":28117,"line_start":33,"line_end":33,"column_start":11,"column_end":25},"name":"BaseArithmetic","qualname":"::traits::BaseArithmetic","value":"BaseArithmetic: From<u8> + Zero + One + IntegerSquareRoot + Add<Self, Output = Self> +\nAddAssign<Self> + Sub<Self, Output = Self> + SubAssign<Self> + Mul<Self,\nOutput = Self> + MulAssign<Self> + Div<Self, Output = Self> +\nDivAssign<Self> + Rem<Self, Output = Self> + RemAssign<Self> + Shl<u32, Output\n= Self> + Shr<u32, Output = Self> + CheckedShl + CheckedShr + CheckedAdd +\nCheckedSub + CheckedMul + CheckedDiv + Saturating + PartialOrd<Self> + Ord +\nBounded + HasCompact + Sized + TryFrom<u8> + TryInto<u8> + TryFrom<u16> +\nTryInto<u16> + TryFrom<u32> + TryInto<u32> + TryFrom<u64> + TryInto<u64> +\nTryFrom<u128> + TryInto<u128> + TryFrom<usize> + TryInto<usize> +\nUniqueSaturatedFrom<u8> + UniqueSaturatedInto<u8> + UniqueSaturatedFrom<u16> +\nUniqueSaturatedInto<u16> + UniqueSaturatedFrom<u32> +\nUniqueSaturatedInto<u32> + UniqueSaturatedFrom<u64> +\nUniqueSaturatedInto<u64> + UniqueSaturatedFrom<u128> +\nUniqueSaturatedInto<u128>","parent":null,"children":[],"decl_id":null,"docs":" A meta trait for arithmetic type operations, regardless of any limitation on size.\n","sig":null,"attributes":[{"value":"/ A meta trait for arithmetic type operations, regardless of any limitation on size.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28006,"byte_end":28092,"line_start":32,"line_end":32,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":124},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30333,"byte_end":30345,"line_start":78,"line_end":78,"column_start":11,"column_end":23},"name":"AtLeast32Bit","qualname":"::traits::AtLeast32Bit","value":"AtLeast32Bit: BaseArithmetic + From<u16> + From<u32>","parent":null,"children":[],"decl_id":null,"docs":" A meta trait for arithmetic.","sig":null,"attributes":[{"value":"/ A meta trait for arithmetic.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30032,"byte_end":30064,"line_start":73,"line_end":73,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30065,"byte_end":30068,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Arithmetic types do all the usual stuff you'd expect numbers to do. They are guaranteed to","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30069,"byte_end":30163,"line_start":75,"line_end":75,"column_start":1,"column_end":95}},{"value":"/ be able to represent at least `u32` values without loss, hence the trait implies `From<u32>`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30164,"byte_end":30260,"line_start":76,"line_end":76,"column_start":1,"column_end":97}},{"value":"/ and smaller integers. All other conversions are fallible.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30261,"byte_end":30322,"line_start":77,"line_end":77,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":127},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30609,"byte_end":30628,"line_start":84,"line_end":84,"column_start":11,"column_end":30},"name":"UniqueSaturatedFrom","qualname":"::traits::UniqueSaturatedFrom","value":"UniqueSaturatedFrom<T: Sized>: Sized","parent":null,"children":[{"krate":0,"index":129}],"decl_id":null,"docs":" Just like `From` except that if the source value is too big to fit into the destination type\n then it'll saturate the destination.\n","sig":null,"attributes":[{"value":"/ Just like `From` except that if the source value is too big to fit into the destination type","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30461,"byte_end":30557,"line_start":82,"line_end":82,"column_start":1,"column_end":97}},{"value":"/ then it'll saturate the destination.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30558,"byte_end":30598,"line_start":83,"line_end":83,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30724,"byte_end":30745,"line_start":86,"line_end":86,"column_start":5,"column_end":26},"name":"unique_saturated_from","qualname":"::traits::UniqueSaturatedFrom::unique_saturated_from","value":"fn (t: T) -> Self","parent":{"krate":0,"index":127},"children":[],"decl_id":null,"docs":" Convert from a value of `T` into an equivalent instance of `Self`.\n","sig":null,"attributes":[{"value":"/ Convert from a value of `T` into an equivalent instance of `Self`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30649,"byte_end":30719,"line_start":85,"line_end":85,"column_start":2,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":130},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30912,"byte_end":30931,"line_start":91,"line_end":91,"column_start":11,"column_end":30},"name":"UniqueSaturatedInto","qualname":"::traits::UniqueSaturatedInto","value":"UniqueSaturatedInto<T: Sized>: Sized","parent":null,"children":[{"krate":0,"index":132}],"decl_id":null,"docs":" Just like `Into` except that if the source value is too big to fit into the destination type\n then it'll saturate the destination.\n","sig":null,"attributes":[{"value":"/ Just like `Into` except that if the source value is too big to fit into the destination type","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30764,"byte_end":30860,"line_start":89,"line_end":89,"column_start":1,"column_end":97}},{"value":"/ then it'll saturate the destination.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30861,"byte_end":30901,"line_start":90,"line_end":90,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31011,"byte_end":31032,"line_start":93,"line_end":93,"column_start":5,"column_end":26},"name":"unique_saturated_into","qualname":"::traits::UniqueSaturatedInto::unique_saturated_into","value":"fn (self) -> T","parent":{"krate":0,"index":130},"children":[],"decl_id":null,"docs":" Consume self to return an equivalent value of `T`.\n","sig":null,"attributes":[{"value":"/ Consume self to return an equivalent value of `T`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30952,"byte_end":31006,"line_start":92,"line_end":92,"column_start":2,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":143},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31524,"byte_end":31534,"line_start":109,"line_end":109,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::traits::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147}],"decl_id":null,"docs":" Saturating arithmetic operations, returning maximum or minimum values instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating arithmetic operations, returning maximum or minimum values instead of overflowing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31416,"byte_end":31513,"line_start":108,"line_end":108,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31651,"byte_end":31665,"line_start":112,"line_end":112,"column_start":5,"column_end":19},"name":"saturating_add","qualname":"::traits::Saturating::saturating_add","value":"fn (self, rhs: Self) -> Self","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Saturating addition. Compute `self + rhs`, saturating at the numeric bounds instead of\n overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating addition. Compute `self + rhs`, saturating at the numeric bounds instead of","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31538,"byte_end":31628,"line_start":110,"line_end":110,"column_start":2,"column_end":92}},{"value":"/ overflowing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31630,"byte_end":31646,"line_start":111,"line_end":111,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31810,"byte_end":31824,"line_start":116,"line_end":116,"column_start":5,"column_end":19},"name":"saturating_sub","qualname":"::traits::Saturating::saturating_sub","value":"fn (self, rhs: Self) -> Self","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Saturating subtraction. Compute `self - rhs`, saturating at the numeric bounds instead of\n overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating subtraction. Compute `self - rhs`, saturating at the numeric bounds instead of","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31694,"byte_end":31787,"line_start":114,"line_end":114,"column_start":2,"column_end":95}},{"value":"/ overflowing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31789,"byte_end":31805,"line_start":115,"line_end":115,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31966,"byte_end":31980,"line_start":120,"line_end":120,"column_start":5,"column_end":19},"name":"saturating_mul","qualname":"::traits::Saturating::saturating_mul","value":"fn (self, rhs: Self) -> Self","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Saturating multiply. Compute `self * rhs`, saturating at the numeric bounds instead of\n overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating multiply. Compute `self * rhs`, saturating at the numeric bounds instead of","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31853,"byte_end":31943,"line_start":118,"line_end":118,"column_start":2,"column_end":92}},{"value":"/ overflowing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31945,"byte_end":31961,"line_start":119,"line_end":119,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":32131,"byte_end":32145,"line_start":124,"line_end":124,"column_start":5,"column_end":19},"name":"saturating_pow","qualname":"::traits::Saturating::saturating_pow","value":"fn (self, exp: usize) -> Self","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Saturating exponentiation. Compute `self.pow(exp)`, saturating at the numeric bounds\n instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating exponentiation. Compute `self.pow(exp)`, saturating at the numeric bounds","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":32009,"byte_end":32097,"line_start":122,"line_end":122,"column_start":2,"column_end":90}},{"value":"/ instead of overflowing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":32099,"byte_end":32126,"line_start":123,"line_end":123,"column_start":2,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":155},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33024,"byte_end":33043,"line_start":155,"line_end":155,"column_start":11,"column_end":30},"name":"SaturatedConversion","qualname":"::traits::SaturatedConversion","value":"SaturatedConversion","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":158}],"decl_id":null,"docs":" Convenience type to work around the highly unergonomic syntax needed\n to invoke the functions of overloaded generic traits, in this case\n `SaturatedFrom` and `SaturatedInto`.\n","sig":null,"attributes":[{"value":"/ Convenience type to work around the highly unergonomic syntax needed","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":32829,"byte_end":32901,"line_start":152,"line_end":152,"column_start":1,"column_end":73}},{"value":"/ to invoke the functions of overloaded generic traits, in this case","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":32902,"byte_end":32972,"line_start":153,"line_end":153,"column_start":1,"column_end":71}},{"value":"/ `SaturatedFrom` and `SaturatedInto`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":32973,"byte_end":33013,"line_start":154,"line_end":154,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33325,"byte_end":33339,"line_start":161,"line_end":161,"column_start":5,"column_end":19},"name":"saturated_from","qualname":"::traits::SaturatedConversion::saturated_from","value":"fn <T> (t: T) -> Self","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":" Convert from a value of `T` into an equivalent instance of `Self`.","sig":null,"attributes":[{"value":"/ Convert from a value of `T` into an equivalent instance of `Self`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33047,"byte_end":33117,"line_start":156,"line_end":156,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33119,"byte_end":33122,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ This just uses `UniqueSaturatedFrom` internally but with this","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33124,"byte_end":33189,"line_start":158,"line_end":158,"column_start":2,"column_end":67}},{"value":"/ variant you can provide the destination type using turbofish syntax","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33191,"byte_end":33262,"line_start":159,"line_end":159,"column_start":2,"column_end":73}},{"value":"/ in case Rust happens not to assume the correct type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33264,"byte_end":33320,"line_start":160,"line_end":160,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33722,"byte_end":33736,"line_start":170,"line_end":170,"column_start":5,"column_end":19},"name":"saturated_into","qualname":"::traits::SaturatedConversion::saturated_into","value":"fn <T> (self) -> T","parent":{"krate":0,"index":155},"children":[],"decl_id":null,"docs":" Consume self to return an equivalent value of `T`.","sig":null,"attributes":[{"value":"/ Consume self to return an equivalent value of `T`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33460,"byte_end":33514,"line_start":165,"line_end":165,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33516,"byte_end":33519,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ This just uses `UniqueSaturatedInto` internally but with this","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33521,"byte_end":33586,"line_start":167,"line_end":167,"column_start":2,"column_end":67}},{"value":"/ variant you can provide the destination type using turbofish syntax","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33588,"byte_end":33659,"line_start":168,"line_end":168,"column_start":2,"column_end":73}},{"value":"/ in case Rust happens not to assume the correct type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33661,"byte_end":33717,"line_start":169,"line_end":169,"column_start":2,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":182},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35002,"byte_end":35010,"line_start":30,"line_end":30,"column_start":11,"column_end":19},"name":"PerThing","qualname":"::per_things::PerThing","value":"PerThing: Sized + Saturating + Copy + Default + Eq + PartialEq + Ord + PartialOrd +\nBounded + fmt::Debug","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205}],"decl_id":null,"docs":" Something that implements a fixed point ration with an arbitrary granularity `X`, as _parts per\n `X`_.\n","sig":null,"attributes":[{"value":"/ Something that implements a fixed point ration with an arbitrary granularity `X`, as _parts per","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":34882,"byte_end":34981,"line_start":28,"line_end":28,"column_start":1,"column_end":100}},{"value":"/ `X`_.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":34982,"byte_end":34991,"line_start":29,"line_end":29,"column_start":1,"column_end":10}}]},{"kind":"Type","id":{"krate":0,"index":183},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35166,"byte_end":35171,"line_start":34,"line_end":34,"column_start":7,"column_end":12},"name":"Inner","qualname":"::per_things::PerThing::Inner","value":"type Inner: BaseArithmetic + Copy + fmt::Debug;","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" The data type used to build this per-thingy.\n","sig":null,"attributes":[{"value":"/ The data type used to build this per-thingy.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35111,"byte_end":35159,"line_start":33,"line_end":33,"column_start":2,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":184},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35351,"byte_end":35356,"line_start":38,"line_end":38,"column_start":7,"column_end":12},"name":"Upper","qualname":"::per_things::PerThing::Upper","value":"type Upper: BaseArithmetic + Copy + From<Self::Inner> + TryInto<Self::Inner> + fmt::Debug;","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" A data type larger than `Self::Inner`, used to avoid overflow in some computations.\n It must be able to compute `ACCURACY^2`.\n","sig":null,"attributes":[{"value":"/ A data type larger than `Self::Inner`, used to avoid overflow in some computations.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35211,"byte_end":35298,"line_start":36,"line_end":36,"column_start":2,"column_end":89}},{"value":"/ It must be able to compute `ACCURACY^2`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35300,"byte_end":35344,"line_start":37,"line_end":37,"column_start":2,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":185},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35477,"byte_end":35485,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"ACCURACY","qualname":"::per_things::PerThing::ACCURACY","value":"Self::Inner","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" The accuracy of this type.\n","sig":null,"attributes":[{"value":"/ The accuracy of this type.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35439,"byte_end":35469,"line_start":40,"line_end":40,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35547,"byte_end":35551,"line_start":44,"line_end":44,"column_start":5,"column_end":9},"name":"zero","qualname":"::per_things::PerThing::zero","value":"fn () -> Self","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Equivalent to `Self::from_parts(0)`.\n","sig":null,"attributes":[{"value":"/ Equivalent to `Self::from_parts(0)`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35502,"byte_end":35542,"line_start":43,"line_end":43,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35648,"byte_end":35655,"line_start":47,"line_end":47,"column_start":5,"column_end":12},"name":"is_zero","qualname":"::per_things::PerThing::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return `true` if this is nothing.\n","sig":null,"attributes":[{"value":"/ Return `true` if this is nothing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35606,"byte_end":35643,"line_start":46,"line_end":46,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35777,"byte_end":35780,"line_start":50,"line_end":50,"column_start":5,"column_end":8},"name":"one","qualname":"::per_things::PerThing::one","value":"fn () -> Self","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Equivalent to `Self::from_parts(Self::ACCURACY)`.\n","sig":null,"attributes":[{"value":"/ Equivalent to `Self::from_parts(Self::ACCURACY)`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35719,"byte_end":35772,"line_start":49,"line_end":49,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35868,"byte_end":35874,"line_start":53,"line_end":53,"column_start":5,"column_end":11},"name":"is_one","qualname":"::per_things::PerThing::is_one","value":"fn (&self) -> bool","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return `true` if this is one.\n","sig":null,"attributes":[{"value":"/ Return `true` if this is one.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35830,"byte_end":35863,"line_start":52,"line_end":52,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36056,"byte_end":36068,"line_start":57,"line_end":57,"column_start":5,"column_end":17},"name":"from_percent","qualname":"::per_things::PerThing::from_percent","value":"fn (x: Self::Inner) -> Self","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Build this type from a percent. Equivalent to `Self::from_parts(x * Self::ACCURACY / 100)`\n but more accurate.\n","sig":null,"attributes":[{"value":"/ Build this type from a percent. Equivalent to `Self::from_parts(x * Self::ACCURACY / 100)`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35933,"byte_end":36027,"line_start":55,"line_end":55,"column_start":2,"column_end":96}},{"value":"/ but more accurate.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36029,"byte_end":36051,"line_start":56,"line_end":56,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36435,"byte_end":36441,"line_start":66,"line_end":66,"column_start":5,"column_end":11},"name":"square","qualname":"::per_things::PerThing::square","value":"fn (self) -> Self","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Return the product of multiplication of this value by itself.\n","sig":null,"attributes":[{"value":"/ Return the product of multiplication of this value by itself.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36365,"byte_end":36430,"line_start":65,"line_end":65,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37123,"byte_end":37132,"line_start":87,"line_end":87,"column_start":5,"column_end":14},"name":"mul_floor","qualname":"::per_things::PerThing::mul_floor","value":"fn <N> (self, b: N) -> N","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Multiplication that always rounds down to a whole number. The standard `Mul` rounds to the\n nearest whole number.","sig":null,"attributes":[{"value":"/ Multiplication that always rounds down to a whole number. The standard `Mul` rounds to the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36607,"byte_end":36701,"line_start":72,"line_end":72,"column_start":2,"column_end":96}},{"value":"/ nearest whole number.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36703,"byte_end":36728,"line_start":73,"line_end":73,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36730,"byte_end":36733,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36735,"byte_end":36746,"line_start":75,"line_end":75,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36748,"byte_end":36793,"line_start":76,"line_end":76,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36795,"byte_end":36813,"line_start":77,"line_end":77,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36815,"byte_end":36838,"line_start":78,"line_end":78,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(34) * 10u64, 3);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36840,"byte_end":36893,"line_start":79,"line_end":79,"column_start":2,"column_end":55}},{"value":"/ assert_eq!(Percent::from_percent(36) * 10u64, 4);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36895,"byte_end":36948,"line_start":80,"line_end":80,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36950,"byte_end":36953,"line_start":81,"line_end":81,"column_start":2,"column_end":5}},{"value":"/ // round down","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36955,"byte_end":36972,"line_start":82,"line_end":82,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(Percent::from_percent(34).mul_floor(10u64), 3);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":36974,"byte_end":37036,"line_start":83,"line_end":83,"column_start":2,"column_end":64}},{"value":"/ assert_eq!(Percent::from_percent(36).mul_floor(10u64), 3);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37038,"byte_end":37100,"line_start":84,"line_end":84,"column_start":2,"column_end":64}},{"value":"/ # }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37102,"byte_end":37109,"line_start":85,"line_end":85,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37111,"byte_end":37118,"line_start":86,"line_end":86,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37922,"byte_end":37930,"line_start":109,"line_end":109,"column_start":5,"column_end":13},"name":"mul_ceil","qualname":"::per_things::PerThing::mul_ceil","value":"fn <N> (self, b: N) -> N","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Multiplication that always rounds the result up to a whole number. The standard `Mul`\n rounds to the nearest whole number.","sig":null,"attributes":[{"value":"/ Multiplication that always rounds the result up to a whole number. The standard `Mul`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37401,"byte_end":37490,"line_start":94,"line_end":94,"column_start":2,"column_end":91}},{"value":"/ rounds to the nearest whole number.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37492,"byte_end":37531,"line_start":95,"line_end":95,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37533,"byte_end":37536,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37538,"byte_end":37549,"line_start":97,"line_end":97,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37551,"byte_end":37596,"line_start":98,"line_end":98,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37598,"byte_end":37616,"line_start":99,"line_end":99,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37618,"byte_end":37641,"line_start":100,"line_end":100,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(34) * 10u64, 3);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37643,"byte_end":37696,"line_start":101,"line_end":101,"column_start":2,"column_end":55}},{"value":"/ assert_eq!(Percent::from_percent(36) * 10u64, 4);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37698,"byte_end":37751,"line_start":102,"line_end":102,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37753,"byte_end":37756,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ // round up","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37758,"byte_end":37773,"line_start":104,"line_end":104,"column_start":2,"column_end":17}},{"value":"/ assert_eq!(Percent::from_percent(34).mul_ceil(10u64), 4);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37775,"byte_end":37836,"line_start":105,"line_end":105,"column_start":2,"column_end":63}},{"value":"/ assert_eq!(Percent::from_percent(36).mul_ceil(10u64), 4);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37838,"byte_end":37899,"line_start":106,"line_end":106,"column_start":2,"column_end":63}},{"value":"/ # }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37901,"byte_end":37908,"line_start":107,"line_end":107,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":37910,"byte_end":37917,"line_start":108,"line_end":108,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38559,"byte_end":38584,"line_start":125,"line_end":125,"column_start":5,"column_end":30},"name":"saturating_reciprocal_mul","qualname":"::per_things::PerThing::saturating_reciprocal_mul","value":"fn <N> (self, b: N) -> N","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Saturating multiplication by the reciprocal of `self`.\tThe result is rounded to the\n nearest whole number and saturates at the numeric bounds instead of overflowing.","sig":null,"attributes":[{"value":"/ Saturating multiplication by the reciprocal of `self`.\tThe result is rounded to the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38197,"byte_end":38284,"line_start":116,"line_end":116,"column_start":2,"column_end":89}},{"value":"/ nearest whole number and saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38286,"byte_end":38370,"line_start":117,"line_end":117,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38372,"byte_end":38375,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38377,"byte_end":38388,"line_start":119,"line_end":119,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38390,"byte_end":38435,"line_start":120,"line_end":120,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38437,"byte_end":38455,"line_start":121,"line_end":121,"column_start":2,"column_end":20}},{"value":"/ assert_eq!(Percent::from_percent(50).saturating_reciprocal_mul(10u64), 20);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38457,"byte_end":38536,"line_start":122,"line_end":122,"column_start":2,"column_end":81}},{"value":"/ # }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38538,"byte_end":38545,"line_start":123,"line_end":123,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38547,"byte_end":38554,"line_start":124,"line_end":124,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39374,"byte_end":39405,"line_start":144,"line_end":144,"column_start":5,"column_end":36},"name":"saturating_reciprocal_mul_floor","qualname":"::per_things::PerThing::saturating_reciprocal_mul_floor","value":"fn <N> (self, b: N) -> N","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Saturating multiplication by the reciprocal of `self`.\tThe result is rounded down to the\n nearest whole number and saturates at the numeric bounds instead of overflowing.","sig":null,"attributes":[{"value":"/ Saturating multiplication by the reciprocal of `self`.\tThe result is rounded down to the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38876,"byte_end":38968,"line_start":132,"line_end":132,"column_start":2,"column_end":94}},{"value":"/ nearest whole number and saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":38970,"byte_end":39054,"line_start":133,"line_end":133,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39056,"byte_end":39059,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39061,"byte_end":39072,"line_start":135,"line_end":135,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39074,"byte_end":39119,"line_start":136,"line_end":136,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39121,"byte_end":39139,"line_start":137,"line_end":137,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39141,"byte_end":39164,"line_start":138,"line_end":138,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(60).saturating_reciprocal_mul(10u64), 17);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39166,"byte_end":39245,"line_start":139,"line_end":139,"column_start":2,"column_end":81}},{"value":"/ // round down","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39247,"byte_end":39264,"line_start":140,"line_end":140,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(Percent::from_percent(60).saturating_reciprocal_mul_floor(10u64), 16);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39266,"byte_end":39351,"line_start":141,"line_end":141,"column_start":2,"column_end":87}},{"value":"/ # }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39353,"byte_end":39360,"line_start":142,"line_end":142,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39362,"byte_end":39369,"line_start":143,"line_end":143,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40187,"byte_end":40217,"line_start":163,"line_end":163,"column_start":5,"column_end":35},"name":"saturating_reciprocal_mul_ceil","qualname":"::per_things::PerThing::saturating_reciprocal_mul_ceil","value":"fn <N> (self, b: N) -> N","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Saturating multiplication by the reciprocal of `self`.\tThe result is rounded up to the\n nearest whole number and saturates at the numeric bounds instead of overflowing.","sig":null,"attributes":[{"value":"/ Saturating multiplication by the reciprocal of `self`.\tThe result is rounded up to the","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39694,"byte_end":39784,"line_start":151,"line_end":151,"column_start":2,"column_end":92}},{"value":"/ nearest whole number and saturates at the numeric bounds instead of overflowing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39786,"byte_end":39870,"line_start":152,"line_end":152,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39872,"byte_end":39875,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39877,"byte_end":39888,"line_start":154,"line_end":154,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39890,"byte_end":39935,"line_start":155,"line_end":155,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39937,"byte_end":39955,"line_start":156,"line_end":156,"column_start":2,"column_end":20}},{"value":"/ // round to nearest","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39957,"byte_end":39980,"line_start":157,"line_end":157,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(Percent::from_percent(61).saturating_reciprocal_mul(10u64), 16);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":39982,"byte_end":40061,"line_start":158,"line_end":158,"column_start":2,"column_end":81}},{"value":"/ // round up","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40063,"byte_end":40078,"line_start":159,"line_end":159,"column_start":2,"column_end":17}},{"value":"/ assert_eq!(Percent::from_percent(61).saturating_reciprocal_mul_ceil(10u64), 17);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40080,"byte_end":40164,"line_start":160,"line_end":160,"column_start":2,"column_end":86}},{"value":"/ # }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40166,"byte_end":40173,"line_start":161,"line_end":161,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40175,"byte_end":40182,"line_start":162,"line_end":162,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40567,"byte_end":40578,"line_start":171,"line_end":171,"column_start":5,"column_end":16},"name":"deconstruct","qualname":"::per_things::PerThing::deconstruct","value":"fn (self) -> Self::Inner","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Consume self and return the number of parts per thing.\n","sig":null,"attributes":[{"value":"/ Consume self and return the number of parts per thing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40504,"byte_end":40562,"line_start":170,"line_end":170,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40661,"byte_end":40671,"line_start":174,"line_end":174,"column_start":5,"column_end":15},"name":"from_parts","qualname":"::per_things::PerThing::from_parts","value":"fn (parts: Self::Inner) -> Self","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Build this type from a number of parts per thing.\n","sig":null,"attributes":[{"value":"/ Build this type from a number of parts per thing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40603,"byte_end":40656,"line_start":173,"line_end":173,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40769,"byte_end":40782,"line_start":178,"line_end":178,"column_start":5,"column_end":18},"name":"from_fraction","qualname":"::per_things::PerThing::from_fraction","value":"fn (x: f64) -> Self","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Converts a fraction into `Self`.\n","sig":null,"attributes":[{"value":"/ Converts a fraction into `Self`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40703,"byte_end":40739,"line_start":176,"line_end":176,"column_start":2,"column_end":38}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40741,"byte_end":40764,"line_start":177,"line_end":177,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41464,"byte_end":41491,"line_start":198,"line_end":198,"column_start":5,"column_end":32},"name":"from_rational_approximation","qualname":"::per_things::PerThing::from_rational_approximation","value":"fn <N> (p: N, q: N) -> Self","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Approximate the fraction `p/q` into a per-thing fraction. This will never overflow.","sig":null,"attributes":[{"value":"/ Approximate the fraction `p/q` into a per-thing fraction. This will never overflow.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40802,"byte_end":40889,"line_start":180,"line_end":180,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40891,"byte_end":40894,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ The computation of this approximation is performed in the generic type `N`. Given","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40896,"byte_end":40981,"line_start":182,"line_end":182,"column_start":2,"column_end":87}},{"value":"/ `M` as the data type that can hold the maximum value of this per-thing (e.g. u32 for","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":40983,"byte_end":41071,"line_start":183,"line_end":183,"column_start":2,"column_end":90}},{"value":"/ perbill), this can only work if `N == M` or `N: From<M> + TryInto<M>`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41073,"byte_end":41147,"line_start":184,"line_end":184,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41149,"byte_end":41152,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ Note that this always rounds _down_, i.e.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41154,"byte_end":41199,"line_start":186,"line_end":186,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41201,"byte_end":41204,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41206,"byte_end":41217,"line_start":188,"line_end":188,"column_start":2,"column_end":13}},{"value":"/ # use sp_arithmetic::{Percent, PerThing};","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41219,"byte_end":41264,"line_start":189,"line_end":189,"column_start":2,"column_end":47}},{"value":"/ # fn main () {","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41266,"byte_end":41284,"line_start":190,"line_end":190,"column_start":2,"column_end":20}},{"value":"/ // 989/100 is technically closer to 99%.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41286,"byte_end":41330,"line_start":191,"line_end":191,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41332,"byte_end":41347,"line_start":192,"line_end":192,"column_start":2,"column_end":17}},{"value":"/\t\tPercent::from_rational_approximation(989, 1000),","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41349,"byte_end":41402,"line_start":193,"line_end":193,"column_start":2,"column_end":55}},{"value":"/\t\tPercent::from_parts(98),","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41404,"byte_end":41433,"line_start":194,"line_end":194,"column_start":2,"column_end":31}},{"value":"/\t);","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41435,"byte_end":41441,"line_start":195,"line_end":195,"column_start":2,"column_end":8}},{"value":"/ # }","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41443,"byte_end":41450,"line_start":196,"line_end":196,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":41452,"byte_end":41459,"line_start":197,"line_end":197,"column_start":2,"column_end":9}}]},{"kind":"Struct","id":{"krate":0,"index":447},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":69739,"byte_end":69746,"line_start":1138,"line_end":1138,"column_start":2,"column_end":9},"name":"Percent","qualname":"::per_things::Percent","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":45006,"byte_end":45071,"line_start":311,"line_end":311,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":45074,"byte_end":45077,"line_start":312,"line_end":312,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":567},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":69842,"byte_end":69848,"line_start":1147,"line_end":1147,"column_start":2,"column_end":8},"name":"PerU16","qualname":"::per_things::PerU16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":45006,"byte_end":45071,"line_start":311,"line_end":311,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":45074,"byte_end":45077,"line_start":312,"line_end":312,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":687},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":69955,"byte_end":69962,"line_start":1156,"line_end":1156,"column_start":2,"column_end":9},"name":"Permill","qualname":"::per_things::Permill","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":45006,"byte_end":45071,"line_start":311,"line_end":311,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":45074,"byte_end":45077,"line_start":312,"line_end":312,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":807},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":70075,"byte_end":70082,"line_start":1165,"line_end":1165,"column_start":2,"column_end":9},"name":"Perbill","qualname":"::per_things::Perbill","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":45006,"byte_end":45071,"line_start":311,"line_end":311,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":45074,"byte_end":45077,"line_start":312,"line_end":312,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":927},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":70199,"byte_end":70210,"line_start":1174,"line_end":1174,"column_start":2,"column_end":13},"name":"Perquintill","qualname":"::per_things::Perquintill","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point representation of a number in the range [0, 1].","sig":null,"attributes":[{"value":"/ A fixed point representation of a number in the range [0, 1].","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":45006,"byte_end":45071,"line_start":311,"line_end":311,"column_start":3,"column_end":68}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":45074,"byte_end":45077,"line_start":312,"line_end":312,"column_start":3,"column_end":6}}]},{"kind":"Trait","id":{"krate":0,"index":262},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":71648,"byte_end":71665,"line_start":33,"line_end":33,"column_start":11,"column_end":28},"name":"FixedPointOperand","qualname":"::fixed::FixedPointOperand","value":"FixedPointOperand: Copy + Clone + Bounded + Zero + Saturating + PartialOrd +\nUniqueSaturatedInto<u128> + TryFrom<u128> + CheckedNeg","parent":null,"children":[],"decl_id":null,"docs":" Integer types that can be used to interact with `FixedPointNumber` implementations.\n","sig":null,"attributes":[{"value":"/ Integer types that can be used to interact with `FixedPointNumber` implementations.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":71550,"byte_end":71637,"line_start":32,"line_end":32,"column_start":1,"column_end":88}}]},{"kind":"Trait","id":{"krate":0,"index":273},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72486,"byte_end":72502,"line_start":54,"line_end":54,"column_start":11,"column_end":27},"name":"FixedPointNumber","qualname":"::fixed::FixedPointNumber","value":"FixedPointNumber: Sized + Copy + Default + Debug + Saturating + Bounded + Eq + PartialEq + Ord +\nPartialOrd + CheckedSub + CheckedAdd + CheckedMul + CheckedDiv + Add + Sub +\nDiv + Mul","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"decl_id":null,"docs":" Something that implements a decimal fixed point number.","sig":null,"attributes":[{"value":"/ Something that implements a decimal fixed point number.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72126,"byte_end":72185,"line_start":47,"line_end":47,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72186,"byte_end":72189,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The precision is given by `Self::DIV`, i.e. `1 / DIV` can be represented.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72190,"byte_end":72267,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72268,"byte_end":72271,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Each type can store numbers from `Self::Inner::min_value() / Self::DIV`","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72272,"byte_end":72347,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/ to `Self::Inner::max_value() / Self::DIV`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72348,"byte_end":72394,"line_start":52,"line_end":52,"column_start":1,"column_end":47}},{"value":"/ This is also referred to as the _accuracy_ of the type in the documentation.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72395,"byte_end":72475,"line_start":53,"line_end":53,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":274},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72747,"byte_end":72752,"line_start":62,"line_end":62,"column_start":7,"column_end":12},"name":"Inner","qualname":"::fixed::FixedPointNumber::Inner","value":"type Inner: Debug + One + CheckedMul + CheckedDiv + CheckedNeg + Signed + FixedPointOperand;","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" The underlying data type used for this fixed point number.\n","sig":null,"attributes":[{"value":"/ The underlying data type used for this fixed point number.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72678,"byte_end":72740,"line_start":61,"line_end":61,"column_start":2,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":275},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72924,"byte_end":72927,"line_start":65,"line_end":65,"column_start":8,"column_end":11},"name":"DIV","qualname":"::fixed::FixedPointNumber::DIV","value":"Self::Inner","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Precision of this fixed point implementation. It should be a power of `10`.\n","sig":null,"attributes":[{"value":"/ Precision of this fixed point implementation. It should be a power of `10`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72837,"byte_end":72916,"line_start":64,"line_end":64,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72998,"byte_end":73006,"line_start":68,"line_end":68,"column_start":5,"column_end":13},"name":"accuracy","qualname":"::fixed::FixedPointNumber::accuracy","value":"fn () -> Self::Inner","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Precision of this fixed point implementation.\n","sig":null,"attributes":[{"value":"/ Precision of this fixed point implementation.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72944,"byte_end":72993,"line_start":67,"line_end":67,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73092,"byte_end":73102,"line_start":73,"line_end":73,"column_start":5,"column_end":15},"name":"from_inner","qualname":"::fixed::FixedPointNumber::from_inner","value":"fn (int: Self::Inner) -> Self","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Builds this type from an integer number.\n","sig":null,"attributes":[{"value":"/ Builds this type from an integer number.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73043,"byte_end":73087,"line_start":72,"line_end":72,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73189,"byte_end":73199,"line_start":76,"line_end":76,"column_start":5,"column_end":15},"name":"into_inner","qualname":"::fixed::FixedPointNumber::into_inner","value":"fn (self) -> Self::Inner","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Consumes `self` and returns the inner raw value.\n","sig":null,"attributes":[{"value":"/ Consumes `self` and returns the inner raw value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73132,"byte_end":73184,"line_start":75,"line_end":75,"column_start":2,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73347,"byte_end":73370,"line_start":81,"line_end":81,"column_start":5,"column_end":28},"name":"saturating_from_integer","qualname":"::fixed::FixedPointNumber::saturating_from_integer","value":"fn <N> (int: N) -> Self","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Creates self from an integer number `int`.","sig":null,"attributes":[{"value":"/ Creates self from an integer number `int`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73224,"byte_end":73270,"line_start":78,"line_end":78,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73272,"byte_end":73275,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ Returns `Self::max` or `Self::min` if `int` exceeds accuracy.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73277,"byte_end":73342,"line_start":80,"line_end":80,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73610,"byte_end":73630,"line_start":88,"line_end":88,"column_start":5,"column_end":25},"name":"checked_from_integer","qualname":"::fixed::FixedPointNumber::checked_from_integer","value":"fn (int: Self::Inner) -> Option<Self>","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Creates `self` from an integer number `int`.","sig":null,"attributes":[{"value":"/ Creates `self` from an integer number `int`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73505,"byte_end":73553,"line_start":85,"line_end":85,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73555,"byte_end":73558,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if `int` exceeds accuracy.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73560,"byte_end":73605,"line_start":87,"line_end":87,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73897,"byte_end":73921,"line_start":95,"line_end":95,"column_start":5,"column_end":29},"name":"saturating_from_rational","qualname":"::fixed::FixedPointNumber::saturating_from_rational","value":"fn <N, D> (n: N, d: D) -> Self","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Creates `self` from a rational number. Equal to `n / d`.","sig":null,"attributes":[{"value":"/ Creates `self` from a rational number. Equal to `n / d`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73739,"byte_end":73799,"line_start":92,"line_end":92,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73801,"byte_end":73804,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ Panics if `d = 0`. Returns `Self::max` or `Self::min` if `n / d` exceeds accuracy.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":73806,"byte_end":73892,"line_start":94,"line_end":94,"column_start":2,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":74251,"byte_end":74272,"line_start":105,"line_end":105,"column_start":5,"column_end":26},"name":"checked_from_rational","qualname":"::fixed::FixedPointNumber::checked_from_rational","value":"fn <N, D> (n: N, d: D) -> Option<Self>","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Creates `self` from a rational number. Equal to `n / d`.","sig":null,"attributes":[{"value":"/ Creates `self` from a rational number. Equal to `n / d`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":74120,"byte_end":74180,"line_start":102,"line_end":102,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":74182,"byte_end":74185,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if `d == 0` or `n / d` exceeds accuracy.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":74187,"byte_end":74246,"line_start":104,"line_end":104,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":74804,"byte_end":74819,"line_start":122,"line_end":122,"column_start":5,"column_end":20},"name":"checked_mul_int","qualname":"::fixed::FixedPointNumber::checked_mul_int","value":"fn <N> (self, n: N) -> Option<N>","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Checked multiplication for integer type `N`. Equal to `self * n`.","sig":null,"attributes":[{"value":"/ Checked multiplication for integer type `N`. Equal to `self * n`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":74670,"byte_end":74739,"line_start":119,"line_end":119,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":74741,"byte_end":74744,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the result does not fit in `N`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":74746,"byte_end":74799,"line_start":121,"line_end":121,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":75288,"byte_end":75306,"line_start":134,"line_end":134,"column_start":5,"column_end":23},"name":"saturating_mul_int","qualname":"::fixed::FixedPointNumber::saturating_mul_int","value":"fn <N> (self, n: N) -> N","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Saturating multiplication for integer type `N`. Equal to `self * n`.","sig":null,"attributes":[{"value":"/ Saturating multiplication for integer type `N`. Equal to `self * n`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":75137,"byte_end":75209,"line_start":131,"line_end":131,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":75211,"byte_end":75214,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ Returns `N::min` or `N::max` if the result does not fit in `N`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":75216,"byte_end":75283,"line_start":133,"line_end":133,"column_start":2,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":75561,"byte_end":75576,"line_start":141,"line_end":141,"column_start":5,"column_end":20},"name":"checked_div_int","qualname":"::fixed::FixedPointNumber::checked_div_int","value":"fn <N> (self, d: N) -> Option<N>","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Checked division for integer type `N`. Equal to `self / d`.","sig":null,"attributes":[{"value":"/ Checked division for integer type `N`. Equal to `self / d`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":75421,"byte_end":75484,"line_start":138,"line_end":138,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":75486,"byte_end":75489,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if the result does not fit in `N` or `d == 0`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":75491,"byte_end":75556,"line_start":140,"line_end":140,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76076,"byte_end":76094,"line_start":154,"line_end":154,"column_start":5,"column_end":23},"name":"saturating_div_int","qualname":"::fixed::FixedPointNumber::saturating_div_int","value":"fn <N> (self, d: N) -> N","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Saturating division for integer type `N`. Equal to `self / d`.","sig":null,"attributes":[{"value":"/ Saturating division for integer type `N`. Equal to `self / d`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":75911,"byte_end":75977,"line_start":151,"line_end":151,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":75979,"byte_end":75982,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ Panics if `d == 0`. Returns `N::min` or `N::max` if the result does not fit in `N`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":75984,"byte_end":76071,"line_start":153,"line_end":153,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76482,"byte_end":76504,"line_start":165,"line_end":165,"column_start":5,"column_end":27},"name":"saturating_mul_acc_int","qualname":"::fixed::FixedPointNumber::saturating_mul_acc_int","value":"fn <N> (self, n: N) -> N","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Saturating multiplication for integer type `N`, adding the result back.\n Equal to `self * n + n`.","sig":null,"attributes":[{"value":"/ Saturating multiplication for integer type `N`, adding the result back.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76274,"byte_end":76349,"line_start":161,"line_end":161,"column_start":2,"column_end":77}},{"value":"/ Equal to `self * n + n`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76351,"byte_end":76379,"line_start":162,"line_end":162,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76381,"byte_end":76384,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ Returns `N::min` or `N::max` if the multiplication or final result does not fit in `N`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76386,"byte_end":76477,"line_start":164,"line_end":164,"column_start":2,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76687,"byte_end":76701,"line_start":172,"line_end":172,"column_start":5,"column_end":19},"name":"saturating_abs","qualname":"::fixed::FixedPointNumber::saturating_abs","value":"fn (self) -> Self","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Saturating absolute value.","sig":null,"attributes":[{"value":"/ Saturating absolute value.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76598,"byte_end":76628,"line_start":169,"line_end":169,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76630,"byte_end":76633,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ Returns `Self::max` if `self == Self::min`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76635,"byte_end":76682,"line_start":171,"line_end":171,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76984,"byte_end":76994,"line_start":184,"line_end":184,"column_start":5,"column_end":15},"name":"reciprocal","qualname":"::fixed::FixedPointNumber::reciprocal","value":"fn (self) -> Option<Self>","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Takes the reciprocal (inverse). Equal to `1 / self`.","sig":null,"attributes":[{"value":"/ Takes the reciprocal (inverse). Equal to `1 / self`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76883,"byte_end":76939,"line_start":181,"line_end":181,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76941,"byte_end":76944,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ Returns `None` if `self = 0`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":76946,"byte_end":76979,"line_start":183,"line_end":183,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77079,"byte_end":77083,"line_start":189,"line_end":189,"column_start":5,"column_end":9},"name":"zero","qualname":"::fixed::FixedPointNumber::zero","value":"fn () -> Self","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Returns zero.\n","sig":null,"attributes":[{"value":"/ Returns zero.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77057,"byte_end":77074,"line_start":188,"line_end":188,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77179,"byte_end":77186,"line_start":194,"line_end":194,"column_start":5,"column_end":12},"name":"is_zero","qualname":"::fixed::FixedPointNumber::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Checks if the number is zero.\n","sig":null,"attributes":[{"value":"/ Checks if the number is zero.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77141,"byte_end":77174,"line_start":193,"line_end":193,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77273,"byte_end":77276,"line_start":199,"line_end":199,"column_start":5,"column_end":8},"name":"one","qualname":"::fixed::FixedPointNumber::one","value":"fn () -> Self","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Returns one.\n","sig":null,"attributes":[{"value":"/ Returns one.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77252,"byte_end":77268,"line_start":198,"line_end":198,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77361,"byte_end":77367,"line_start":204,"line_end":204,"column_start":5,"column_end":11},"name":"is_one","qualname":"::fixed::FixedPointNumber::is_one","value":"fn (&self) -> bool","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Checks if the number is one.\n","sig":null,"attributes":[{"value":"/ Checks if the number is one.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77324,"byte_end":77356,"line_start":203,"line_end":203,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77474,"byte_end":77485,"line_start":209,"line_end":209,"column_start":5,"column_end":16},"name":"is_positive","qualname":"::fixed::FixedPointNumber::is_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Checks if the number is positive.\n","sig":null,"attributes":[{"value":"/ Checks if the number is positive.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77432,"byte_end":77469,"line_start":208,"line_end":208,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77592,"byte_end":77603,"line_start":214,"line_end":214,"column_start":5,"column_end":16},"name":"is_negative","qualname":"::fixed::FixedPointNumber::is_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Checks if the number is negative.\n","sig":null,"attributes":[{"value":"/ Checks if the number is negative.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77550,"byte_end":77587,"line_start":213,"line_end":213,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77701,"byte_end":77706,"line_start":219,"line_end":219,"column_start":5,"column_end":10},"name":"trunc","qualname":"::fixed::FixedPointNumber::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Returns the integer part.\n","sig":null,"attributes":[{"value":"/ Returns the integer part.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77667,"byte_end":77696,"line_start":218,"line_end":218,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78147,"byte_end":78151,"line_start":231,"line_end":231,"column_start":5,"column_end":9},"name":"frac","qualname":"::fixed::FixedPointNumber::frac","value":"fn (self) -> Self","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Returns the fractional part.","sig":null,"attributes":[{"value":"/ Returns the fractional part.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":77973,"byte_end":78005,"line_start":227,"line_end":227,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78007,"byte_end":78010,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ Note: the returned fraction will be non-negative for negative numbers,","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78012,"byte_end":78086,"line_start":229,"line_end":229,"column_start":2,"column_end":76}},{"value":"/ except in the case where the integer part is zero.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78088,"byte_end":78142,"line_start":230,"line_end":230,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78490,"byte_end":78494,"line_start":244,"line_end":244,"column_start":5,"column_end":9},"name":"ceil","qualname":"::fixed::FixedPointNumber::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the smallest integer greater than or equal to a number.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78343,"byte_end":78410,"line_start":241,"line_end":241,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78412,"byte_end":78415,"line_start":242,"line_end":242,"column_start":2,"column_end":5}},{"value":"/ Saturates to `Self::max` (truncated) if the result does not fit.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78417,"byte_end":78485,"line_start":243,"line_end":243,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78760,"byte_end":78765,"line_start":255,"line_end":255,"column_start":5,"column_end":10},"name":"floor","qualname":"::fixed::FixedPointNumber::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the largest integer less than or equal to a number.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78617,"byte_end":78680,"line_start":252,"line_end":252,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78682,"byte_end":78685,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ Saturates to `Self::min` (truncated) if the result does not fit.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78687,"byte_end":78755,"line_start":254,"line_end":254,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":79074,"byte_end":79079,"line_start":266,"line_end":266,"column_start":5,"column_end":10},"name":"round","qualname":"::fixed::FixedPointNumber::round","value":"fn (self) -> Self","parent":{"krate":0,"index":273},"children":[],"decl_id":null,"docs":" Returns the number rounded to the nearest integer. Rounds half-way cases away from 0.0.","sig":null,"attributes":[{"value":"/ Returns the number rounded to the nearest integer. Rounds half-way cases away from 0.0.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78888,"byte_end":78979,"line_start":263,"line_end":263,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78981,"byte_end":78984,"line_start":264,"line_end":264,"column_start":2,"column_end":5}},{"value":"/ Saturates to `Self::min` or `Self::max` (truncated) if the result does not fit.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":78986,"byte_end":79069,"line_start":265,"line_end":265,"column_start":2,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1061},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":118354,"byte_end":118361,"line_start":1509,"line_end":1509,"column_start":2,"column_end":9},"name":"Fixed64","qualname":"::fixed::Fixed64","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point number representation in the range.","sig":null,"attributes":[{"value":"/ A fixed point number representation in the range.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":80697,"byte_end":80750,"line_start":325,"line_end":325,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":80753,"byte_end":80756,"line_start":326,"line_end":326,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":1165},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":118504,"byte_end":118512,"line_start":1517,"line_end":1517,"column_start":2,"column_end":10},"name":"Fixed128","qualname":"::fixed::Fixed128","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed point number representation in the range.","sig":null,"attributes":[{"value":"/ A fixed point number representation in the range.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":80697,"byte_end":80750,"line_start":325,"line_end":325,"column_start":3,"column_end":56}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":80753,"byte_end":80756,"line_start":326,"line_end":326,"column_start":3,"column_end":6}}]},{"kind":"Struct","id":{"krate":0,"index":1203},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":119648,"byte_end":119659,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"Rational128","qualname":"::rational128::Rational128","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper for any rational number with a 128 bit numerator and denominator.\n","sig":null,"attributes":[{"value":"/ A wrapper for any rational number with a 128 bit numerator and denominator.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":119507,"byte_end":119586,"line_start":23,"line_end":23,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":119715,"byte_end":119719,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"name":"zero","qualname":"<Rational128>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Nothing.\n","sig":null,"attributes":[{"value":"/ Nothing.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":119694,"byte_end":119706,"line_start":28,"line_end":28,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":119783,"byte_end":119790,"line_start":34,"line_end":34,"column_start":9,"column_end":16},"name":"is_zero","qualname":"<Rational128>::is_zero","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If it is zero or not\n","sig":null,"attributes":[{"value":"/ If it is zero or not","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":119750,"byte_end":119774,"line_start":33,"line_end":33,"column_start":2,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":119868,"byte_end":119872,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"name":"from","qualname":"<Rational128>::from","value":"fn (n: u128, d: u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build from a raw `n/d`.\n","sig":null,"attributes":[{"value":"/ Build from a raw `n/d`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":119832,"byte_end":119859,"line_start":38,"line_end":38,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120010,"byte_end":120024,"line_start":44,"line_end":44,"column_start":9,"column_end":23},"name":"from_unchecked","qualname":"<Rational128>::from_unchecked","value":"fn (n: u128, d: u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build from a raw `n/d`. This could lead to / 0 if not properly handled.\n","sig":null,"attributes":[{"value":"/ Build from a raw `n/d`. This could lead to / 0 if not properly handled.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":119926,"byte_end":120001,"line_start":43,"line_end":43,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120105,"byte_end":120106,"line_start":49,"line_end":49,"column_start":9,"column_end":10},"name":"n","qualname":"<Rational128>::n","value":"fn (&self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Return the numerator.\n","sig":null,"attributes":[{"value":"/ Return the numerator.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120071,"byte_end":120096,"line_start":48,"line_end":48,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120174,"byte_end":120175,"line_start":54,"line_end":54,"column_start":9,"column_end":10},"name":"d","qualname":"<Rational128>::d","value":"fn (&self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Return the denominator.\n","sig":null,"attributes":[{"value":"/ Return the denominator.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120138,"byte_end":120165,"line_start":53,"line_end":53,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120425,"byte_end":120431,"line_start":62,"line_end":62,"column_start":9,"column_end":15},"name":"to_den","qualname":"<Rational128>::to_den","value":"fn (self, den: u128) -> Result<Self, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Convert `self` to a similar rational number where denominator is the given `den`.\n This only returns if the result is accurate. `Err` is returned if the result cannot be\n accurately calculated.\n","sig":null,"attributes":[{"value":"/ Convert `self` to a similar rational number where denominator is the given `den`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120207,"byte_end":120292,"line_start":58,"line_end":58,"column_start":2,"column_end":87}},{"value":"/ This only returns if the result is accurate. `Err` is returned if the result cannot be","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120298,"byte_end":120388,"line_start":60,"line_end":60,"column_start":2,"column_end":92}},{"value":"/ accurately calculated.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120390,"byte_end":120416,"line_start":61,"line_end":61,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120806,"byte_end":120809,"line_start":74,"line_end":74,"column_start":9,"column_end":12},"name":"lcm","qualname":"<Rational128>::lcm","value":"fn (&self, other: &Self) -> Result<u128, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Get the least common divisor of `self` and `other`.","sig":null,"attributes":[{"value":"/ Get the least common divisor of `self` and `other`.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120617,"byte_end":120672,"line_start":70,"line_end":70,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120674,"byte_end":120677,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ This only returns if the result is accurate. `Err` is returned if the result cannot be","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120679,"byte_end":120769,"line_start":72,"line_end":72,"column_start":2,"column_end":92}},{"value":"/ accurately calculated.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":120771,"byte_end":120797,"line_start":73,"line_end":73,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":121188,"byte_end":121207,"line_start":82,"line_end":82,"column_start":9,"column_end":28},"name":"lazy_saturating_add","qualname":"<Rational128>::lazy_saturating_add","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A saturating add that assumes `self` and `other` have the same denominator.\n","sig":null,"attributes":[{"value":"/ A saturating add that assumes `self` and `other` have the same denominator.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":121100,"byte_end":121179,"line_start":81,"line_end":81,"column_start":2,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":121432,"byte_end":121451,"line_start":91,"line_end":91,"column_start":9,"column_end":28},"name":"lazy_saturating_sub","qualname":"<Rational128>::lazy_saturating_sub","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A saturating subtraction that assumes `self` and `other` have the same denominator.\n","sig":null,"attributes":[{"value":"/ A saturating subtraction that assumes `self` and `other` have the same denominator.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":121336,"byte_end":121423,"line_start":90,"line_end":90,"column_start":2,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":121755,"byte_end":121766,"line_start":102,"line_end":102,"column_start":9,"column_end":20},"name":"checked_add","qualname":"<Rational128>::checked_add","value":"fn (self, other: Self) -> Result<Self, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Addition. Simply tries to unify the denominators and add the numerators.","sig":null,"attributes":[{"value":"/ Addition. Simply tries to unify the denominators and add the numerators.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":121580,"byte_end":121656,"line_start":99,"line_end":99,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":121658,"byte_end":121661,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ Overflow might happen during any of the steps. Error is returned in such cases.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":121663,"byte_end":121746,"line_start":101,"line_end":101,"column_start":2,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":122383,"byte_end":122394,"line_start":114,"line_end":114,"column_start":9,"column_end":20},"name":"checked_sub","qualname":"<Rational128>::checked_sub","value":"fn (self, other: Self) -> Result<Self, &'static str>","parent":null,"children":[],"decl_id":null,"docs":" Subtraction. Simply tries to unify the denominators and subtract the numerators.","sig":null,"attributes":[{"value":"/ Subtraction. Simply tries to unify the denominators and subtract the numerators.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":122201,"byte_end":122285,"line_start":111,"line_end":111,"column_start":2,"column_end":86}},{"value":"/","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":122287,"byte_end":122290,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ Overflow might happen during any of the steps. None is returned in such cases.","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":122292,"byte_end":122374,"line_start":113,"line_end":113,"column_start":2,"column_end":84}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4420,"byte_end":4427,"line_start":82,"line_end":82,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":15169,"byte_end":15176,"line_start":431,"line_end":431,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":15538,"byte_end":15545,"line_start":449,"line_end":449,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":15641,"byte_end":15648,"line_start":455,"line_end":455,"column_start":13,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":15666,"byte_end":15673,"line_start":457,"line_end":457,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":16366,"byte_end":16373,"line_start":481,"line_end":481,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":16483,"byte_end":16490,"line_start":487,"line_end":487,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":16598,"byte_end":16605,"line_start":494,"line_end":494,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":16735,"byte_end":16742,"line_start":501,"line_end":501,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":16846,"byte_end":16853,"line_start":508,"line_end":508,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":17989,"byte_end":17996,"line_start":555,"line_end":555,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30026,"byte_end":30027,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30455,"byte_end":30456,"line_start":80,"line_end":80,"column_start":66,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31123,"byte_end":31124,"line_start":96,"line_end":96,"column_start":76,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31308,"byte_end":31309,"line_start":102,"line_end":102,"column_start":76,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":32280,"byte_end":32281,"line_start":127,"line_end":127,"column_start":105,"column_end":106},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33896,"byte_end":33897,"line_start":174,"line_end":174,"column_start":40,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":79534,"byte_end":79538,"line_start":283,"line_end":283,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":119679,"byte_end":119690,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":122856,"byte_end":122867,"line_start":125,"line_end":125,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":122972,"byte_end":122983,"line_start":131,"line_end":131,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":123488,"byte_end":123499,"line_start":149,"line_end":149,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1104,"byte_end":1111,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1121,"byte_end":1135,"line_start":37,"line_end":37,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":73}},{"kind":"Mod","span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/lib.rs","byte_start":1145,"byte_end":1151,"line_start":38,"line_end":38,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":87}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":4420,"byte_end":4427,"line_start":82,"line_end":82,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":15169,"byte_end":15176,"line_start":431,"line_end":431,"column_start":29,"column_end":36},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":15538,"byte_end":15545,"line_start":449,"line_end":449,"column_start":20,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":1619}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":15641,"byte_end":15648,"line_start":455,"line_end":455,"column_start":13,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":15666,"byte_end":15673,"line_start":457,"line_end":457,"column_start":14,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":1645}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":16366,"byte_end":16373,"line_start":481,"line_end":481,"column_start":21,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":1656}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":16483,"byte_end":16490,"line_start":487,"line_end":487,"column_start":19,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":1946}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":16598,"byte_end":16605,"line_start":494,"line_end":494,"column_start":19,"column_end":26},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":1951}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":16735,"byte_end":16742,"line_start":501,"line_end":501,"column_start":19,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":1956}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":16846,"byte_end":16853,"line_start":508,"line_end":508,"column_start":15,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":377},"to":{"krate":15,"index":295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/biguint.rs","byte_start":17989,"byte_end":17996,"line_start":555,"line_end":555,"column_start":23,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28120,"byte_end":28124,"line_start":34,"line_end":34,"column_start":2,"column_end":6},"kind":"SuperTrait","from":{"krate":2,"index":1807},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28132,"byte_end":28136,"line_start":35,"line_end":35,"column_start":2,"column_end":6},"kind":"SuperTrait","from":{"krate":15,"index":295},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28139,"byte_end":28142,"line_start":35,"line_end":35,"column_start":9,"column_end":12},"kind":"SuperTrait","from":{"krate":15,"index":305},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28145,"byte_end":28162,"line_start":35,"line_end":35,"column_start":15,"column_end":32},"kind":"SuperTrait","from":{"krate":23,"index":4},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28166,"byte_end":28169,"line_start":36,"line_end":36,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":1946},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28193,"byte_end":28202,"line_start":36,"line_end":36,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":1979},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28212,"byte_end":28215,"line_start":37,"line_end":37,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":1951},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28239,"byte_end":28248,"line_start":37,"line_end":37,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":1983},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28258,"byte_end":28261,"line_start":38,"line_end":38,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":1956},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28285,"byte_end":28294,"line_start":38,"line_end":38,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":1987},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28304,"byte_end":28307,"line_start":39,"line_end":39,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":1961},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28331,"byte_end":28340,"line_start":39,"line_end":39,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":1991},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28350,"byte_end":28353,"line_start":40,"line_end":40,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":1967},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28377,"byte_end":28386,"line_start":40,"line_end":40,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":1995},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28396,"byte_end":28399,"line_start":41,"line_end":41,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":2,"index":2019},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28422,"byte_end":28425,"line_start":41,"line_end":41,"column_start":28,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2025},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28449,"byte_end":28459,"line_start":42,"line_end":42,"column_start":2,"column_end":12},"kind":"SuperTrait","from":{"krate":15,"index":374},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28462,"byte_end":28472,"line_start":42,"line_end":42,"column_start":15,"column_end":25},"kind":"SuperTrait","from":{"krate":15,"index":377},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28475,"byte_end":28485,"line_start":42,"line_end":42,"column_start":28,"column_end":38},"kind":"SuperTrait","from":{"krate":15,"index":360},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28488,"byte_end":28498,"line_start":42,"line_end":42,"column_start":41,"column_end":51},"kind":"SuperTrait","from":{"krate":15,"index":363},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28501,"byte_end":28511,"line_start":42,"line_end":42,"column_start":54,"column_end":64},"kind":"SuperTrait","from":{"krate":15,"index":365},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28514,"byte_end":28524,"line_start":42,"line_end":42,"column_start":67,"column_end":77},"kind":"SuperTrait","from":{"krate":15,"index":367},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28527,"byte_end":28537,"line_start":42,"line_end":42,"column_start":80,"column_end":90},"kind":"SuperTrait","from":{"krate":0,"index":143},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28541,"byte_end":28551,"line_start":43,"line_end":43,"column_start":2,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":1656},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28560,"byte_end":28563,"line_start":43,"line_end":43,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1645},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28566,"byte_end":28573,"line_start":43,"line_end":43,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":15,"index":87},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28576,"byte_end":28586,"line_start":43,"line_end":43,"column_start":37,"column_end":47},"kind":"SuperTrait","from":{"krate":17,"index":477},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28589,"byte_end":28594,"line_start":43,"line_end":43,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28598,"byte_end":28605,"line_start":44,"line_end":44,"column_start":2,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1814},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28612,"byte_end":28619,"line_start":44,"line_end":44,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":1810},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28626,"byte_end":28633,"line_start":44,"line_end":44,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1814},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28641,"byte_end":28648,"line_start":44,"line_end":44,"column_start":45,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":1810},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28656,"byte_end":28663,"line_start":44,"line_end":44,"column_start":60,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":1814},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28671,"byte_end":28678,"line_start":44,"line_end":44,"column_start":75,"column_end":82},"kind":"SuperTrait","from":{"krate":2,"index":1810},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28687,"byte_end":28694,"line_start":45,"line_end":45,"column_start":2,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1814},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28702,"byte_end":28709,"line_start":45,"line_end":45,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1810},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28717,"byte_end":28724,"line_start":45,"line_end":45,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1814},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28733,"byte_end":28740,"line_start":45,"line_end":45,"column_start":48,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1810},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28749,"byte_end":28756,"line_start":45,"line_end":45,"column_start":64,"column_end":71},"kind":"SuperTrait","from":{"krate":2,"index":1814},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28766,"byte_end":28773,"line_start":45,"line_end":45,"column_start":81,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":1810},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28784,"byte_end":28803,"line_start":46,"line_end":46,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":127},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28810,"byte_end":28829,"line_start":46,"line_end":46,"column_start":28,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":130},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28837,"byte_end":28856,"line_start":47,"line_end":47,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":127},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28864,"byte_end":28883,"line_start":47,"line_end":47,"column_start":29,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":130},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28892,"byte_end":28911,"line_start":48,"line_end":48,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":127},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28919,"byte_end":28938,"line_start":48,"line_end":48,"column_start":29,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":130},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28947,"byte_end":28966,"line_start":49,"line_end":49,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":127},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":28974,"byte_end":28993,"line_start":49,"line_end":49,"column_start":29,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":130},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":29002,"byte_end":29021,"line_start":50,"line_end":50,"column_start":2,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":127},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":29030,"byte_end":29049,"line_start":50,"line_end":50,"column_start":30,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":130},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30026,"byte_end":30027,"line_start":71,"line_end":71,"column_start":22,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":123},"to":{"krate":0,"index":121}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30347,"byte_end":30361,"line_start":78,"line_end":78,"column_start":25,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":121},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30364,"byte_end":30368,"line_start":78,"line_end":78,"column_start":42,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":1807},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30376,"byte_end":30380,"line_start":78,"line_end":78,"column_start":54,"column_end":58},"kind":"SuperTrait","from":{"krate":2,"index":1807},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30455,"byte_end":30456,"line_start":80,"line_end":80,"column_start":66,"column_end":67},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":126},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30640,"byte_end":30645,"line_start":84,"line_end":84,"column_start":42,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":127}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":30943,"byte_end":30948,"line_start":91,"line_end":91,"column_start":42,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31123,"byte_end":31124,"line_start":96,"line_end":96,"column_start":76,"column_end":77},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":135},"to":{"krate":0,"index":127}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":31308,"byte_end":31309,"line_start":102,"line_end":102,"column_start":76,"column_end":77},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":130}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":32280,"byte_end":32281,"line_start":127,"line_end":127,"column_start":105,"column_end":106},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":149},"to":{"krate":0,"index":143}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/traits.rs","byte_start":33896,"byte_end":33897,"line_start":174,"line_end":174,"column_start":40,"column_end":41},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":161},"to":{"krate":0,"index":155}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35013,"byte_end":35018,"line_start":31,"line_end":31,"column_start":2,"column_end":7},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35021,"byte_end":35031,"line_start":31,"line_end":31,"column_start":10,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":143},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35034,"byte_end":35038,"line_start":31,"line_end":31,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35041,"byte_end":35048,"line_start":31,"line_end":31,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1874},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35051,"byte_end":35053,"line_start":31,"line_end":31,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1624},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35056,"byte_end":35065,"line_start":31,"line_end":31,"column_start":45,"column_end":54},"kind":"SuperTrait","from":{"krate":2,"index":1619},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35068,"byte_end":35071,"line_start":31,"line_end":31,"column_start":57,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":1645},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35074,"byte_end":35084,"line_start":31,"line_end":31,"column_start":63,"column_end":73},"kind":"SuperTrait","from":{"krate":2,"index":1656},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35087,"byte_end":35094,"line_start":31,"line_end":31,"column_start":76,"column_end":83},"kind":"SuperTrait","from":{"krate":15,"index":87},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/per_things.rs","byte_start":35102,"byte_end":35107,"line_start":31,"line_end":31,"column_start":91,"column_end":96},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":182}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":71667,"byte_end":71671,"line_start":33,"line_end":33,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":71674,"byte_end":71679,"line_start":33,"line_end":33,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":71682,"byte_end":71689,"line_start":33,"line_end":33,"column_start":45,"column_end":52},"kind":"SuperTrait","from":{"krate":15,"index":87},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":71692,"byte_end":71696,"line_start":33,"line_end":33,"column_start":55,"column_end":59},"kind":"SuperTrait","from":{"krate":15,"index":295},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":71699,"byte_end":71709,"line_start":33,"line_end":33,"column_start":62,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":143},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":71713,"byte_end":71723,"line_start":34,"line_end":34,"column_start":4,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":1656},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":71726,"byte_end":71745,"line_start":34,"line_end":34,"column_start":17,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":130},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":71754,"byte_end":71761,"line_start":34,"line_end":34,"column_start":45,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":1814},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":71770,"byte_end":71780,"line_start":34,"line_end":34,"column_start":61,"column_end":71},"kind":"SuperTrait","from":{"krate":15,"index":372},"to":{"krate":0,"index":262}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72505,"byte_end":72510,"line_start":55,"line_end":55,"column_start":2,"column_end":7},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72513,"byte_end":72517,"line_start":55,"line_end":55,"column_start":10,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72520,"byte_end":72527,"line_start":55,"line_end":55,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1874},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72530,"byte_end":72535,"line_start":55,"line_end":55,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72539,"byte_end":72549,"line_start":56,"line_end":56,"column_start":4,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":143},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72552,"byte_end":72559,"line_start":56,"line_end":56,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":15,"index":87},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72563,"byte_end":72565,"line_start":57,"line_end":57,"column_start":4,"column_end":6},"kind":"SuperTrait","from":{"krate":2,"index":1624},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72568,"byte_end":72577,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"kind":"SuperTrait","from":{"krate":2,"index":1619},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72580,"byte_end":72583,"line_start":57,"line_end":57,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1645},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72586,"byte_end":72596,"line_start":57,"line_end":57,"column_start":27,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1656},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72600,"byte_end":72610,"line_start":58,"line_end":58,"column_start":4,"column_end":14},"kind":"SuperTrait","from":{"krate":15,"index":363},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72613,"byte_end":72623,"line_start":58,"line_end":58,"column_start":17,"column_end":27},"kind":"SuperTrait","from":{"krate":15,"index":360},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72626,"byte_end":72636,"line_start":58,"line_end":58,"column_start":30,"column_end":40},"kind":"SuperTrait","from":{"krate":15,"index":365},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72639,"byte_end":72649,"line_start":58,"line_end":58,"column_start":43,"column_end":53},"kind":"SuperTrait","from":{"krate":15,"index":367},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72653,"byte_end":72656,"line_start":59,"line_end":59,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":2,"index":1946},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72659,"byte_end":72662,"line_start":59,"line_end":59,"column_start":10,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":1951},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72665,"byte_end":72668,"line_start":59,"line_end":59,"column_start":16,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":1961},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":72671,"byte_end":72674,"line_start":59,"line_end":59,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1956},"to":{"krate":0,"index":273}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/fixed.rs","byte_start":79534,"byte_end":79538,"line_start":283,"line_end":283,"column_start":40,"column_end":44},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":318},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":119679,"byte_end":119690,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":122856,"byte_end":122867,"line_start":125,"line_end":125,"column_start":21,"column_end":32},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1203},"to":{"krate":2,"index":1656}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":122972,"byte_end":122983,"line_start":131,"line_end":131,"column_start":14,"column_end":25},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1203},"to":{"krate":2,"index":1645}},{"span":{"file_name":"/home/ipfs/.cargo/git/checkouts/substrate-7e08433d4c370a21/45b9f0a/primitives/arithmetic/src/rational128.rs","byte_start":123488,"byte_end":123499,"line_start":149,"line_end":149,"column_start":20,"column_end":31},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1203},"to":{"krate":2,"index":1619}}]}